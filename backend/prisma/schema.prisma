// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
enum Role{
  STUDENT
  TEACHER
  ADMIN
}
enum Category{
  MATHS
  PHYSICS
  CHEMISTRY
  BIOLOGY
  SOCIAL
}
enum TeacherRole{
  PRIMARY
  SECONDARY
  ASSISTANT
}
enum QuestionType{
  CTCA
  FITB
}
model User{
  user_id String @id @default(uuid())
  username String
  email String @unique
  password String
  role Role @default(STUDENT)
  createdAt DateTime @default(now())

  //Relations
  enrollments  Enrollments[] //A user can have multiple enrollments via Enrollments Table (One to Many)
  courseteachers CourseTeachers[] // A Teacher can teach multiple courses via courseTeachers table (One to Many)
  discussions Discussions[] // A user can have multiple discussions (One to Many)
  progress Progress[]
}
model Enrollments{
  enrollment_id String @id @default(uuid())
  user_id String
  course_id String
  enrolled_at DateTime @default(now())

  //Relations
  user User @relation(fields: [user_id],references: [user_id])
  course Courses @relation(fields: [course_id],references: [course_id])

  @@unique([user_id,course_id])

}

model Courses{
  course_id String @id @default(uuid())
  title String
  description String
  category Category
  createdAt DateTime @default(now()) 

  courses CourseTeachers[] // Courses can have multiple Teachers via CourseTeachers (One To Many)
  lessons Lessons[]
  quizzes Quizzes[]
  discussions Discussions[]
  enrollments Enrollments[]
  progress Progress[]

}

model CourseTeachers{
  id String @id @default(uuid())
  user_id String 
  course_id String
  teacher_role TeacherRole @default(PRIMARY)
  assigned_at DateTime @default(now())

  //Relations
  user User @relation(fields: [user_id],references: [user_id])
  courses Courses @relation(fields: [course_id],references: [course_id])
  @@unique([course_id,teacher_role])


}

model Lessons{
  lesson_id String @id @default(uuid())
  course_id String
  title String
  content String
  position Int 

  //Relations
  course Courses @relation(fields: [course_id],references: [course_id])
  progress Progress[]

}

model Quizzes{
  quiz_id String @id @default(uuid())
  course_id String
  title String
  total_questions Int

  //Relations
  course Courses @relation(fields: [course_id],references: [course_id])
  questions Questions[]

}

model Questions{
  question_id String @id @default(uuid())
  quiz_id String
  text String
  type QuestionType

  //Relations
  quizzes Quizzes @relation(fields: [quiz_id],references: [quiz_id])
  options Options[]

}

model Options{
  option_id String @id @default(uuid())
  question_id String
  text String
  is_correct Boolean

  //Relations
  question Questions @relation(fields: [question_id],references: [question_id])

}


model Progress{
  progress_id String @id @default(uuid())
  user_id String 
  course_id String
  lesson_id String
  is_complete Boolean
  updated_at DateTime @updatedAt

  //Relations
  user User @relation(fields: [user_id],references: [user_id])
  course Courses @relation(fields: [course_id],references: [course_id])
  lesson Lessons @relation(fields: [lesson_id],references: [lesson_id])

}

model Discussions{
  discussion_id String @id @default(uuid())
  course_id String
  user_id String
  title String
  content String
  created_at DateTime @default(now())

  //Relations
  user User @relation(fields: [user_id],references: [user_id])
  course Courses @relation(fields: [course_id],references: [course_id])
  comments Comments[]

}

model Comments{
  comment_id String @id @default(uuid())
  discussion_id String
  user_id String
  content String
  created_at DateTime @default(now())

  //Relations
  discussion Discussions @relation(fields: [discussion_id],references: [discussion_id])

}