
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Enrollments
 * 
 */
export type Enrollments = $Result.DefaultSelection<Prisma.$EnrollmentsPayload>
/**
 * Model Courses
 * 
 */
export type Courses = $Result.DefaultSelection<Prisma.$CoursesPayload>
/**
 * Model CourseTeachers
 * 
 */
export type CourseTeachers = $Result.DefaultSelection<Prisma.$CourseTeachersPayload>
/**
 * Model Lessons
 * 
 */
export type Lessons = $Result.DefaultSelection<Prisma.$LessonsPayload>
/**
 * Model Quizzes
 * 
 */
export type Quizzes = $Result.DefaultSelection<Prisma.$QuizzesPayload>
/**
 * Model Questions
 * 
 */
export type Questions = $Result.DefaultSelection<Prisma.$QuestionsPayload>
/**
 * Model Options
 * 
 */
export type Options = $Result.DefaultSelection<Prisma.$OptionsPayload>
/**
 * Model Progress
 * 
 */
export type Progress = $Result.DefaultSelection<Prisma.$ProgressPayload>
/**
 * Model Discussions
 * 
 */
export type Discussions = $Result.DefaultSelection<Prisma.$DiscussionsPayload>
/**
 * Model Comments
 * 
 */
export type Comments = $Result.DefaultSelection<Prisma.$CommentsPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  STUDENT: 'STUDENT',
  TEACHER: 'TEACHER',
  ADMIN: 'ADMIN'
};

export type Role = (typeof Role)[keyof typeof Role]


export const Category: {
  MATHS: 'MATHS',
  PHYSICS: 'PHYSICS',
  CHEMISTRY: 'CHEMISTRY',
  BIOLOGY: 'BIOLOGY',
  SOCIAL: 'SOCIAL'
};

export type Category = (typeof Category)[keyof typeof Category]


export const TeacherRole: {
  PRIMARY: 'PRIMARY',
  SECONDARY: 'SECONDARY',
  ASSISTANT: 'ASSISTANT'
};

export type TeacherRole = (typeof TeacherRole)[keyof typeof TeacherRole]


export const QuestionType: {
  CTCA: 'CTCA',
  FITB: 'FITB'
};

export type QuestionType = (typeof QuestionType)[keyof typeof QuestionType]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type Category = $Enums.Category

export const Category: typeof $Enums.Category

export type TeacherRole = $Enums.TeacherRole

export const TeacherRole: typeof $Enums.TeacherRole

export type QuestionType = $Enums.QuestionType

export const QuestionType: typeof $Enums.QuestionType

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.enrollments`: Exposes CRUD operations for the **Enrollments** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Enrollments
    * const enrollments = await prisma.enrollments.findMany()
    * ```
    */
  get enrollments(): Prisma.EnrollmentsDelegate<ExtArgs>;

  /**
   * `prisma.courses`: Exposes CRUD operations for the **Courses** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Courses
    * const courses = await prisma.courses.findMany()
    * ```
    */
  get courses(): Prisma.CoursesDelegate<ExtArgs>;

  /**
   * `prisma.courseTeachers`: Exposes CRUD operations for the **CourseTeachers** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CourseTeachers
    * const courseTeachers = await prisma.courseTeachers.findMany()
    * ```
    */
  get courseTeachers(): Prisma.CourseTeachersDelegate<ExtArgs>;

  /**
   * `prisma.lessons`: Exposes CRUD operations for the **Lessons** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Lessons
    * const lessons = await prisma.lessons.findMany()
    * ```
    */
  get lessons(): Prisma.LessonsDelegate<ExtArgs>;

  /**
   * `prisma.quizzes`: Exposes CRUD operations for the **Quizzes** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Quizzes
    * const quizzes = await prisma.quizzes.findMany()
    * ```
    */
  get quizzes(): Prisma.QuizzesDelegate<ExtArgs>;

  /**
   * `prisma.questions`: Exposes CRUD operations for the **Questions** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Questions
    * const questions = await prisma.questions.findMany()
    * ```
    */
  get questions(): Prisma.QuestionsDelegate<ExtArgs>;

  /**
   * `prisma.options`: Exposes CRUD operations for the **Options** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Options
    * const options = await prisma.options.findMany()
    * ```
    */
  get options(): Prisma.OptionsDelegate<ExtArgs>;

  /**
   * `prisma.progress`: Exposes CRUD operations for the **Progress** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Progresses
    * const progresses = await prisma.progress.findMany()
    * ```
    */
  get progress(): Prisma.ProgressDelegate<ExtArgs>;

  /**
   * `prisma.discussions`: Exposes CRUD operations for the **Discussions** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Discussions
    * const discussions = await prisma.discussions.findMany()
    * ```
    */
  get discussions(): Prisma.DiscussionsDelegate<ExtArgs>;

  /**
   * `prisma.comments`: Exposes CRUD operations for the **Comments** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comments
    * const comments = await prisma.comments.findMany()
    * ```
    */
  get comments(): Prisma.CommentsDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.1.0
   * Query Engine version: 11f085a2012c0f4778414c8db2651556ee0ef959
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Enrollments: 'Enrollments',
    Courses: 'Courses',
    CourseTeachers: 'CourseTeachers',
    Lessons: 'Lessons',
    Quizzes: 'Quizzes',
    Questions: 'Questions',
    Options: 'Options',
    Progress: 'Progress',
    Discussions: 'Discussions',
    Comments: 'Comments'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "enrollments" | "courses" | "courseTeachers" | "lessons" | "quizzes" | "questions" | "options" | "progress" | "discussions" | "comments"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Enrollments: {
        payload: Prisma.$EnrollmentsPayload<ExtArgs>
        fields: Prisma.EnrollmentsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EnrollmentsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnrollmentsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EnrollmentsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnrollmentsPayload>
          }
          findFirst: {
            args: Prisma.EnrollmentsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnrollmentsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EnrollmentsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnrollmentsPayload>
          }
          findMany: {
            args: Prisma.EnrollmentsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnrollmentsPayload>[]
          }
          create: {
            args: Prisma.EnrollmentsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnrollmentsPayload>
          }
          createMany: {
            args: Prisma.EnrollmentsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EnrollmentsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnrollmentsPayload>[]
          }
          delete: {
            args: Prisma.EnrollmentsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnrollmentsPayload>
          }
          update: {
            args: Prisma.EnrollmentsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnrollmentsPayload>
          }
          deleteMany: {
            args: Prisma.EnrollmentsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EnrollmentsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EnrollmentsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnrollmentsPayload>
          }
          aggregate: {
            args: Prisma.EnrollmentsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEnrollments>
          }
          groupBy: {
            args: Prisma.EnrollmentsGroupByArgs<ExtArgs>
            result: $Utils.Optional<EnrollmentsGroupByOutputType>[]
          }
          count: {
            args: Prisma.EnrollmentsCountArgs<ExtArgs>
            result: $Utils.Optional<EnrollmentsCountAggregateOutputType> | number
          }
        }
      }
      Courses: {
        payload: Prisma.$CoursesPayload<ExtArgs>
        fields: Prisma.CoursesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CoursesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CoursesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursesPayload>
          }
          findFirst: {
            args: Prisma.CoursesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CoursesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursesPayload>
          }
          findMany: {
            args: Prisma.CoursesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursesPayload>[]
          }
          create: {
            args: Prisma.CoursesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursesPayload>
          }
          createMany: {
            args: Prisma.CoursesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CoursesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursesPayload>[]
          }
          delete: {
            args: Prisma.CoursesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursesPayload>
          }
          update: {
            args: Prisma.CoursesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursesPayload>
          }
          deleteMany: {
            args: Prisma.CoursesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CoursesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CoursesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursesPayload>
          }
          aggregate: {
            args: Prisma.CoursesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCourses>
          }
          groupBy: {
            args: Prisma.CoursesGroupByArgs<ExtArgs>
            result: $Utils.Optional<CoursesGroupByOutputType>[]
          }
          count: {
            args: Prisma.CoursesCountArgs<ExtArgs>
            result: $Utils.Optional<CoursesCountAggregateOutputType> | number
          }
        }
      }
      CourseTeachers: {
        payload: Prisma.$CourseTeachersPayload<ExtArgs>
        fields: Prisma.CourseTeachersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CourseTeachersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseTeachersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CourseTeachersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseTeachersPayload>
          }
          findFirst: {
            args: Prisma.CourseTeachersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseTeachersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CourseTeachersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseTeachersPayload>
          }
          findMany: {
            args: Prisma.CourseTeachersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseTeachersPayload>[]
          }
          create: {
            args: Prisma.CourseTeachersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseTeachersPayload>
          }
          createMany: {
            args: Prisma.CourseTeachersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CourseTeachersCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseTeachersPayload>[]
          }
          delete: {
            args: Prisma.CourseTeachersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseTeachersPayload>
          }
          update: {
            args: Prisma.CourseTeachersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseTeachersPayload>
          }
          deleteMany: {
            args: Prisma.CourseTeachersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CourseTeachersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CourseTeachersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseTeachersPayload>
          }
          aggregate: {
            args: Prisma.CourseTeachersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCourseTeachers>
          }
          groupBy: {
            args: Prisma.CourseTeachersGroupByArgs<ExtArgs>
            result: $Utils.Optional<CourseTeachersGroupByOutputType>[]
          }
          count: {
            args: Prisma.CourseTeachersCountArgs<ExtArgs>
            result: $Utils.Optional<CourseTeachersCountAggregateOutputType> | number
          }
        }
      }
      Lessons: {
        payload: Prisma.$LessonsPayload<ExtArgs>
        fields: Prisma.LessonsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LessonsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LessonsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonsPayload>
          }
          findFirst: {
            args: Prisma.LessonsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LessonsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonsPayload>
          }
          findMany: {
            args: Prisma.LessonsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonsPayload>[]
          }
          create: {
            args: Prisma.LessonsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonsPayload>
          }
          createMany: {
            args: Prisma.LessonsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LessonsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonsPayload>[]
          }
          delete: {
            args: Prisma.LessonsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonsPayload>
          }
          update: {
            args: Prisma.LessonsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonsPayload>
          }
          deleteMany: {
            args: Prisma.LessonsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LessonsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LessonsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonsPayload>
          }
          aggregate: {
            args: Prisma.LessonsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLessons>
          }
          groupBy: {
            args: Prisma.LessonsGroupByArgs<ExtArgs>
            result: $Utils.Optional<LessonsGroupByOutputType>[]
          }
          count: {
            args: Prisma.LessonsCountArgs<ExtArgs>
            result: $Utils.Optional<LessonsCountAggregateOutputType> | number
          }
        }
      }
      Quizzes: {
        payload: Prisma.$QuizzesPayload<ExtArgs>
        fields: Prisma.QuizzesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.QuizzesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuizzesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.QuizzesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuizzesPayload>
          }
          findFirst: {
            args: Prisma.QuizzesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuizzesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.QuizzesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuizzesPayload>
          }
          findMany: {
            args: Prisma.QuizzesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuizzesPayload>[]
          }
          create: {
            args: Prisma.QuizzesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuizzesPayload>
          }
          createMany: {
            args: Prisma.QuizzesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.QuizzesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuizzesPayload>[]
          }
          delete: {
            args: Prisma.QuizzesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuizzesPayload>
          }
          update: {
            args: Prisma.QuizzesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuizzesPayload>
          }
          deleteMany: {
            args: Prisma.QuizzesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.QuizzesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.QuizzesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuizzesPayload>
          }
          aggregate: {
            args: Prisma.QuizzesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateQuizzes>
          }
          groupBy: {
            args: Prisma.QuizzesGroupByArgs<ExtArgs>
            result: $Utils.Optional<QuizzesGroupByOutputType>[]
          }
          count: {
            args: Prisma.QuizzesCountArgs<ExtArgs>
            result: $Utils.Optional<QuizzesCountAggregateOutputType> | number
          }
        }
      }
      Questions: {
        payload: Prisma.$QuestionsPayload<ExtArgs>
        fields: Prisma.QuestionsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.QuestionsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.QuestionsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionsPayload>
          }
          findFirst: {
            args: Prisma.QuestionsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.QuestionsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionsPayload>
          }
          findMany: {
            args: Prisma.QuestionsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionsPayload>[]
          }
          create: {
            args: Prisma.QuestionsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionsPayload>
          }
          createMany: {
            args: Prisma.QuestionsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.QuestionsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionsPayload>[]
          }
          delete: {
            args: Prisma.QuestionsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionsPayload>
          }
          update: {
            args: Prisma.QuestionsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionsPayload>
          }
          deleteMany: {
            args: Prisma.QuestionsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.QuestionsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.QuestionsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionsPayload>
          }
          aggregate: {
            args: Prisma.QuestionsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateQuestions>
          }
          groupBy: {
            args: Prisma.QuestionsGroupByArgs<ExtArgs>
            result: $Utils.Optional<QuestionsGroupByOutputType>[]
          }
          count: {
            args: Prisma.QuestionsCountArgs<ExtArgs>
            result: $Utils.Optional<QuestionsCountAggregateOutputType> | number
          }
        }
      }
      Options: {
        payload: Prisma.$OptionsPayload<ExtArgs>
        fields: Prisma.OptionsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OptionsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OptionsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OptionsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OptionsPayload>
          }
          findFirst: {
            args: Prisma.OptionsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OptionsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OptionsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OptionsPayload>
          }
          findMany: {
            args: Prisma.OptionsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OptionsPayload>[]
          }
          create: {
            args: Prisma.OptionsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OptionsPayload>
          }
          createMany: {
            args: Prisma.OptionsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OptionsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OptionsPayload>[]
          }
          delete: {
            args: Prisma.OptionsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OptionsPayload>
          }
          update: {
            args: Prisma.OptionsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OptionsPayload>
          }
          deleteMany: {
            args: Prisma.OptionsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OptionsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.OptionsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OptionsPayload>
          }
          aggregate: {
            args: Prisma.OptionsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOptions>
          }
          groupBy: {
            args: Prisma.OptionsGroupByArgs<ExtArgs>
            result: $Utils.Optional<OptionsGroupByOutputType>[]
          }
          count: {
            args: Prisma.OptionsCountArgs<ExtArgs>
            result: $Utils.Optional<OptionsCountAggregateOutputType> | number
          }
        }
      }
      Progress: {
        payload: Prisma.$ProgressPayload<ExtArgs>
        fields: Prisma.ProgressFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProgressFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgressPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProgressFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgressPayload>
          }
          findFirst: {
            args: Prisma.ProgressFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgressPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProgressFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgressPayload>
          }
          findMany: {
            args: Prisma.ProgressFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgressPayload>[]
          }
          create: {
            args: Prisma.ProgressCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgressPayload>
          }
          createMany: {
            args: Prisma.ProgressCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProgressCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgressPayload>[]
          }
          delete: {
            args: Prisma.ProgressDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgressPayload>
          }
          update: {
            args: Prisma.ProgressUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgressPayload>
          }
          deleteMany: {
            args: Prisma.ProgressDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProgressUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProgressUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProgressPayload>
          }
          aggregate: {
            args: Prisma.ProgressAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProgress>
          }
          groupBy: {
            args: Prisma.ProgressGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProgressGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProgressCountArgs<ExtArgs>
            result: $Utils.Optional<ProgressCountAggregateOutputType> | number
          }
        }
      }
      Discussions: {
        payload: Prisma.$DiscussionsPayload<ExtArgs>
        fields: Prisma.DiscussionsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DiscussionsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscussionsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DiscussionsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscussionsPayload>
          }
          findFirst: {
            args: Prisma.DiscussionsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscussionsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DiscussionsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscussionsPayload>
          }
          findMany: {
            args: Prisma.DiscussionsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscussionsPayload>[]
          }
          create: {
            args: Prisma.DiscussionsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscussionsPayload>
          }
          createMany: {
            args: Prisma.DiscussionsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DiscussionsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscussionsPayload>[]
          }
          delete: {
            args: Prisma.DiscussionsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscussionsPayload>
          }
          update: {
            args: Prisma.DiscussionsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscussionsPayload>
          }
          deleteMany: {
            args: Prisma.DiscussionsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DiscussionsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DiscussionsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiscussionsPayload>
          }
          aggregate: {
            args: Prisma.DiscussionsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDiscussions>
          }
          groupBy: {
            args: Prisma.DiscussionsGroupByArgs<ExtArgs>
            result: $Utils.Optional<DiscussionsGroupByOutputType>[]
          }
          count: {
            args: Prisma.DiscussionsCountArgs<ExtArgs>
            result: $Utils.Optional<DiscussionsCountAggregateOutputType> | number
          }
        }
      }
      Comments: {
        payload: Prisma.$CommentsPayload<ExtArgs>
        fields: Prisma.CommentsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CommentsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CommentsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentsPayload>
          }
          findFirst: {
            args: Prisma.CommentsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CommentsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentsPayload>
          }
          findMany: {
            args: Prisma.CommentsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentsPayload>[]
          }
          create: {
            args: Prisma.CommentsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentsPayload>
          }
          createMany: {
            args: Prisma.CommentsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CommentsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentsPayload>[]
          }
          delete: {
            args: Prisma.CommentsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentsPayload>
          }
          update: {
            args: Prisma.CommentsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentsPayload>
          }
          deleteMany: {
            args: Prisma.CommentsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CommentsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CommentsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentsPayload>
          }
          aggregate: {
            args: Prisma.CommentsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateComments>
          }
          groupBy: {
            args: Prisma.CommentsGroupByArgs<ExtArgs>
            result: $Utils.Optional<CommentsGroupByOutputType>[]
          }
          count: {
            args: Prisma.CommentsCountArgs<ExtArgs>
            result: $Utils.Optional<CommentsCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    enrollments: number
    courseteachers: number
    discussions: number
    progress: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    enrollments?: boolean | UserCountOutputTypeCountEnrollmentsArgs
    courseteachers?: boolean | UserCountOutputTypeCountCourseteachersArgs
    discussions?: boolean | UserCountOutputTypeCountDiscussionsArgs
    progress?: boolean | UserCountOutputTypeCountProgressArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountEnrollmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EnrollmentsWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCourseteachersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseTeachersWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountDiscussionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DiscussionsWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountProgressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProgressWhereInput
  }


  /**
   * Count Type CoursesCountOutputType
   */

  export type CoursesCountOutputType = {
    courses: number
    lessons: number
    quizzes: number
    discussions: number
    enrollments: number
    progress: number
  }

  export type CoursesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    courses?: boolean | CoursesCountOutputTypeCountCoursesArgs
    lessons?: boolean | CoursesCountOutputTypeCountLessonsArgs
    quizzes?: boolean | CoursesCountOutputTypeCountQuizzesArgs
    discussions?: boolean | CoursesCountOutputTypeCountDiscussionsArgs
    enrollments?: boolean | CoursesCountOutputTypeCountEnrollmentsArgs
    progress?: boolean | CoursesCountOutputTypeCountProgressArgs
  }

  // Custom InputTypes
  /**
   * CoursesCountOutputType without action
   */
  export type CoursesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoursesCountOutputType
     */
    select?: CoursesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CoursesCountOutputType without action
   */
  export type CoursesCountOutputTypeCountCoursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseTeachersWhereInput
  }

  /**
   * CoursesCountOutputType without action
   */
  export type CoursesCountOutputTypeCountLessonsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LessonsWhereInput
  }

  /**
   * CoursesCountOutputType without action
   */
  export type CoursesCountOutputTypeCountQuizzesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuizzesWhereInput
  }

  /**
   * CoursesCountOutputType without action
   */
  export type CoursesCountOutputTypeCountDiscussionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DiscussionsWhereInput
  }

  /**
   * CoursesCountOutputType without action
   */
  export type CoursesCountOutputTypeCountEnrollmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EnrollmentsWhereInput
  }

  /**
   * CoursesCountOutputType without action
   */
  export type CoursesCountOutputTypeCountProgressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProgressWhereInput
  }


  /**
   * Count Type LessonsCountOutputType
   */

  export type LessonsCountOutputType = {
    progress: number
  }

  export type LessonsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    progress?: boolean | LessonsCountOutputTypeCountProgressArgs
  }

  // Custom InputTypes
  /**
   * LessonsCountOutputType without action
   */
  export type LessonsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonsCountOutputType
     */
    select?: LessonsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LessonsCountOutputType without action
   */
  export type LessonsCountOutputTypeCountProgressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProgressWhereInput
  }


  /**
   * Count Type QuizzesCountOutputType
   */

  export type QuizzesCountOutputType = {
    questions: number
  }

  export type QuizzesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    questions?: boolean | QuizzesCountOutputTypeCountQuestionsArgs
  }

  // Custom InputTypes
  /**
   * QuizzesCountOutputType without action
   */
  export type QuizzesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuizzesCountOutputType
     */
    select?: QuizzesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * QuizzesCountOutputType without action
   */
  export type QuizzesCountOutputTypeCountQuestionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionsWhereInput
  }


  /**
   * Count Type QuestionsCountOutputType
   */

  export type QuestionsCountOutputType = {
    options: number
  }

  export type QuestionsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    options?: boolean | QuestionsCountOutputTypeCountOptionsArgs
  }

  // Custom InputTypes
  /**
   * QuestionsCountOutputType without action
   */
  export type QuestionsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionsCountOutputType
     */
    select?: QuestionsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * QuestionsCountOutputType without action
   */
  export type QuestionsCountOutputTypeCountOptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OptionsWhereInput
  }


  /**
   * Count Type DiscussionsCountOutputType
   */

  export type DiscussionsCountOutputType = {
    comments: number
  }

  export type DiscussionsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    comments?: boolean | DiscussionsCountOutputTypeCountCommentsArgs
  }

  // Custom InputTypes
  /**
   * DiscussionsCountOutputType without action
   */
  export type DiscussionsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiscussionsCountOutputType
     */
    select?: DiscussionsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DiscussionsCountOutputType without action
   */
  export type DiscussionsCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentsWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    user_id: string | null
    username: string | null
    email: string | null
    password: string | null
    role: $Enums.Role | null
    createdAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    user_id: string | null
    username: string | null
    email: string | null
    password: string | null
    role: $Enums.Role | null
    createdAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    user_id: number
    username: number
    email: number
    password: number
    role: number
    createdAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    user_id?: true
    username?: true
    email?: true
    password?: true
    role?: true
    createdAt?: true
  }

  export type UserMaxAggregateInputType = {
    user_id?: true
    username?: true
    email?: true
    password?: true
    role?: true
    createdAt?: true
  }

  export type UserCountAggregateInputType = {
    user_id?: true
    username?: true
    email?: true
    password?: true
    role?: true
    createdAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    user_id: string
    username: string
    email: string
    password: string
    role: $Enums.Role
    createdAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    user_id?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    createdAt?: boolean
    enrollments?: boolean | User$enrollmentsArgs<ExtArgs>
    courseteachers?: boolean | User$courseteachersArgs<ExtArgs>
    discussions?: boolean | User$discussionsArgs<ExtArgs>
    progress?: boolean | User$progressArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    user_id?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    user_id?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    createdAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    enrollments?: boolean | User$enrollmentsArgs<ExtArgs>
    courseteachers?: boolean | User$courseteachersArgs<ExtArgs>
    discussions?: boolean | User$discussionsArgs<ExtArgs>
    progress?: boolean | User$progressArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      enrollments: Prisma.$EnrollmentsPayload<ExtArgs>[]
      courseteachers: Prisma.$CourseTeachersPayload<ExtArgs>[]
      discussions: Prisma.$DiscussionsPayload<ExtArgs>[]
      progress: Prisma.$ProgressPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      user_id: string
      username: string
      email: string
      password: string
      role: $Enums.Role
      createdAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `user_id`
     * const userWithUser_idOnly = await prisma.user.findMany({ select: { user_id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `user_id`
     * const userWithUser_idOnly = await prisma.user.createManyAndReturn({ 
     *   select: { user_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    enrollments<T extends User$enrollmentsArgs<ExtArgs> = {}>(args?: Subset<T, User$enrollmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EnrollmentsPayload<ExtArgs>, T, "findMany"> | Null>
    courseteachers<T extends User$courseteachersArgs<ExtArgs> = {}>(args?: Subset<T, User$courseteachersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CourseTeachersPayload<ExtArgs>, T, "findMany"> | Null>
    discussions<T extends User$discussionsArgs<ExtArgs> = {}>(args?: Subset<T, User$discussionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DiscussionsPayload<ExtArgs>, T, "findMany"> | Null>
    progress<T extends User$progressArgs<ExtArgs> = {}>(args?: Subset<T, User$progressArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProgressPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly user_id: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'Role'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.enrollments
   */
  export type User$enrollmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollments
     */
    select?: EnrollmentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentsInclude<ExtArgs> | null
    where?: EnrollmentsWhereInput
    orderBy?: EnrollmentsOrderByWithRelationInput | EnrollmentsOrderByWithRelationInput[]
    cursor?: EnrollmentsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EnrollmentsScalarFieldEnum | EnrollmentsScalarFieldEnum[]
  }

  /**
   * User.courseteachers
   */
  export type User$courseteachersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseTeachers
     */
    select?: CourseTeachersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseTeachersInclude<ExtArgs> | null
    where?: CourseTeachersWhereInput
    orderBy?: CourseTeachersOrderByWithRelationInput | CourseTeachersOrderByWithRelationInput[]
    cursor?: CourseTeachersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CourseTeachersScalarFieldEnum | CourseTeachersScalarFieldEnum[]
  }

  /**
   * User.discussions
   */
  export type User$discussionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discussions
     */
    select?: DiscussionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionsInclude<ExtArgs> | null
    where?: DiscussionsWhereInput
    orderBy?: DiscussionsOrderByWithRelationInput | DiscussionsOrderByWithRelationInput[]
    cursor?: DiscussionsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DiscussionsScalarFieldEnum | DiscussionsScalarFieldEnum[]
  }

  /**
   * User.progress
   */
  export type User$progressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Progress
     */
    select?: ProgressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgressInclude<ExtArgs> | null
    where?: ProgressWhereInput
    orderBy?: ProgressOrderByWithRelationInput | ProgressOrderByWithRelationInput[]
    cursor?: ProgressWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProgressScalarFieldEnum | ProgressScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Enrollments
   */

  export type AggregateEnrollments = {
    _count: EnrollmentsCountAggregateOutputType | null
    _min: EnrollmentsMinAggregateOutputType | null
    _max: EnrollmentsMaxAggregateOutputType | null
  }

  export type EnrollmentsMinAggregateOutputType = {
    enrollment_id: string | null
    user_id: string | null
    course_id: string | null
    enrolled_at: Date | null
  }

  export type EnrollmentsMaxAggregateOutputType = {
    enrollment_id: string | null
    user_id: string | null
    course_id: string | null
    enrolled_at: Date | null
  }

  export type EnrollmentsCountAggregateOutputType = {
    enrollment_id: number
    user_id: number
    course_id: number
    enrolled_at: number
    _all: number
  }


  export type EnrollmentsMinAggregateInputType = {
    enrollment_id?: true
    user_id?: true
    course_id?: true
    enrolled_at?: true
  }

  export type EnrollmentsMaxAggregateInputType = {
    enrollment_id?: true
    user_id?: true
    course_id?: true
    enrolled_at?: true
  }

  export type EnrollmentsCountAggregateInputType = {
    enrollment_id?: true
    user_id?: true
    course_id?: true
    enrolled_at?: true
    _all?: true
  }

  export type EnrollmentsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Enrollments to aggregate.
     */
    where?: EnrollmentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Enrollments to fetch.
     */
    orderBy?: EnrollmentsOrderByWithRelationInput | EnrollmentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EnrollmentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Enrollments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Enrollments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Enrollments
    **/
    _count?: true | EnrollmentsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EnrollmentsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EnrollmentsMaxAggregateInputType
  }

  export type GetEnrollmentsAggregateType<T extends EnrollmentsAggregateArgs> = {
        [P in keyof T & keyof AggregateEnrollments]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEnrollments[P]>
      : GetScalarType<T[P], AggregateEnrollments[P]>
  }




  export type EnrollmentsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EnrollmentsWhereInput
    orderBy?: EnrollmentsOrderByWithAggregationInput | EnrollmentsOrderByWithAggregationInput[]
    by: EnrollmentsScalarFieldEnum[] | EnrollmentsScalarFieldEnum
    having?: EnrollmentsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EnrollmentsCountAggregateInputType | true
    _min?: EnrollmentsMinAggregateInputType
    _max?: EnrollmentsMaxAggregateInputType
  }

  export type EnrollmentsGroupByOutputType = {
    enrollment_id: string
    user_id: string
    course_id: string
    enrolled_at: Date
    _count: EnrollmentsCountAggregateOutputType | null
    _min: EnrollmentsMinAggregateOutputType | null
    _max: EnrollmentsMaxAggregateOutputType | null
  }

  type GetEnrollmentsGroupByPayload<T extends EnrollmentsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EnrollmentsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EnrollmentsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EnrollmentsGroupByOutputType[P]>
            : GetScalarType<T[P], EnrollmentsGroupByOutputType[P]>
        }
      >
    >


  export type EnrollmentsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    enrollment_id?: boolean
    user_id?: boolean
    course_id?: boolean
    enrolled_at?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    course?: boolean | CoursesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["enrollments"]>

  export type EnrollmentsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    enrollment_id?: boolean
    user_id?: boolean
    course_id?: boolean
    enrolled_at?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    course?: boolean | CoursesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["enrollments"]>

  export type EnrollmentsSelectScalar = {
    enrollment_id?: boolean
    user_id?: boolean
    course_id?: boolean
    enrolled_at?: boolean
  }

  export type EnrollmentsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    course?: boolean | CoursesDefaultArgs<ExtArgs>
  }
  export type EnrollmentsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    course?: boolean | CoursesDefaultArgs<ExtArgs>
  }

  export type $EnrollmentsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Enrollments"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      course: Prisma.$CoursesPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      enrollment_id: string
      user_id: string
      course_id: string
      enrolled_at: Date
    }, ExtArgs["result"]["enrollments"]>
    composites: {}
  }

  type EnrollmentsGetPayload<S extends boolean | null | undefined | EnrollmentsDefaultArgs> = $Result.GetResult<Prisma.$EnrollmentsPayload, S>

  type EnrollmentsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EnrollmentsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EnrollmentsCountAggregateInputType | true
    }

  export interface EnrollmentsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Enrollments'], meta: { name: 'Enrollments' } }
    /**
     * Find zero or one Enrollments that matches the filter.
     * @param {EnrollmentsFindUniqueArgs} args - Arguments to find a Enrollments
     * @example
     * // Get one Enrollments
     * const enrollments = await prisma.enrollments.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EnrollmentsFindUniqueArgs>(args: SelectSubset<T, EnrollmentsFindUniqueArgs<ExtArgs>>): Prisma__EnrollmentsClient<$Result.GetResult<Prisma.$EnrollmentsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Enrollments that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {EnrollmentsFindUniqueOrThrowArgs} args - Arguments to find a Enrollments
     * @example
     * // Get one Enrollments
     * const enrollments = await prisma.enrollments.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EnrollmentsFindUniqueOrThrowArgs>(args: SelectSubset<T, EnrollmentsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EnrollmentsClient<$Result.GetResult<Prisma.$EnrollmentsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Enrollments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrollmentsFindFirstArgs} args - Arguments to find a Enrollments
     * @example
     * // Get one Enrollments
     * const enrollments = await prisma.enrollments.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EnrollmentsFindFirstArgs>(args?: SelectSubset<T, EnrollmentsFindFirstArgs<ExtArgs>>): Prisma__EnrollmentsClient<$Result.GetResult<Prisma.$EnrollmentsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Enrollments that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrollmentsFindFirstOrThrowArgs} args - Arguments to find a Enrollments
     * @example
     * // Get one Enrollments
     * const enrollments = await prisma.enrollments.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EnrollmentsFindFirstOrThrowArgs>(args?: SelectSubset<T, EnrollmentsFindFirstOrThrowArgs<ExtArgs>>): Prisma__EnrollmentsClient<$Result.GetResult<Prisma.$EnrollmentsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Enrollments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrollmentsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Enrollments
     * const enrollments = await prisma.enrollments.findMany()
     * 
     * // Get first 10 Enrollments
     * const enrollments = await prisma.enrollments.findMany({ take: 10 })
     * 
     * // Only select the `enrollment_id`
     * const enrollmentsWithEnrollment_idOnly = await prisma.enrollments.findMany({ select: { enrollment_id: true } })
     * 
     */
    findMany<T extends EnrollmentsFindManyArgs>(args?: SelectSubset<T, EnrollmentsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EnrollmentsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Enrollments.
     * @param {EnrollmentsCreateArgs} args - Arguments to create a Enrollments.
     * @example
     * // Create one Enrollments
     * const Enrollments = await prisma.enrollments.create({
     *   data: {
     *     // ... data to create a Enrollments
     *   }
     * })
     * 
     */
    create<T extends EnrollmentsCreateArgs>(args: SelectSubset<T, EnrollmentsCreateArgs<ExtArgs>>): Prisma__EnrollmentsClient<$Result.GetResult<Prisma.$EnrollmentsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Enrollments.
     * @param {EnrollmentsCreateManyArgs} args - Arguments to create many Enrollments.
     * @example
     * // Create many Enrollments
     * const enrollments = await prisma.enrollments.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EnrollmentsCreateManyArgs>(args?: SelectSubset<T, EnrollmentsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Enrollments and returns the data saved in the database.
     * @param {EnrollmentsCreateManyAndReturnArgs} args - Arguments to create many Enrollments.
     * @example
     * // Create many Enrollments
     * const enrollments = await prisma.enrollments.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Enrollments and only return the `enrollment_id`
     * const enrollmentsWithEnrollment_idOnly = await prisma.enrollments.createManyAndReturn({ 
     *   select: { enrollment_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EnrollmentsCreateManyAndReturnArgs>(args?: SelectSubset<T, EnrollmentsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EnrollmentsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Enrollments.
     * @param {EnrollmentsDeleteArgs} args - Arguments to delete one Enrollments.
     * @example
     * // Delete one Enrollments
     * const Enrollments = await prisma.enrollments.delete({
     *   where: {
     *     // ... filter to delete one Enrollments
     *   }
     * })
     * 
     */
    delete<T extends EnrollmentsDeleteArgs>(args: SelectSubset<T, EnrollmentsDeleteArgs<ExtArgs>>): Prisma__EnrollmentsClient<$Result.GetResult<Prisma.$EnrollmentsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Enrollments.
     * @param {EnrollmentsUpdateArgs} args - Arguments to update one Enrollments.
     * @example
     * // Update one Enrollments
     * const enrollments = await prisma.enrollments.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EnrollmentsUpdateArgs>(args: SelectSubset<T, EnrollmentsUpdateArgs<ExtArgs>>): Prisma__EnrollmentsClient<$Result.GetResult<Prisma.$EnrollmentsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Enrollments.
     * @param {EnrollmentsDeleteManyArgs} args - Arguments to filter Enrollments to delete.
     * @example
     * // Delete a few Enrollments
     * const { count } = await prisma.enrollments.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EnrollmentsDeleteManyArgs>(args?: SelectSubset<T, EnrollmentsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Enrollments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrollmentsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Enrollments
     * const enrollments = await prisma.enrollments.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EnrollmentsUpdateManyArgs>(args: SelectSubset<T, EnrollmentsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Enrollments.
     * @param {EnrollmentsUpsertArgs} args - Arguments to update or create a Enrollments.
     * @example
     * // Update or create a Enrollments
     * const enrollments = await prisma.enrollments.upsert({
     *   create: {
     *     // ... data to create a Enrollments
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Enrollments we want to update
     *   }
     * })
     */
    upsert<T extends EnrollmentsUpsertArgs>(args: SelectSubset<T, EnrollmentsUpsertArgs<ExtArgs>>): Prisma__EnrollmentsClient<$Result.GetResult<Prisma.$EnrollmentsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Enrollments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrollmentsCountArgs} args - Arguments to filter Enrollments to count.
     * @example
     * // Count the number of Enrollments
     * const count = await prisma.enrollments.count({
     *   where: {
     *     // ... the filter for the Enrollments we want to count
     *   }
     * })
    **/
    count<T extends EnrollmentsCountArgs>(
      args?: Subset<T, EnrollmentsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EnrollmentsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Enrollments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrollmentsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EnrollmentsAggregateArgs>(args: Subset<T, EnrollmentsAggregateArgs>): Prisma.PrismaPromise<GetEnrollmentsAggregateType<T>>

    /**
     * Group by Enrollments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrollmentsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EnrollmentsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EnrollmentsGroupByArgs['orderBy'] }
        : { orderBy?: EnrollmentsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EnrollmentsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEnrollmentsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Enrollments model
   */
  readonly fields: EnrollmentsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Enrollments.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EnrollmentsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    course<T extends CoursesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CoursesDefaultArgs<ExtArgs>>): Prisma__CoursesClient<$Result.GetResult<Prisma.$CoursesPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Enrollments model
   */ 
  interface EnrollmentsFieldRefs {
    readonly enrollment_id: FieldRef<"Enrollments", 'String'>
    readonly user_id: FieldRef<"Enrollments", 'String'>
    readonly course_id: FieldRef<"Enrollments", 'String'>
    readonly enrolled_at: FieldRef<"Enrollments", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Enrollments findUnique
   */
  export type EnrollmentsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollments
     */
    select?: EnrollmentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentsInclude<ExtArgs> | null
    /**
     * Filter, which Enrollments to fetch.
     */
    where: EnrollmentsWhereUniqueInput
  }

  /**
   * Enrollments findUniqueOrThrow
   */
  export type EnrollmentsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollments
     */
    select?: EnrollmentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentsInclude<ExtArgs> | null
    /**
     * Filter, which Enrollments to fetch.
     */
    where: EnrollmentsWhereUniqueInput
  }

  /**
   * Enrollments findFirst
   */
  export type EnrollmentsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollments
     */
    select?: EnrollmentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentsInclude<ExtArgs> | null
    /**
     * Filter, which Enrollments to fetch.
     */
    where?: EnrollmentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Enrollments to fetch.
     */
    orderBy?: EnrollmentsOrderByWithRelationInput | EnrollmentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Enrollments.
     */
    cursor?: EnrollmentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Enrollments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Enrollments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Enrollments.
     */
    distinct?: EnrollmentsScalarFieldEnum | EnrollmentsScalarFieldEnum[]
  }

  /**
   * Enrollments findFirstOrThrow
   */
  export type EnrollmentsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollments
     */
    select?: EnrollmentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentsInclude<ExtArgs> | null
    /**
     * Filter, which Enrollments to fetch.
     */
    where?: EnrollmentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Enrollments to fetch.
     */
    orderBy?: EnrollmentsOrderByWithRelationInput | EnrollmentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Enrollments.
     */
    cursor?: EnrollmentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Enrollments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Enrollments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Enrollments.
     */
    distinct?: EnrollmentsScalarFieldEnum | EnrollmentsScalarFieldEnum[]
  }

  /**
   * Enrollments findMany
   */
  export type EnrollmentsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollments
     */
    select?: EnrollmentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentsInclude<ExtArgs> | null
    /**
     * Filter, which Enrollments to fetch.
     */
    where?: EnrollmentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Enrollments to fetch.
     */
    orderBy?: EnrollmentsOrderByWithRelationInput | EnrollmentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Enrollments.
     */
    cursor?: EnrollmentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Enrollments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Enrollments.
     */
    skip?: number
    distinct?: EnrollmentsScalarFieldEnum | EnrollmentsScalarFieldEnum[]
  }

  /**
   * Enrollments create
   */
  export type EnrollmentsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollments
     */
    select?: EnrollmentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentsInclude<ExtArgs> | null
    /**
     * The data needed to create a Enrollments.
     */
    data: XOR<EnrollmentsCreateInput, EnrollmentsUncheckedCreateInput>
  }

  /**
   * Enrollments createMany
   */
  export type EnrollmentsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Enrollments.
     */
    data: EnrollmentsCreateManyInput | EnrollmentsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Enrollments createManyAndReturn
   */
  export type EnrollmentsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollments
     */
    select?: EnrollmentsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Enrollments.
     */
    data: EnrollmentsCreateManyInput | EnrollmentsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Enrollments update
   */
  export type EnrollmentsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollments
     */
    select?: EnrollmentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentsInclude<ExtArgs> | null
    /**
     * The data needed to update a Enrollments.
     */
    data: XOR<EnrollmentsUpdateInput, EnrollmentsUncheckedUpdateInput>
    /**
     * Choose, which Enrollments to update.
     */
    where: EnrollmentsWhereUniqueInput
  }

  /**
   * Enrollments updateMany
   */
  export type EnrollmentsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Enrollments.
     */
    data: XOR<EnrollmentsUpdateManyMutationInput, EnrollmentsUncheckedUpdateManyInput>
    /**
     * Filter which Enrollments to update
     */
    where?: EnrollmentsWhereInput
  }

  /**
   * Enrollments upsert
   */
  export type EnrollmentsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollments
     */
    select?: EnrollmentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentsInclude<ExtArgs> | null
    /**
     * The filter to search for the Enrollments to update in case it exists.
     */
    where: EnrollmentsWhereUniqueInput
    /**
     * In case the Enrollments found by the `where` argument doesn't exist, create a new Enrollments with this data.
     */
    create: XOR<EnrollmentsCreateInput, EnrollmentsUncheckedCreateInput>
    /**
     * In case the Enrollments was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EnrollmentsUpdateInput, EnrollmentsUncheckedUpdateInput>
  }

  /**
   * Enrollments delete
   */
  export type EnrollmentsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollments
     */
    select?: EnrollmentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentsInclude<ExtArgs> | null
    /**
     * Filter which Enrollments to delete.
     */
    where: EnrollmentsWhereUniqueInput
  }

  /**
   * Enrollments deleteMany
   */
  export type EnrollmentsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Enrollments to delete
     */
    where?: EnrollmentsWhereInput
  }

  /**
   * Enrollments without action
   */
  export type EnrollmentsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollments
     */
    select?: EnrollmentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentsInclude<ExtArgs> | null
  }


  /**
   * Model Courses
   */

  export type AggregateCourses = {
    _count: CoursesCountAggregateOutputType | null
    _min: CoursesMinAggregateOutputType | null
    _max: CoursesMaxAggregateOutputType | null
  }

  export type CoursesMinAggregateOutputType = {
    course_id: string | null
    title: string | null
    description: string | null
    category: $Enums.Category | null
    createdAt: Date | null
  }

  export type CoursesMaxAggregateOutputType = {
    course_id: string | null
    title: string | null
    description: string | null
    category: $Enums.Category | null
    createdAt: Date | null
  }

  export type CoursesCountAggregateOutputType = {
    course_id: number
    title: number
    description: number
    category: number
    createdAt: number
    _all: number
  }


  export type CoursesMinAggregateInputType = {
    course_id?: true
    title?: true
    description?: true
    category?: true
    createdAt?: true
  }

  export type CoursesMaxAggregateInputType = {
    course_id?: true
    title?: true
    description?: true
    category?: true
    createdAt?: true
  }

  export type CoursesCountAggregateInputType = {
    course_id?: true
    title?: true
    description?: true
    category?: true
    createdAt?: true
    _all?: true
  }

  export type CoursesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Courses to aggregate.
     */
    where?: CoursesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CoursesOrderByWithRelationInput | CoursesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CoursesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Courses
    **/
    _count?: true | CoursesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CoursesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CoursesMaxAggregateInputType
  }

  export type GetCoursesAggregateType<T extends CoursesAggregateArgs> = {
        [P in keyof T & keyof AggregateCourses]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCourses[P]>
      : GetScalarType<T[P], AggregateCourses[P]>
  }




  export type CoursesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CoursesWhereInput
    orderBy?: CoursesOrderByWithAggregationInput | CoursesOrderByWithAggregationInput[]
    by: CoursesScalarFieldEnum[] | CoursesScalarFieldEnum
    having?: CoursesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CoursesCountAggregateInputType | true
    _min?: CoursesMinAggregateInputType
    _max?: CoursesMaxAggregateInputType
  }

  export type CoursesGroupByOutputType = {
    course_id: string
    title: string
    description: string
    category: $Enums.Category
    createdAt: Date
    _count: CoursesCountAggregateOutputType | null
    _min: CoursesMinAggregateOutputType | null
    _max: CoursesMaxAggregateOutputType | null
  }

  type GetCoursesGroupByPayload<T extends CoursesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CoursesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CoursesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CoursesGroupByOutputType[P]>
            : GetScalarType<T[P], CoursesGroupByOutputType[P]>
        }
      >
    >


  export type CoursesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    course_id?: boolean
    title?: boolean
    description?: boolean
    category?: boolean
    createdAt?: boolean
    courses?: boolean | Courses$coursesArgs<ExtArgs>
    lessons?: boolean | Courses$lessonsArgs<ExtArgs>
    quizzes?: boolean | Courses$quizzesArgs<ExtArgs>
    discussions?: boolean | Courses$discussionsArgs<ExtArgs>
    enrollments?: boolean | Courses$enrollmentsArgs<ExtArgs>
    progress?: boolean | Courses$progressArgs<ExtArgs>
    _count?: boolean | CoursesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["courses"]>

  export type CoursesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    course_id?: boolean
    title?: boolean
    description?: boolean
    category?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["courses"]>

  export type CoursesSelectScalar = {
    course_id?: boolean
    title?: boolean
    description?: boolean
    category?: boolean
    createdAt?: boolean
  }

  export type CoursesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    courses?: boolean | Courses$coursesArgs<ExtArgs>
    lessons?: boolean | Courses$lessonsArgs<ExtArgs>
    quizzes?: boolean | Courses$quizzesArgs<ExtArgs>
    discussions?: boolean | Courses$discussionsArgs<ExtArgs>
    enrollments?: boolean | Courses$enrollmentsArgs<ExtArgs>
    progress?: boolean | Courses$progressArgs<ExtArgs>
    _count?: boolean | CoursesCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CoursesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CoursesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Courses"
    objects: {
      courses: Prisma.$CourseTeachersPayload<ExtArgs>[]
      lessons: Prisma.$LessonsPayload<ExtArgs>[]
      quizzes: Prisma.$QuizzesPayload<ExtArgs>[]
      discussions: Prisma.$DiscussionsPayload<ExtArgs>[]
      enrollments: Prisma.$EnrollmentsPayload<ExtArgs>[]
      progress: Prisma.$ProgressPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      course_id: string
      title: string
      description: string
      category: $Enums.Category
      createdAt: Date
    }, ExtArgs["result"]["courses"]>
    composites: {}
  }

  type CoursesGetPayload<S extends boolean | null | undefined | CoursesDefaultArgs> = $Result.GetResult<Prisma.$CoursesPayload, S>

  type CoursesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CoursesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CoursesCountAggregateInputType | true
    }

  export interface CoursesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Courses'], meta: { name: 'Courses' } }
    /**
     * Find zero or one Courses that matches the filter.
     * @param {CoursesFindUniqueArgs} args - Arguments to find a Courses
     * @example
     * // Get one Courses
     * const courses = await prisma.courses.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CoursesFindUniqueArgs>(args: SelectSubset<T, CoursesFindUniqueArgs<ExtArgs>>): Prisma__CoursesClient<$Result.GetResult<Prisma.$CoursesPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Courses that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CoursesFindUniqueOrThrowArgs} args - Arguments to find a Courses
     * @example
     * // Get one Courses
     * const courses = await prisma.courses.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CoursesFindUniqueOrThrowArgs>(args: SelectSubset<T, CoursesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CoursesClient<$Result.GetResult<Prisma.$CoursesPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Courses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoursesFindFirstArgs} args - Arguments to find a Courses
     * @example
     * // Get one Courses
     * const courses = await prisma.courses.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CoursesFindFirstArgs>(args?: SelectSubset<T, CoursesFindFirstArgs<ExtArgs>>): Prisma__CoursesClient<$Result.GetResult<Prisma.$CoursesPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Courses that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoursesFindFirstOrThrowArgs} args - Arguments to find a Courses
     * @example
     * // Get one Courses
     * const courses = await prisma.courses.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CoursesFindFirstOrThrowArgs>(args?: SelectSubset<T, CoursesFindFirstOrThrowArgs<ExtArgs>>): Prisma__CoursesClient<$Result.GetResult<Prisma.$CoursesPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Courses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoursesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Courses
     * const courses = await prisma.courses.findMany()
     * 
     * // Get first 10 Courses
     * const courses = await prisma.courses.findMany({ take: 10 })
     * 
     * // Only select the `course_id`
     * const coursesWithCourse_idOnly = await prisma.courses.findMany({ select: { course_id: true } })
     * 
     */
    findMany<T extends CoursesFindManyArgs>(args?: SelectSubset<T, CoursesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursesPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Courses.
     * @param {CoursesCreateArgs} args - Arguments to create a Courses.
     * @example
     * // Create one Courses
     * const Courses = await prisma.courses.create({
     *   data: {
     *     // ... data to create a Courses
     *   }
     * })
     * 
     */
    create<T extends CoursesCreateArgs>(args: SelectSubset<T, CoursesCreateArgs<ExtArgs>>): Prisma__CoursesClient<$Result.GetResult<Prisma.$CoursesPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Courses.
     * @param {CoursesCreateManyArgs} args - Arguments to create many Courses.
     * @example
     * // Create many Courses
     * const courses = await prisma.courses.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CoursesCreateManyArgs>(args?: SelectSubset<T, CoursesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Courses and returns the data saved in the database.
     * @param {CoursesCreateManyAndReturnArgs} args - Arguments to create many Courses.
     * @example
     * // Create many Courses
     * const courses = await prisma.courses.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Courses and only return the `course_id`
     * const coursesWithCourse_idOnly = await prisma.courses.createManyAndReturn({ 
     *   select: { course_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CoursesCreateManyAndReturnArgs>(args?: SelectSubset<T, CoursesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursesPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Courses.
     * @param {CoursesDeleteArgs} args - Arguments to delete one Courses.
     * @example
     * // Delete one Courses
     * const Courses = await prisma.courses.delete({
     *   where: {
     *     // ... filter to delete one Courses
     *   }
     * })
     * 
     */
    delete<T extends CoursesDeleteArgs>(args: SelectSubset<T, CoursesDeleteArgs<ExtArgs>>): Prisma__CoursesClient<$Result.GetResult<Prisma.$CoursesPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Courses.
     * @param {CoursesUpdateArgs} args - Arguments to update one Courses.
     * @example
     * // Update one Courses
     * const courses = await prisma.courses.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CoursesUpdateArgs>(args: SelectSubset<T, CoursesUpdateArgs<ExtArgs>>): Prisma__CoursesClient<$Result.GetResult<Prisma.$CoursesPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Courses.
     * @param {CoursesDeleteManyArgs} args - Arguments to filter Courses to delete.
     * @example
     * // Delete a few Courses
     * const { count } = await prisma.courses.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CoursesDeleteManyArgs>(args?: SelectSubset<T, CoursesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoursesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Courses
     * const courses = await prisma.courses.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CoursesUpdateManyArgs>(args: SelectSubset<T, CoursesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Courses.
     * @param {CoursesUpsertArgs} args - Arguments to update or create a Courses.
     * @example
     * // Update or create a Courses
     * const courses = await prisma.courses.upsert({
     *   create: {
     *     // ... data to create a Courses
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Courses we want to update
     *   }
     * })
     */
    upsert<T extends CoursesUpsertArgs>(args: SelectSubset<T, CoursesUpsertArgs<ExtArgs>>): Prisma__CoursesClient<$Result.GetResult<Prisma.$CoursesPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoursesCountArgs} args - Arguments to filter Courses to count.
     * @example
     * // Count the number of Courses
     * const count = await prisma.courses.count({
     *   where: {
     *     // ... the filter for the Courses we want to count
     *   }
     * })
    **/
    count<T extends CoursesCountArgs>(
      args?: Subset<T, CoursesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CoursesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoursesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CoursesAggregateArgs>(args: Subset<T, CoursesAggregateArgs>): Prisma.PrismaPromise<GetCoursesAggregateType<T>>

    /**
     * Group by Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoursesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CoursesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CoursesGroupByArgs['orderBy'] }
        : { orderBy?: CoursesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CoursesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCoursesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Courses model
   */
  readonly fields: CoursesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Courses.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CoursesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    courses<T extends Courses$coursesArgs<ExtArgs> = {}>(args?: Subset<T, Courses$coursesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CourseTeachersPayload<ExtArgs>, T, "findMany"> | Null>
    lessons<T extends Courses$lessonsArgs<ExtArgs> = {}>(args?: Subset<T, Courses$lessonsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LessonsPayload<ExtArgs>, T, "findMany"> | Null>
    quizzes<T extends Courses$quizzesArgs<ExtArgs> = {}>(args?: Subset<T, Courses$quizzesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuizzesPayload<ExtArgs>, T, "findMany"> | Null>
    discussions<T extends Courses$discussionsArgs<ExtArgs> = {}>(args?: Subset<T, Courses$discussionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DiscussionsPayload<ExtArgs>, T, "findMany"> | Null>
    enrollments<T extends Courses$enrollmentsArgs<ExtArgs> = {}>(args?: Subset<T, Courses$enrollmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EnrollmentsPayload<ExtArgs>, T, "findMany"> | Null>
    progress<T extends Courses$progressArgs<ExtArgs> = {}>(args?: Subset<T, Courses$progressArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProgressPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Courses model
   */ 
  interface CoursesFieldRefs {
    readonly course_id: FieldRef<"Courses", 'String'>
    readonly title: FieldRef<"Courses", 'String'>
    readonly description: FieldRef<"Courses", 'String'>
    readonly category: FieldRef<"Courses", 'Category'>
    readonly createdAt: FieldRef<"Courses", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Courses findUnique
   */
  export type CoursesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Courses
     */
    select?: CoursesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursesInclude<ExtArgs> | null
    /**
     * Filter, which Courses to fetch.
     */
    where: CoursesWhereUniqueInput
  }

  /**
   * Courses findUniqueOrThrow
   */
  export type CoursesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Courses
     */
    select?: CoursesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursesInclude<ExtArgs> | null
    /**
     * Filter, which Courses to fetch.
     */
    where: CoursesWhereUniqueInput
  }

  /**
   * Courses findFirst
   */
  export type CoursesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Courses
     */
    select?: CoursesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursesInclude<ExtArgs> | null
    /**
     * Filter, which Courses to fetch.
     */
    where?: CoursesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CoursesOrderByWithRelationInput | CoursesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Courses.
     */
    cursor?: CoursesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Courses.
     */
    distinct?: CoursesScalarFieldEnum | CoursesScalarFieldEnum[]
  }

  /**
   * Courses findFirstOrThrow
   */
  export type CoursesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Courses
     */
    select?: CoursesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursesInclude<ExtArgs> | null
    /**
     * Filter, which Courses to fetch.
     */
    where?: CoursesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CoursesOrderByWithRelationInput | CoursesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Courses.
     */
    cursor?: CoursesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Courses.
     */
    distinct?: CoursesScalarFieldEnum | CoursesScalarFieldEnum[]
  }

  /**
   * Courses findMany
   */
  export type CoursesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Courses
     */
    select?: CoursesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursesInclude<ExtArgs> | null
    /**
     * Filter, which Courses to fetch.
     */
    where?: CoursesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CoursesOrderByWithRelationInput | CoursesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Courses.
     */
    cursor?: CoursesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    distinct?: CoursesScalarFieldEnum | CoursesScalarFieldEnum[]
  }

  /**
   * Courses create
   */
  export type CoursesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Courses
     */
    select?: CoursesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursesInclude<ExtArgs> | null
    /**
     * The data needed to create a Courses.
     */
    data: XOR<CoursesCreateInput, CoursesUncheckedCreateInput>
  }

  /**
   * Courses createMany
   */
  export type CoursesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Courses.
     */
    data: CoursesCreateManyInput | CoursesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Courses createManyAndReturn
   */
  export type CoursesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Courses
     */
    select?: CoursesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Courses.
     */
    data: CoursesCreateManyInput | CoursesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Courses update
   */
  export type CoursesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Courses
     */
    select?: CoursesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursesInclude<ExtArgs> | null
    /**
     * The data needed to update a Courses.
     */
    data: XOR<CoursesUpdateInput, CoursesUncheckedUpdateInput>
    /**
     * Choose, which Courses to update.
     */
    where: CoursesWhereUniqueInput
  }

  /**
   * Courses updateMany
   */
  export type CoursesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Courses.
     */
    data: XOR<CoursesUpdateManyMutationInput, CoursesUncheckedUpdateManyInput>
    /**
     * Filter which Courses to update
     */
    where?: CoursesWhereInput
  }

  /**
   * Courses upsert
   */
  export type CoursesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Courses
     */
    select?: CoursesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursesInclude<ExtArgs> | null
    /**
     * The filter to search for the Courses to update in case it exists.
     */
    where: CoursesWhereUniqueInput
    /**
     * In case the Courses found by the `where` argument doesn't exist, create a new Courses with this data.
     */
    create: XOR<CoursesCreateInput, CoursesUncheckedCreateInput>
    /**
     * In case the Courses was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CoursesUpdateInput, CoursesUncheckedUpdateInput>
  }

  /**
   * Courses delete
   */
  export type CoursesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Courses
     */
    select?: CoursesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursesInclude<ExtArgs> | null
    /**
     * Filter which Courses to delete.
     */
    where: CoursesWhereUniqueInput
  }

  /**
   * Courses deleteMany
   */
  export type CoursesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Courses to delete
     */
    where?: CoursesWhereInput
  }

  /**
   * Courses.courses
   */
  export type Courses$coursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseTeachers
     */
    select?: CourseTeachersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseTeachersInclude<ExtArgs> | null
    where?: CourseTeachersWhereInput
    orderBy?: CourseTeachersOrderByWithRelationInput | CourseTeachersOrderByWithRelationInput[]
    cursor?: CourseTeachersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CourseTeachersScalarFieldEnum | CourseTeachersScalarFieldEnum[]
  }

  /**
   * Courses.lessons
   */
  export type Courses$lessonsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lessons
     */
    select?: LessonsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonsInclude<ExtArgs> | null
    where?: LessonsWhereInput
    orderBy?: LessonsOrderByWithRelationInput | LessonsOrderByWithRelationInput[]
    cursor?: LessonsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LessonsScalarFieldEnum | LessonsScalarFieldEnum[]
  }

  /**
   * Courses.quizzes
   */
  export type Courses$quizzesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quizzes
     */
    select?: QuizzesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuizzesInclude<ExtArgs> | null
    where?: QuizzesWhereInput
    orderBy?: QuizzesOrderByWithRelationInput | QuizzesOrderByWithRelationInput[]
    cursor?: QuizzesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuizzesScalarFieldEnum | QuizzesScalarFieldEnum[]
  }

  /**
   * Courses.discussions
   */
  export type Courses$discussionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discussions
     */
    select?: DiscussionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionsInclude<ExtArgs> | null
    where?: DiscussionsWhereInput
    orderBy?: DiscussionsOrderByWithRelationInput | DiscussionsOrderByWithRelationInput[]
    cursor?: DiscussionsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DiscussionsScalarFieldEnum | DiscussionsScalarFieldEnum[]
  }

  /**
   * Courses.enrollments
   */
  export type Courses$enrollmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollments
     */
    select?: EnrollmentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentsInclude<ExtArgs> | null
    where?: EnrollmentsWhereInput
    orderBy?: EnrollmentsOrderByWithRelationInput | EnrollmentsOrderByWithRelationInput[]
    cursor?: EnrollmentsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EnrollmentsScalarFieldEnum | EnrollmentsScalarFieldEnum[]
  }

  /**
   * Courses.progress
   */
  export type Courses$progressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Progress
     */
    select?: ProgressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgressInclude<ExtArgs> | null
    where?: ProgressWhereInput
    orderBy?: ProgressOrderByWithRelationInput | ProgressOrderByWithRelationInput[]
    cursor?: ProgressWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProgressScalarFieldEnum | ProgressScalarFieldEnum[]
  }

  /**
   * Courses without action
   */
  export type CoursesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Courses
     */
    select?: CoursesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursesInclude<ExtArgs> | null
  }


  /**
   * Model CourseTeachers
   */

  export type AggregateCourseTeachers = {
    _count: CourseTeachersCountAggregateOutputType | null
    _min: CourseTeachersMinAggregateOutputType | null
    _max: CourseTeachersMaxAggregateOutputType | null
  }

  export type CourseTeachersMinAggregateOutputType = {
    id: string | null
    user_id: string | null
    course_id: string | null
    teacher_role: $Enums.TeacherRole | null
    assigned_at: Date | null
  }

  export type CourseTeachersMaxAggregateOutputType = {
    id: string | null
    user_id: string | null
    course_id: string | null
    teacher_role: $Enums.TeacherRole | null
    assigned_at: Date | null
  }

  export type CourseTeachersCountAggregateOutputType = {
    id: number
    user_id: number
    course_id: number
    teacher_role: number
    assigned_at: number
    _all: number
  }


  export type CourseTeachersMinAggregateInputType = {
    id?: true
    user_id?: true
    course_id?: true
    teacher_role?: true
    assigned_at?: true
  }

  export type CourseTeachersMaxAggregateInputType = {
    id?: true
    user_id?: true
    course_id?: true
    teacher_role?: true
    assigned_at?: true
  }

  export type CourseTeachersCountAggregateInputType = {
    id?: true
    user_id?: true
    course_id?: true
    teacher_role?: true
    assigned_at?: true
    _all?: true
  }

  export type CourseTeachersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CourseTeachers to aggregate.
     */
    where?: CourseTeachersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CourseTeachers to fetch.
     */
    orderBy?: CourseTeachersOrderByWithRelationInput | CourseTeachersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CourseTeachersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CourseTeachers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CourseTeachers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CourseTeachers
    **/
    _count?: true | CourseTeachersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CourseTeachersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CourseTeachersMaxAggregateInputType
  }

  export type GetCourseTeachersAggregateType<T extends CourseTeachersAggregateArgs> = {
        [P in keyof T & keyof AggregateCourseTeachers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCourseTeachers[P]>
      : GetScalarType<T[P], AggregateCourseTeachers[P]>
  }




  export type CourseTeachersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseTeachersWhereInput
    orderBy?: CourseTeachersOrderByWithAggregationInput | CourseTeachersOrderByWithAggregationInput[]
    by: CourseTeachersScalarFieldEnum[] | CourseTeachersScalarFieldEnum
    having?: CourseTeachersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CourseTeachersCountAggregateInputType | true
    _min?: CourseTeachersMinAggregateInputType
    _max?: CourseTeachersMaxAggregateInputType
  }

  export type CourseTeachersGroupByOutputType = {
    id: string
    user_id: string
    course_id: string
    teacher_role: $Enums.TeacherRole
    assigned_at: Date
    _count: CourseTeachersCountAggregateOutputType | null
    _min: CourseTeachersMinAggregateOutputType | null
    _max: CourseTeachersMaxAggregateOutputType | null
  }

  type GetCourseTeachersGroupByPayload<T extends CourseTeachersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CourseTeachersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CourseTeachersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CourseTeachersGroupByOutputType[P]>
            : GetScalarType<T[P], CourseTeachersGroupByOutputType[P]>
        }
      >
    >


  export type CourseTeachersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    course_id?: boolean
    teacher_role?: boolean
    assigned_at?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    courses?: boolean | CoursesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["courseTeachers"]>

  export type CourseTeachersSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    course_id?: boolean
    teacher_role?: boolean
    assigned_at?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    courses?: boolean | CoursesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["courseTeachers"]>

  export type CourseTeachersSelectScalar = {
    id?: boolean
    user_id?: boolean
    course_id?: boolean
    teacher_role?: boolean
    assigned_at?: boolean
  }

  export type CourseTeachersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    courses?: boolean | CoursesDefaultArgs<ExtArgs>
  }
  export type CourseTeachersIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    courses?: boolean | CoursesDefaultArgs<ExtArgs>
  }

  export type $CourseTeachersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CourseTeachers"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      courses: Prisma.$CoursesPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      user_id: string
      course_id: string
      teacher_role: $Enums.TeacherRole
      assigned_at: Date
    }, ExtArgs["result"]["courseTeachers"]>
    composites: {}
  }

  type CourseTeachersGetPayload<S extends boolean | null | undefined | CourseTeachersDefaultArgs> = $Result.GetResult<Prisma.$CourseTeachersPayload, S>

  type CourseTeachersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CourseTeachersFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CourseTeachersCountAggregateInputType | true
    }

  export interface CourseTeachersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CourseTeachers'], meta: { name: 'CourseTeachers' } }
    /**
     * Find zero or one CourseTeachers that matches the filter.
     * @param {CourseTeachersFindUniqueArgs} args - Arguments to find a CourseTeachers
     * @example
     * // Get one CourseTeachers
     * const courseTeachers = await prisma.courseTeachers.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CourseTeachersFindUniqueArgs>(args: SelectSubset<T, CourseTeachersFindUniqueArgs<ExtArgs>>): Prisma__CourseTeachersClient<$Result.GetResult<Prisma.$CourseTeachersPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CourseTeachers that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CourseTeachersFindUniqueOrThrowArgs} args - Arguments to find a CourseTeachers
     * @example
     * // Get one CourseTeachers
     * const courseTeachers = await prisma.courseTeachers.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CourseTeachersFindUniqueOrThrowArgs>(args: SelectSubset<T, CourseTeachersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CourseTeachersClient<$Result.GetResult<Prisma.$CourseTeachersPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CourseTeachers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseTeachersFindFirstArgs} args - Arguments to find a CourseTeachers
     * @example
     * // Get one CourseTeachers
     * const courseTeachers = await prisma.courseTeachers.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CourseTeachersFindFirstArgs>(args?: SelectSubset<T, CourseTeachersFindFirstArgs<ExtArgs>>): Prisma__CourseTeachersClient<$Result.GetResult<Prisma.$CourseTeachersPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CourseTeachers that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseTeachersFindFirstOrThrowArgs} args - Arguments to find a CourseTeachers
     * @example
     * // Get one CourseTeachers
     * const courseTeachers = await prisma.courseTeachers.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CourseTeachersFindFirstOrThrowArgs>(args?: SelectSubset<T, CourseTeachersFindFirstOrThrowArgs<ExtArgs>>): Prisma__CourseTeachersClient<$Result.GetResult<Prisma.$CourseTeachersPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CourseTeachers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseTeachersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CourseTeachers
     * const courseTeachers = await prisma.courseTeachers.findMany()
     * 
     * // Get first 10 CourseTeachers
     * const courseTeachers = await prisma.courseTeachers.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const courseTeachersWithIdOnly = await prisma.courseTeachers.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CourseTeachersFindManyArgs>(args?: SelectSubset<T, CourseTeachersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CourseTeachersPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CourseTeachers.
     * @param {CourseTeachersCreateArgs} args - Arguments to create a CourseTeachers.
     * @example
     * // Create one CourseTeachers
     * const CourseTeachers = await prisma.courseTeachers.create({
     *   data: {
     *     // ... data to create a CourseTeachers
     *   }
     * })
     * 
     */
    create<T extends CourseTeachersCreateArgs>(args: SelectSubset<T, CourseTeachersCreateArgs<ExtArgs>>): Prisma__CourseTeachersClient<$Result.GetResult<Prisma.$CourseTeachersPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CourseTeachers.
     * @param {CourseTeachersCreateManyArgs} args - Arguments to create many CourseTeachers.
     * @example
     * // Create many CourseTeachers
     * const courseTeachers = await prisma.courseTeachers.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CourseTeachersCreateManyArgs>(args?: SelectSubset<T, CourseTeachersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CourseTeachers and returns the data saved in the database.
     * @param {CourseTeachersCreateManyAndReturnArgs} args - Arguments to create many CourseTeachers.
     * @example
     * // Create many CourseTeachers
     * const courseTeachers = await prisma.courseTeachers.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CourseTeachers and only return the `id`
     * const courseTeachersWithIdOnly = await prisma.courseTeachers.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CourseTeachersCreateManyAndReturnArgs>(args?: SelectSubset<T, CourseTeachersCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CourseTeachersPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a CourseTeachers.
     * @param {CourseTeachersDeleteArgs} args - Arguments to delete one CourseTeachers.
     * @example
     * // Delete one CourseTeachers
     * const CourseTeachers = await prisma.courseTeachers.delete({
     *   where: {
     *     // ... filter to delete one CourseTeachers
     *   }
     * })
     * 
     */
    delete<T extends CourseTeachersDeleteArgs>(args: SelectSubset<T, CourseTeachersDeleteArgs<ExtArgs>>): Prisma__CourseTeachersClient<$Result.GetResult<Prisma.$CourseTeachersPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CourseTeachers.
     * @param {CourseTeachersUpdateArgs} args - Arguments to update one CourseTeachers.
     * @example
     * // Update one CourseTeachers
     * const courseTeachers = await prisma.courseTeachers.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CourseTeachersUpdateArgs>(args: SelectSubset<T, CourseTeachersUpdateArgs<ExtArgs>>): Prisma__CourseTeachersClient<$Result.GetResult<Prisma.$CourseTeachersPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CourseTeachers.
     * @param {CourseTeachersDeleteManyArgs} args - Arguments to filter CourseTeachers to delete.
     * @example
     * // Delete a few CourseTeachers
     * const { count } = await prisma.courseTeachers.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CourseTeachersDeleteManyArgs>(args?: SelectSubset<T, CourseTeachersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CourseTeachers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseTeachersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CourseTeachers
     * const courseTeachers = await prisma.courseTeachers.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CourseTeachersUpdateManyArgs>(args: SelectSubset<T, CourseTeachersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CourseTeachers.
     * @param {CourseTeachersUpsertArgs} args - Arguments to update or create a CourseTeachers.
     * @example
     * // Update or create a CourseTeachers
     * const courseTeachers = await prisma.courseTeachers.upsert({
     *   create: {
     *     // ... data to create a CourseTeachers
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CourseTeachers we want to update
     *   }
     * })
     */
    upsert<T extends CourseTeachersUpsertArgs>(args: SelectSubset<T, CourseTeachersUpsertArgs<ExtArgs>>): Prisma__CourseTeachersClient<$Result.GetResult<Prisma.$CourseTeachersPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CourseTeachers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseTeachersCountArgs} args - Arguments to filter CourseTeachers to count.
     * @example
     * // Count the number of CourseTeachers
     * const count = await prisma.courseTeachers.count({
     *   where: {
     *     // ... the filter for the CourseTeachers we want to count
     *   }
     * })
    **/
    count<T extends CourseTeachersCountArgs>(
      args?: Subset<T, CourseTeachersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CourseTeachersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CourseTeachers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseTeachersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CourseTeachersAggregateArgs>(args: Subset<T, CourseTeachersAggregateArgs>): Prisma.PrismaPromise<GetCourseTeachersAggregateType<T>>

    /**
     * Group by CourseTeachers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseTeachersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CourseTeachersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CourseTeachersGroupByArgs['orderBy'] }
        : { orderBy?: CourseTeachersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CourseTeachersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCourseTeachersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CourseTeachers model
   */
  readonly fields: CourseTeachersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CourseTeachers.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CourseTeachersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    courses<T extends CoursesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CoursesDefaultArgs<ExtArgs>>): Prisma__CoursesClient<$Result.GetResult<Prisma.$CoursesPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CourseTeachers model
   */ 
  interface CourseTeachersFieldRefs {
    readonly id: FieldRef<"CourseTeachers", 'String'>
    readonly user_id: FieldRef<"CourseTeachers", 'String'>
    readonly course_id: FieldRef<"CourseTeachers", 'String'>
    readonly teacher_role: FieldRef<"CourseTeachers", 'TeacherRole'>
    readonly assigned_at: FieldRef<"CourseTeachers", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CourseTeachers findUnique
   */
  export type CourseTeachersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseTeachers
     */
    select?: CourseTeachersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseTeachersInclude<ExtArgs> | null
    /**
     * Filter, which CourseTeachers to fetch.
     */
    where: CourseTeachersWhereUniqueInput
  }

  /**
   * CourseTeachers findUniqueOrThrow
   */
  export type CourseTeachersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseTeachers
     */
    select?: CourseTeachersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseTeachersInclude<ExtArgs> | null
    /**
     * Filter, which CourseTeachers to fetch.
     */
    where: CourseTeachersWhereUniqueInput
  }

  /**
   * CourseTeachers findFirst
   */
  export type CourseTeachersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseTeachers
     */
    select?: CourseTeachersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseTeachersInclude<ExtArgs> | null
    /**
     * Filter, which CourseTeachers to fetch.
     */
    where?: CourseTeachersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CourseTeachers to fetch.
     */
    orderBy?: CourseTeachersOrderByWithRelationInput | CourseTeachersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CourseTeachers.
     */
    cursor?: CourseTeachersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CourseTeachers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CourseTeachers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CourseTeachers.
     */
    distinct?: CourseTeachersScalarFieldEnum | CourseTeachersScalarFieldEnum[]
  }

  /**
   * CourseTeachers findFirstOrThrow
   */
  export type CourseTeachersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseTeachers
     */
    select?: CourseTeachersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseTeachersInclude<ExtArgs> | null
    /**
     * Filter, which CourseTeachers to fetch.
     */
    where?: CourseTeachersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CourseTeachers to fetch.
     */
    orderBy?: CourseTeachersOrderByWithRelationInput | CourseTeachersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CourseTeachers.
     */
    cursor?: CourseTeachersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CourseTeachers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CourseTeachers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CourseTeachers.
     */
    distinct?: CourseTeachersScalarFieldEnum | CourseTeachersScalarFieldEnum[]
  }

  /**
   * CourseTeachers findMany
   */
  export type CourseTeachersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseTeachers
     */
    select?: CourseTeachersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseTeachersInclude<ExtArgs> | null
    /**
     * Filter, which CourseTeachers to fetch.
     */
    where?: CourseTeachersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CourseTeachers to fetch.
     */
    orderBy?: CourseTeachersOrderByWithRelationInput | CourseTeachersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CourseTeachers.
     */
    cursor?: CourseTeachersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CourseTeachers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CourseTeachers.
     */
    skip?: number
    distinct?: CourseTeachersScalarFieldEnum | CourseTeachersScalarFieldEnum[]
  }

  /**
   * CourseTeachers create
   */
  export type CourseTeachersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseTeachers
     */
    select?: CourseTeachersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseTeachersInclude<ExtArgs> | null
    /**
     * The data needed to create a CourseTeachers.
     */
    data: XOR<CourseTeachersCreateInput, CourseTeachersUncheckedCreateInput>
  }

  /**
   * CourseTeachers createMany
   */
  export type CourseTeachersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CourseTeachers.
     */
    data: CourseTeachersCreateManyInput | CourseTeachersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CourseTeachers createManyAndReturn
   */
  export type CourseTeachersCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseTeachers
     */
    select?: CourseTeachersSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many CourseTeachers.
     */
    data: CourseTeachersCreateManyInput | CourseTeachersCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseTeachersIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CourseTeachers update
   */
  export type CourseTeachersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseTeachers
     */
    select?: CourseTeachersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseTeachersInclude<ExtArgs> | null
    /**
     * The data needed to update a CourseTeachers.
     */
    data: XOR<CourseTeachersUpdateInput, CourseTeachersUncheckedUpdateInput>
    /**
     * Choose, which CourseTeachers to update.
     */
    where: CourseTeachersWhereUniqueInput
  }

  /**
   * CourseTeachers updateMany
   */
  export type CourseTeachersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CourseTeachers.
     */
    data: XOR<CourseTeachersUpdateManyMutationInput, CourseTeachersUncheckedUpdateManyInput>
    /**
     * Filter which CourseTeachers to update
     */
    where?: CourseTeachersWhereInput
  }

  /**
   * CourseTeachers upsert
   */
  export type CourseTeachersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseTeachers
     */
    select?: CourseTeachersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseTeachersInclude<ExtArgs> | null
    /**
     * The filter to search for the CourseTeachers to update in case it exists.
     */
    where: CourseTeachersWhereUniqueInput
    /**
     * In case the CourseTeachers found by the `where` argument doesn't exist, create a new CourseTeachers with this data.
     */
    create: XOR<CourseTeachersCreateInput, CourseTeachersUncheckedCreateInput>
    /**
     * In case the CourseTeachers was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CourseTeachersUpdateInput, CourseTeachersUncheckedUpdateInput>
  }

  /**
   * CourseTeachers delete
   */
  export type CourseTeachersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseTeachers
     */
    select?: CourseTeachersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseTeachersInclude<ExtArgs> | null
    /**
     * Filter which CourseTeachers to delete.
     */
    where: CourseTeachersWhereUniqueInput
  }

  /**
   * CourseTeachers deleteMany
   */
  export type CourseTeachersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CourseTeachers to delete
     */
    where?: CourseTeachersWhereInput
  }

  /**
   * CourseTeachers without action
   */
  export type CourseTeachersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseTeachers
     */
    select?: CourseTeachersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseTeachersInclude<ExtArgs> | null
  }


  /**
   * Model Lessons
   */

  export type AggregateLessons = {
    _count: LessonsCountAggregateOutputType | null
    _avg: LessonsAvgAggregateOutputType | null
    _sum: LessonsSumAggregateOutputType | null
    _min: LessonsMinAggregateOutputType | null
    _max: LessonsMaxAggregateOutputType | null
  }

  export type LessonsAvgAggregateOutputType = {
    position: number | null
  }

  export type LessonsSumAggregateOutputType = {
    position: number | null
  }

  export type LessonsMinAggregateOutputType = {
    lesson_id: string | null
    course_id: string | null
    title: string | null
    content: string | null
    position: number | null
  }

  export type LessonsMaxAggregateOutputType = {
    lesson_id: string | null
    course_id: string | null
    title: string | null
    content: string | null
    position: number | null
  }

  export type LessonsCountAggregateOutputType = {
    lesson_id: number
    course_id: number
    title: number
    content: number
    position: number
    _all: number
  }


  export type LessonsAvgAggregateInputType = {
    position?: true
  }

  export type LessonsSumAggregateInputType = {
    position?: true
  }

  export type LessonsMinAggregateInputType = {
    lesson_id?: true
    course_id?: true
    title?: true
    content?: true
    position?: true
  }

  export type LessonsMaxAggregateInputType = {
    lesson_id?: true
    course_id?: true
    title?: true
    content?: true
    position?: true
  }

  export type LessonsCountAggregateInputType = {
    lesson_id?: true
    course_id?: true
    title?: true
    content?: true
    position?: true
    _all?: true
  }

  export type LessonsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Lessons to aggregate.
     */
    where?: LessonsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lessons to fetch.
     */
    orderBy?: LessonsOrderByWithRelationInput | LessonsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LessonsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lessons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lessons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Lessons
    **/
    _count?: true | LessonsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LessonsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LessonsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LessonsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LessonsMaxAggregateInputType
  }

  export type GetLessonsAggregateType<T extends LessonsAggregateArgs> = {
        [P in keyof T & keyof AggregateLessons]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLessons[P]>
      : GetScalarType<T[P], AggregateLessons[P]>
  }




  export type LessonsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LessonsWhereInput
    orderBy?: LessonsOrderByWithAggregationInput | LessonsOrderByWithAggregationInput[]
    by: LessonsScalarFieldEnum[] | LessonsScalarFieldEnum
    having?: LessonsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LessonsCountAggregateInputType | true
    _avg?: LessonsAvgAggregateInputType
    _sum?: LessonsSumAggregateInputType
    _min?: LessonsMinAggregateInputType
    _max?: LessonsMaxAggregateInputType
  }

  export type LessonsGroupByOutputType = {
    lesson_id: string
    course_id: string
    title: string
    content: string
    position: number
    _count: LessonsCountAggregateOutputType | null
    _avg: LessonsAvgAggregateOutputType | null
    _sum: LessonsSumAggregateOutputType | null
    _min: LessonsMinAggregateOutputType | null
    _max: LessonsMaxAggregateOutputType | null
  }

  type GetLessonsGroupByPayload<T extends LessonsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LessonsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LessonsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LessonsGroupByOutputType[P]>
            : GetScalarType<T[P], LessonsGroupByOutputType[P]>
        }
      >
    >


  export type LessonsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    lesson_id?: boolean
    course_id?: boolean
    title?: boolean
    content?: boolean
    position?: boolean
    course?: boolean | CoursesDefaultArgs<ExtArgs>
    progress?: boolean | Lessons$progressArgs<ExtArgs>
    _count?: boolean | LessonsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lessons"]>

  export type LessonsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    lesson_id?: boolean
    course_id?: boolean
    title?: boolean
    content?: boolean
    position?: boolean
    course?: boolean | CoursesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lessons"]>

  export type LessonsSelectScalar = {
    lesson_id?: boolean
    course_id?: boolean
    title?: boolean
    content?: boolean
    position?: boolean
  }

  export type LessonsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CoursesDefaultArgs<ExtArgs>
    progress?: boolean | Lessons$progressArgs<ExtArgs>
    _count?: boolean | LessonsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type LessonsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CoursesDefaultArgs<ExtArgs>
  }

  export type $LessonsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Lessons"
    objects: {
      course: Prisma.$CoursesPayload<ExtArgs>
      progress: Prisma.$ProgressPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      lesson_id: string
      course_id: string
      title: string
      content: string
      position: number
    }, ExtArgs["result"]["lessons"]>
    composites: {}
  }

  type LessonsGetPayload<S extends boolean | null | undefined | LessonsDefaultArgs> = $Result.GetResult<Prisma.$LessonsPayload, S>

  type LessonsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LessonsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LessonsCountAggregateInputType | true
    }

  export interface LessonsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Lessons'], meta: { name: 'Lessons' } }
    /**
     * Find zero or one Lessons that matches the filter.
     * @param {LessonsFindUniqueArgs} args - Arguments to find a Lessons
     * @example
     * // Get one Lessons
     * const lessons = await prisma.lessons.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LessonsFindUniqueArgs>(args: SelectSubset<T, LessonsFindUniqueArgs<ExtArgs>>): Prisma__LessonsClient<$Result.GetResult<Prisma.$LessonsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Lessons that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {LessonsFindUniqueOrThrowArgs} args - Arguments to find a Lessons
     * @example
     * // Get one Lessons
     * const lessons = await prisma.lessons.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LessonsFindUniqueOrThrowArgs>(args: SelectSubset<T, LessonsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LessonsClient<$Result.GetResult<Prisma.$LessonsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Lessons that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LessonsFindFirstArgs} args - Arguments to find a Lessons
     * @example
     * // Get one Lessons
     * const lessons = await prisma.lessons.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LessonsFindFirstArgs>(args?: SelectSubset<T, LessonsFindFirstArgs<ExtArgs>>): Prisma__LessonsClient<$Result.GetResult<Prisma.$LessonsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Lessons that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LessonsFindFirstOrThrowArgs} args - Arguments to find a Lessons
     * @example
     * // Get one Lessons
     * const lessons = await prisma.lessons.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LessonsFindFirstOrThrowArgs>(args?: SelectSubset<T, LessonsFindFirstOrThrowArgs<ExtArgs>>): Prisma__LessonsClient<$Result.GetResult<Prisma.$LessonsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Lessons that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LessonsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Lessons
     * const lessons = await prisma.lessons.findMany()
     * 
     * // Get first 10 Lessons
     * const lessons = await prisma.lessons.findMany({ take: 10 })
     * 
     * // Only select the `lesson_id`
     * const lessonsWithLesson_idOnly = await prisma.lessons.findMany({ select: { lesson_id: true } })
     * 
     */
    findMany<T extends LessonsFindManyArgs>(args?: SelectSubset<T, LessonsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LessonsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Lessons.
     * @param {LessonsCreateArgs} args - Arguments to create a Lessons.
     * @example
     * // Create one Lessons
     * const Lessons = await prisma.lessons.create({
     *   data: {
     *     // ... data to create a Lessons
     *   }
     * })
     * 
     */
    create<T extends LessonsCreateArgs>(args: SelectSubset<T, LessonsCreateArgs<ExtArgs>>): Prisma__LessonsClient<$Result.GetResult<Prisma.$LessonsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Lessons.
     * @param {LessonsCreateManyArgs} args - Arguments to create many Lessons.
     * @example
     * // Create many Lessons
     * const lessons = await prisma.lessons.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LessonsCreateManyArgs>(args?: SelectSubset<T, LessonsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Lessons and returns the data saved in the database.
     * @param {LessonsCreateManyAndReturnArgs} args - Arguments to create many Lessons.
     * @example
     * // Create many Lessons
     * const lessons = await prisma.lessons.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Lessons and only return the `lesson_id`
     * const lessonsWithLesson_idOnly = await prisma.lessons.createManyAndReturn({ 
     *   select: { lesson_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LessonsCreateManyAndReturnArgs>(args?: SelectSubset<T, LessonsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LessonsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Lessons.
     * @param {LessonsDeleteArgs} args - Arguments to delete one Lessons.
     * @example
     * // Delete one Lessons
     * const Lessons = await prisma.lessons.delete({
     *   where: {
     *     // ... filter to delete one Lessons
     *   }
     * })
     * 
     */
    delete<T extends LessonsDeleteArgs>(args: SelectSubset<T, LessonsDeleteArgs<ExtArgs>>): Prisma__LessonsClient<$Result.GetResult<Prisma.$LessonsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Lessons.
     * @param {LessonsUpdateArgs} args - Arguments to update one Lessons.
     * @example
     * // Update one Lessons
     * const lessons = await prisma.lessons.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LessonsUpdateArgs>(args: SelectSubset<T, LessonsUpdateArgs<ExtArgs>>): Prisma__LessonsClient<$Result.GetResult<Prisma.$LessonsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Lessons.
     * @param {LessonsDeleteManyArgs} args - Arguments to filter Lessons to delete.
     * @example
     * // Delete a few Lessons
     * const { count } = await prisma.lessons.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LessonsDeleteManyArgs>(args?: SelectSubset<T, LessonsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Lessons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LessonsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Lessons
     * const lessons = await prisma.lessons.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LessonsUpdateManyArgs>(args: SelectSubset<T, LessonsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Lessons.
     * @param {LessonsUpsertArgs} args - Arguments to update or create a Lessons.
     * @example
     * // Update or create a Lessons
     * const lessons = await prisma.lessons.upsert({
     *   create: {
     *     // ... data to create a Lessons
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Lessons we want to update
     *   }
     * })
     */
    upsert<T extends LessonsUpsertArgs>(args: SelectSubset<T, LessonsUpsertArgs<ExtArgs>>): Prisma__LessonsClient<$Result.GetResult<Prisma.$LessonsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Lessons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LessonsCountArgs} args - Arguments to filter Lessons to count.
     * @example
     * // Count the number of Lessons
     * const count = await prisma.lessons.count({
     *   where: {
     *     // ... the filter for the Lessons we want to count
     *   }
     * })
    **/
    count<T extends LessonsCountArgs>(
      args?: Subset<T, LessonsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LessonsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Lessons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LessonsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LessonsAggregateArgs>(args: Subset<T, LessonsAggregateArgs>): Prisma.PrismaPromise<GetLessonsAggregateType<T>>

    /**
     * Group by Lessons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LessonsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LessonsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LessonsGroupByArgs['orderBy'] }
        : { orderBy?: LessonsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LessonsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLessonsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Lessons model
   */
  readonly fields: LessonsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Lessons.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LessonsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    course<T extends CoursesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CoursesDefaultArgs<ExtArgs>>): Prisma__CoursesClient<$Result.GetResult<Prisma.$CoursesPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    progress<T extends Lessons$progressArgs<ExtArgs> = {}>(args?: Subset<T, Lessons$progressArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProgressPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Lessons model
   */ 
  interface LessonsFieldRefs {
    readonly lesson_id: FieldRef<"Lessons", 'String'>
    readonly course_id: FieldRef<"Lessons", 'String'>
    readonly title: FieldRef<"Lessons", 'String'>
    readonly content: FieldRef<"Lessons", 'String'>
    readonly position: FieldRef<"Lessons", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Lessons findUnique
   */
  export type LessonsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lessons
     */
    select?: LessonsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonsInclude<ExtArgs> | null
    /**
     * Filter, which Lessons to fetch.
     */
    where: LessonsWhereUniqueInput
  }

  /**
   * Lessons findUniqueOrThrow
   */
  export type LessonsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lessons
     */
    select?: LessonsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonsInclude<ExtArgs> | null
    /**
     * Filter, which Lessons to fetch.
     */
    where: LessonsWhereUniqueInput
  }

  /**
   * Lessons findFirst
   */
  export type LessonsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lessons
     */
    select?: LessonsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonsInclude<ExtArgs> | null
    /**
     * Filter, which Lessons to fetch.
     */
    where?: LessonsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lessons to fetch.
     */
    orderBy?: LessonsOrderByWithRelationInput | LessonsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Lessons.
     */
    cursor?: LessonsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lessons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lessons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Lessons.
     */
    distinct?: LessonsScalarFieldEnum | LessonsScalarFieldEnum[]
  }

  /**
   * Lessons findFirstOrThrow
   */
  export type LessonsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lessons
     */
    select?: LessonsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonsInclude<ExtArgs> | null
    /**
     * Filter, which Lessons to fetch.
     */
    where?: LessonsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lessons to fetch.
     */
    orderBy?: LessonsOrderByWithRelationInput | LessonsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Lessons.
     */
    cursor?: LessonsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lessons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lessons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Lessons.
     */
    distinct?: LessonsScalarFieldEnum | LessonsScalarFieldEnum[]
  }

  /**
   * Lessons findMany
   */
  export type LessonsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lessons
     */
    select?: LessonsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonsInclude<ExtArgs> | null
    /**
     * Filter, which Lessons to fetch.
     */
    where?: LessonsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lessons to fetch.
     */
    orderBy?: LessonsOrderByWithRelationInput | LessonsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Lessons.
     */
    cursor?: LessonsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lessons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lessons.
     */
    skip?: number
    distinct?: LessonsScalarFieldEnum | LessonsScalarFieldEnum[]
  }

  /**
   * Lessons create
   */
  export type LessonsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lessons
     */
    select?: LessonsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonsInclude<ExtArgs> | null
    /**
     * The data needed to create a Lessons.
     */
    data: XOR<LessonsCreateInput, LessonsUncheckedCreateInput>
  }

  /**
   * Lessons createMany
   */
  export type LessonsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Lessons.
     */
    data: LessonsCreateManyInput | LessonsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Lessons createManyAndReturn
   */
  export type LessonsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lessons
     */
    select?: LessonsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Lessons.
     */
    data: LessonsCreateManyInput | LessonsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Lessons update
   */
  export type LessonsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lessons
     */
    select?: LessonsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonsInclude<ExtArgs> | null
    /**
     * The data needed to update a Lessons.
     */
    data: XOR<LessonsUpdateInput, LessonsUncheckedUpdateInput>
    /**
     * Choose, which Lessons to update.
     */
    where: LessonsWhereUniqueInput
  }

  /**
   * Lessons updateMany
   */
  export type LessonsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Lessons.
     */
    data: XOR<LessonsUpdateManyMutationInput, LessonsUncheckedUpdateManyInput>
    /**
     * Filter which Lessons to update
     */
    where?: LessonsWhereInput
  }

  /**
   * Lessons upsert
   */
  export type LessonsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lessons
     */
    select?: LessonsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonsInclude<ExtArgs> | null
    /**
     * The filter to search for the Lessons to update in case it exists.
     */
    where: LessonsWhereUniqueInput
    /**
     * In case the Lessons found by the `where` argument doesn't exist, create a new Lessons with this data.
     */
    create: XOR<LessonsCreateInput, LessonsUncheckedCreateInput>
    /**
     * In case the Lessons was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LessonsUpdateInput, LessonsUncheckedUpdateInput>
  }

  /**
   * Lessons delete
   */
  export type LessonsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lessons
     */
    select?: LessonsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonsInclude<ExtArgs> | null
    /**
     * Filter which Lessons to delete.
     */
    where: LessonsWhereUniqueInput
  }

  /**
   * Lessons deleteMany
   */
  export type LessonsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Lessons to delete
     */
    where?: LessonsWhereInput
  }

  /**
   * Lessons.progress
   */
  export type Lessons$progressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Progress
     */
    select?: ProgressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgressInclude<ExtArgs> | null
    where?: ProgressWhereInput
    orderBy?: ProgressOrderByWithRelationInput | ProgressOrderByWithRelationInput[]
    cursor?: ProgressWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProgressScalarFieldEnum | ProgressScalarFieldEnum[]
  }

  /**
   * Lessons without action
   */
  export type LessonsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lessons
     */
    select?: LessonsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonsInclude<ExtArgs> | null
  }


  /**
   * Model Quizzes
   */

  export type AggregateQuizzes = {
    _count: QuizzesCountAggregateOutputType | null
    _avg: QuizzesAvgAggregateOutputType | null
    _sum: QuizzesSumAggregateOutputType | null
    _min: QuizzesMinAggregateOutputType | null
    _max: QuizzesMaxAggregateOutputType | null
  }

  export type QuizzesAvgAggregateOutputType = {
    total_questions: number | null
  }

  export type QuizzesSumAggregateOutputType = {
    total_questions: number | null
  }

  export type QuizzesMinAggregateOutputType = {
    quiz_id: string | null
    course_id: string | null
    title: string | null
    total_questions: number | null
  }

  export type QuizzesMaxAggregateOutputType = {
    quiz_id: string | null
    course_id: string | null
    title: string | null
    total_questions: number | null
  }

  export type QuizzesCountAggregateOutputType = {
    quiz_id: number
    course_id: number
    title: number
    total_questions: number
    _all: number
  }


  export type QuizzesAvgAggregateInputType = {
    total_questions?: true
  }

  export type QuizzesSumAggregateInputType = {
    total_questions?: true
  }

  export type QuizzesMinAggregateInputType = {
    quiz_id?: true
    course_id?: true
    title?: true
    total_questions?: true
  }

  export type QuizzesMaxAggregateInputType = {
    quiz_id?: true
    course_id?: true
    title?: true
    total_questions?: true
  }

  export type QuizzesCountAggregateInputType = {
    quiz_id?: true
    course_id?: true
    title?: true
    total_questions?: true
    _all?: true
  }

  export type QuizzesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Quizzes to aggregate.
     */
    where?: QuizzesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Quizzes to fetch.
     */
    orderBy?: QuizzesOrderByWithRelationInput | QuizzesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QuizzesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Quizzes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Quizzes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Quizzes
    **/
    _count?: true | QuizzesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QuizzesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QuizzesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuizzesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuizzesMaxAggregateInputType
  }

  export type GetQuizzesAggregateType<T extends QuizzesAggregateArgs> = {
        [P in keyof T & keyof AggregateQuizzes]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuizzes[P]>
      : GetScalarType<T[P], AggregateQuizzes[P]>
  }




  export type QuizzesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuizzesWhereInput
    orderBy?: QuizzesOrderByWithAggregationInput | QuizzesOrderByWithAggregationInput[]
    by: QuizzesScalarFieldEnum[] | QuizzesScalarFieldEnum
    having?: QuizzesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuizzesCountAggregateInputType | true
    _avg?: QuizzesAvgAggregateInputType
    _sum?: QuizzesSumAggregateInputType
    _min?: QuizzesMinAggregateInputType
    _max?: QuizzesMaxAggregateInputType
  }

  export type QuizzesGroupByOutputType = {
    quiz_id: string
    course_id: string
    title: string
    total_questions: number
    _count: QuizzesCountAggregateOutputType | null
    _avg: QuizzesAvgAggregateOutputType | null
    _sum: QuizzesSumAggregateOutputType | null
    _min: QuizzesMinAggregateOutputType | null
    _max: QuizzesMaxAggregateOutputType | null
  }

  type GetQuizzesGroupByPayload<T extends QuizzesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QuizzesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuizzesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuizzesGroupByOutputType[P]>
            : GetScalarType<T[P], QuizzesGroupByOutputType[P]>
        }
      >
    >


  export type QuizzesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    quiz_id?: boolean
    course_id?: boolean
    title?: boolean
    total_questions?: boolean
    course?: boolean | CoursesDefaultArgs<ExtArgs>
    questions?: boolean | Quizzes$questionsArgs<ExtArgs>
    _count?: boolean | QuizzesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["quizzes"]>

  export type QuizzesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    quiz_id?: boolean
    course_id?: boolean
    title?: boolean
    total_questions?: boolean
    course?: boolean | CoursesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["quizzes"]>

  export type QuizzesSelectScalar = {
    quiz_id?: boolean
    course_id?: boolean
    title?: boolean
    total_questions?: boolean
  }

  export type QuizzesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CoursesDefaultArgs<ExtArgs>
    questions?: boolean | Quizzes$questionsArgs<ExtArgs>
    _count?: boolean | QuizzesCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type QuizzesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CoursesDefaultArgs<ExtArgs>
  }

  export type $QuizzesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Quizzes"
    objects: {
      course: Prisma.$CoursesPayload<ExtArgs>
      questions: Prisma.$QuestionsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      quiz_id: string
      course_id: string
      title: string
      total_questions: number
    }, ExtArgs["result"]["quizzes"]>
    composites: {}
  }

  type QuizzesGetPayload<S extends boolean | null | undefined | QuizzesDefaultArgs> = $Result.GetResult<Prisma.$QuizzesPayload, S>

  type QuizzesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<QuizzesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: QuizzesCountAggregateInputType | true
    }

  export interface QuizzesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Quizzes'], meta: { name: 'Quizzes' } }
    /**
     * Find zero or one Quizzes that matches the filter.
     * @param {QuizzesFindUniqueArgs} args - Arguments to find a Quizzes
     * @example
     * // Get one Quizzes
     * const quizzes = await prisma.quizzes.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends QuizzesFindUniqueArgs>(args: SelectSubset<T, QuizzesFindUniqueArgs<ExtArgs>>): Prisma__QuizzesClient<$Result.GetResult<Prisma.$QuizzesPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Quizzes that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {QuizzesFindUniqueOrThrowArgs} args - Arguments to find a Quizzes
     * @example
     * // Get one Quizzes
     * const quizzes = await prisma.quizzes.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends QuizzesFindUniqueOrThrowArgs>(args: SelectSubset<T, QuizzesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__QuizzesClient<$Result.GetResult<Prisma.$QuizzesPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Quizzes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuizzesFindFirstArgs} args - Arguments to find a Quizzes
     * @example
     * // Get one Quizzes
     * const quizzes = await prisma.quizzes.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends QuizzesFindFirstArgs>(args?: SelectSubset<T, QuizzesFindFirstArgs<ExtArgs>>): Prisma__QuizzesClient<$Result.GetResult<Prisma.$QuizzesPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Quizzes that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuizzesFindFirstOrThrowArgs} args - Arguments to find a Quizzes
     * @example
     * // Get one Quizzes
     * const quizzes = await prisma.quizzes.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends QuizzesFindFirstOrThrowArgs>(args?: SelectSubset<T, QuizzesFindFirstOrThrowArgs<ExtArgs>>): Prisma__QuizzesClient<$Result.GetResult<Prisma.$QuizzesPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Quizzes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuizzesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Quizzes
     * const quizzes = await prisma.quizzes.findMany()
     * 
     * // Get first 10 Quizzes
     * const quizzes = await prisma.quizzes.findMany({ take: 10 })
     * 
     * // Only select the `quiz_id`
     * const quizzesWithQuiz_idOnly = await prisma.quizzes.findMany({ select: { quiz_id: true } })
     * 
     */
    findMany<T extends QuizzesFindManyArgs>(args?: SelectSubset<T, QuizzesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuizzesPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Quizzes.
     * @param {QuizzesCreateArgs} args - Arguments to create a Quizzes.
     * @example
     * // Create one Quizzes
     * const Quizzes = await prisma.quizzes.create({
     *   data: {
     *     // ... data to create a Quizzes
     *   }
     * })
     * 
     */
    create<T extends QuizzesCreateArgs>(args: SelectSubset<T, QuizzesCreateArgs<ExtArgs>>): Prisma__QuizzesClient<$Result.GetResult<Prisma.$QuizzesPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Quizzes.
     * @param {QuizzesCreateManyArgs} args - Arguments to create many Quizzes.
     * @example
     * // Create many Quizzes
     * const quizzes = await prisma.quizzes.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends QuizzesCreateManyArgs>(args?: SelectSubset<T, QuizzesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Quizzes and returns the data saved in the database.
     * @param {QuizzesCreateManyAndReturnArgs} args - Arguments to create many Quizzes.
     * @example
     * // Create many Quizzes
     * const quizzes = await prisma.quizzes.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Quizzes and only return the `quiz_id`
     * const quizzesWithQuiz_idOnly = await prisma.quizzes.createManyAndReturn({ 
     *   select: { quiz_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends QuizzesCreateManyAndReturnArgs>(args?: SelectSubset<T, QuizzesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuizzesPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Quizzes.
     * @param {QuizzesDeleteArgs} args - Arguments to delete one Quizzes.
     * @example
     * // Delete one Quizzes
     * const Quizzes = await prisma.quizzes.delete({
     *   where: {
     *     // ... filter to delete one Quizzes
     *   }
     * })
     * 
     */
    delete<T extends QuizzesDeleteArgs>(args: SelectSubset<T, QuizzesDeleteArgs<ExtArgs>>): Prisma__QuizzesClient<$Result.GetResult<Prisma.$QuizzesPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Quizzes.
     * @param {QuizzesUpdateArgs} args - Arguments to update one Quizzes.
     * @example
     * // Update one Quizzes
     * const quizzes = await prisma.quizzes.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends QuizzesUpdateArgs>(args: SelectSubset<T, QuizzesUpdateArgs<ExtArgs>>): Prisma__QuizzesClient<$Result.GetResult<Prisma.$QuizzesPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Quizzes.
     * @param {QuizzesDeleteManyArgs} args - Arguments to filter Quizzes to delete.
     * @example
     * // Delete a few Quizzes
     * const { count } = await prisma.quizzes.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends QuizzesDeleteManyArgs>(args?: SelectSubset<T, QuizzesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Quizzes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuizzesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Quizzes
     * const quizzes = await prisma.quizzes.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends QuizzesUpdateManyArgs>(args: SelectSubset<T, QuizzesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Quizzes.
     * @param {QuizzesUpsertArgs} args - Arguments to update or create a Quizzes.
     * @example
     * // Update or create a Quizzes
     * const quizzes = await prisma.quizzes.upsert({
     *   create: {
     *     // ... data to create a Quizzes
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Quizzes we want to update
     *   }
     * })
     */
    upsert<T extends QuizzesUpsertArgs>(args: SelectSubset<T, QuizzesUpsertArgs<ExtArgs>>): Prisma__QuizzesClient<$Result.GetResult<Prisma.$QuizzesPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Quizzes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuizzesCountArgs} args - Arguments to filter Quizzes to count.
     * @example
     * // Count the number of Quizzes
     * const count = await prisma.quizzes.count({
     *   where: {
     *     // ... the filter for the Quizzes we want to count
     *   }
     * })
    **/
    count<T extends QuizzesCountArgs>(
      args?: Subset<T, QuizzesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuizzesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Quizzes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuizzesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuizzesAggregateArgs>(args: Subset<T, QuizzesAggregateArgs>): Prisma.PrismaPromise<GetQuizzesAggregateType<T>>

    /**
     * Group by Quizzes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuizzesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QuizzesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QuizzesGroupByArgs['orderBy'] }
        : { orderBy?: QuizzesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QuizzesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuizzesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Quizzes model
   */
  readonly fields: QuizzesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Quizzes.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__QuizzesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    course<T extends CoursesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CoursesDefaultArgs<ExtArgs>>): Prisma__CoursesClient<$Result.GetResult<Prisma.$CoursesPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    questions<T extends Quizzes$questionsArgs<ExtArgs> = {}>(args?: Subset<T, Quizzes$questionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionsPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Quizzes model
   */ 
  interface QuizzesFieldRefs {
    readonly quiz_id: FieldRef<"Quizzes", 'String'>
    readonly course_id: FieldRef<"Quizzes", 'String'>
    readonly title: FieldRef<"Quizzes", 'String'>
    readonly total_questions: FieldRef<"Quizzes", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Quizzes findUnique
   */
  export type QuizzesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quizzes
     */
    select?: QuizzesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuizzesInclude<ExtArgs> | null
    /**
     * Filter, which Quizzes to fetch.
     */
    where: QuizzesWhereUniqueInput
  }

  /**
   * Quizzes findUniqueOrThrow
   */
  export type QuizzesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quizzes
     */
    select?: QuizzesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuizzesInclude<ExtArgs> | null
    /**
     * Filter, which Quizzes to fetch.
     */
    where: QuizzesWhereUniqueInput
  }

  /**
   * Quizzes findFirst
   */
  export type QuizzesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quizzes
     */
    select?: QuizzesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuizzesInclude<ExtArgs> | null
    /**
     * Filter, which Quizzes to fetch.
     */
    where?: QuizzesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Quizzes to fetch.
     */
    orderBy?: QuizzesOrderByWithRelationInput | QuizzesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Quizzes.
     */
    cursor?: QuizzesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Quizzes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Quizzes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Quizzes.
     */
    distinct?: QuizzesScalarFieldEnum | QuizzesScalarFieldEnum[]
  }

  /**
   * Quizzes findFirstOrThrow
   */
  export type QuizzesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quizzes
     */
    select?: QuizzesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuizzesInclude<ExtArgs> | null
    /**
     * Filter, which Quizzes to fetch.
     */
    where?: QuizzesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Quizzes to fetch.
     */
    orderBy?: QuizzesOrderByWithRelationInput | QuizzesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Quizzes.
     */
    cursor?: QuizzesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Quizzes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Quizzes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Quizzes.
     */
    distinct?: QuizzesScalarFieldEnum | QuizzesScalarFieldEnum[]
  }

  /**
   * Quizzes findMany
   */
  export type QuizzesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quizzes
     */
    select?: QuizzesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuizzesInclude<ExtArgs> | null
    /**
     * Filter, which Quizzes to fetch.
     */
    where?: QuizzesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Quizzes to fetch.
     */
    orderBy?: QuizzesOrderByWithRelationInput | QuizzesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Quizzes.
     */
    cursor?: QuizzesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Quizzes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Quizzes.
     */
    skip?: number
    distinct?: QuizzesScalarFieldEnum | QuizzesScalarFieldEnum[]
  }

  /**
   * Quizzes create
   */
  export type QuizzesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quizzes
     */
    select?: QuizzesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuizzesInclude<ExtArgs> | null
    /**
     * The data needed to create a Quizzes.
     */
    data: XOR<QuizzesCreateInput, QuizzesUncheckedCreateInput>
  }

  /**
   * Quizzes createMany
   */
  export type QuizzesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Quizzes.
     */
    data: QuizzesCreateManyInput | QuizzesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Quizzes createManyAndReturn
   */
  export type QuizzesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quizzes
     */
    select?: QuizzesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Quizzes.
     */
    data: QuizzesCreateManyInput | QuizzesCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuizzesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Quizzes update
   */
  export type QuizzesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quizzes
     */
    select?: QuizzesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuizzesInclude<ExtArgs> | null
    /**
     * The data needed to update a Quizzes.
     */
    data: XOR<QuizzesUpdateInput, QuizzesUncheckedUpdateInput>
    /**
     * Choose, which Quizzes to update.
     */
    where: QuizzesWhereUniqueInput
  }

  /**
   * Quizzes updateMany
   */
  export type QuizzesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Quizzes.
     */
    data: XOR<QuizzesUpdateManyMutationInput, QuizzesUncheckedUpdateManyInput>
    /**
     * Filter which Quizzes to update
     */
    where?: QuizzesWhereInput
  }

  /**
   * Quizzes upsert
   */
  export type QuizzesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quizzes
     */
    select?: QuizzesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuizzesInclude<ExtArgs> | null
    /**
     * The filter to search for the Quizzes to update in case it exists.
     */
    where: QuizzesWhereUniqueInput
    /**
     * In case the Quizzes found by the `where` argument doesn't exist, create a new Quizzes with this data.
     */
    create: XOR<QuizzesCreateInput, QuizzesUncheckedCreateInput>
    /**
     * In case the Quizzes was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QuizzesUpdateInput, QuizzesUncheckedUpdateInput>
  }

  /**
   * Quizzes delete
   */
  export type QuizzesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quizzes
     */
    select?: QuizzesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuizzesInclude<ExtArgs> | null
    /**
     * Filter which Quizzes to delete.
     */
    where: QuizzesWhereUniqueInput
  }

  /**
   * Quizzes deleteMany
   */
  export type QuizzesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Quizzes to delete
     */
    where?: QuizzesWhereInput
  }

  /**
   * Quizzes.questions
   */
  export type Quizzes$questionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Questions
     */
    select?: QuestionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionsInclude<ExtArgs> | null
    where?: QuestionsWhereInput
    orderBy?: QuestionsOrderByWithRelationInput | QuestionsOrderByWithRelationInput[]
    cursor?: QuestionsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionsScalarFieldEnum | QuestionsScalarFieldEnum[]
  }

  /**
   * Quizzes without action
   */
  export type QuizzesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quizzes
     */
    select?: QuizzesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuizzesInclude<ExtArgs> | null
  }


  /**
   * Model Questions
   */

  export type AggregateQuestions = {
    _count: QuestionsCountAggregateOutputType | null
    _min: QuestionsMinAggregateOutputType | null
    _max: QuestionsMaxAggregateOutputType | null
  }

  export type QuestionsMinAggregateOutputType = {
    question_id: string | null
    quiz_id: string | null
    text: string | null
    type: $Enums.QuestionType | null
  }

  export type QuestionsMaxAggregateOutputType = {
    question_id: string | null
    quiz_id: string | null
    text: string | null
    type: $Enums.QuestionType | null
  }

  export type QuestionsCountAggregateOutputType = {
    question_id: number
    quiz_id: number
    text: number
    type: number
    _all: number
  }


  export type QuestionsMinAggregateInputType = {
    question_id?: true
    quiz_id?: true
    text?: true
    type?: true
  }

  export type QuestionsMaxAggregateInputType = {
    question_id?: true
    quiz_id?: true
    text?: true
    type?: true
  }

  export type QuestionsCountAggregateInputType = {
    question_id?: true
    quiz_id?: true
    text?: true
    type?: true
    _all?: true
  }

  export type QuestionsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Questions to aggregate.
     */
    where?: QuestionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionsOrderByWithRelationInput | QuestionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QuestionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Questions
    **/
    _count?: true | QuestionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuestionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuestionsMaxAggregateInputType
  }

  export type GetQuestionsAggregateType<T extends QuestionsAggregateArgs> = {
        [P in keyof T & keyof AggregateQuestions]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuestions[P]>
      : GetScalarType<T[P], AggregateQuestions[P]>
  }




  export type QuestionsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionsWhereInput
    orderBy?: QuestionsOrderByWithAggregationInput | QuestionsOrderByWithAggregationInput[]
    by: QuestionsScalarFieldEnum[] | QuestionsScalarFieldEnum
    having?: QuestionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuestionsCountAggregateInputType | true
    _min?: QuestionsMinAggregateInputType
    _max?: QuestionsMaxAggregateInputType
  }

  export type QuestionsGroupByOutputType = {
    question_id: string
    quiz_id: string
    text: string
    type: $Enums.QuestionType
    _count: QuestionsCountAggregateOutputType | null
    _min: QuestionsMinAggregateOutputType | null
    _max: QuestionsMaxAggregateOutputType | null
  }

  type GetQuestionsGroupByPayload<T extends QuestionsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QuestionsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuestionsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuestionsGroupByOutputType[P]>
            : GetScalarType<T[P], QuestionsGroupByOutputType[P]>
        }
      >
    >


  export type QuestionsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    question_id?: boolean
    quiz_id?: boolean
    text?: boolean
    type?: boolean
    quizzes?: boolean | QuizzesDefaultArgs<ExtArgs>
    options?: boolean | Questions$optionsArgs<ExtArgs>
    _count?: boolean | QuestionsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["questions"]>

  export type QuestionsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    question_id?: boolean
    quiz_id?: boolean
    text?: boolean
    type?: boolean
    quizzes?: boolean | QuizzesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["questions"]>

  export type QuestionsSelectScalar = {
    question_id?: boolean
    quiz_id?: boolean
    text?: boolean
    type?: boolean
  }

  export type QuestionsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    quizzes?: boolean | QuizzesDefaultArgs<ExtArgs>
    options?: boolean | Questions$optionsArgs<ExtArgs>
    _count?: boolean | QuestionsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type QuestionsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    quizzes?: boolean | QuizzesDefaultArgs<ExtArgs>
  }

  export type $QuestionsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Questions"
    objects: {
      quizzes: Prisma.$QuizzesPayload<ExtArgs>
      options: Prisma.$OptionsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      question_id: string
      quiz_id: string
      text: string
      type: $Enums.QuestionType
    }, ExtArgs["result"]["questions"]>
    composites: {}
  }

  type QuestionsGetPayload<S extends boolean | null | undefined | QuestionsDefaultArgs> = $Result.GetResult<Prisma.$QuestionsPayload, S>

  type QuestionsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<QuestionsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: QuestionsCountAggregateInputType | true
    }

  export interface QuestionsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Questions'], meta: { name: 'Questions' } }
    /**
     * Find zero or one Questions that matches the filter.
     * @param {QuestionsFindUniqueArgs} args - Arguments to find a Questions
     * @example
     * // Get one Questions
     * const questions = await prisma.questions.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends QuestionsFindUniqueArgs>(args: SelectSubset<T, QuestionsFindUniqueArgs<ExtArgs>>): Prisma__QuestionsClient<$Result.GetResult<Prisma.$QuestionsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Questions that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {QuestionsFindUniqueOrThrowArgs} args - Arguments to find a Questions
     * @example
     * // Get one Questions
     * const questions = await prisma.questions.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends QuestionsFindUniqueOrThrowArgs>(args: SelectSubset<T, QuestionsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__QuestionsClient<$Result.GetResult<Prisma.$QuestionsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Questions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionsFindFirstArgs} args - Arguments to find a Questions
     * @example
     * // Get one Questions
     * const questions = await prisma.questions.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends QuestionsFindFirstArgs>(args?: SelectSubset<T, QuestionsFindFirstArgs<ExtArgs>>): Prisma__QuestionsClient<$Result.GetResult<Prisma.$QuestionsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Questions that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionsFindFirstOrThrowArgs} args - Arguments to find a Questions
     * @example
     * // Get one Questions
     * const questions = await prisma.questions.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends QuestionsFindFirstOrThrowArgs>(args?: SelectSubset<T, QuestionsFindFirstOrThrowArgs<ExtArgs>>): Prisma__QuestionsClient<$Result.GetResult<Prisma.$QuestionsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Questions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Questions
     * const questions = await prisma.questions.findMany()
     * 
     * // Get first 10 Questions
     * const questions = await prisma.questions.findMany({ take: 10 })
     * 
     * // Only select the `question_id`
     * const questionsWithQuestion_idOnly = await prisma.questions.findMany({ select: { question_id: true } })
     * 
     */
    findMany<T extends QuestionsFindManyArgs>(args?: SelectSubset<T, QuestionsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Questions.
     * @param {QuestionsCreateArgs} args - Arguments to create a Questions.
     * @example
     * // Create one Questions
     * const Questions = await prisma.questions.create({
     *   data: {
     *     // ... data to create a Questions
     *   }
     * })
     * 
     */
    create<T extends QuestionsCreateArgs>(args: SelectSubset<T, QuestionsCreateArgs<ExtArgs>>): Prisma__QuestionsClient<$Result.GetResult<Prisma.$QuestionsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Questions.
     * @param {QuestionsCreateManyArgs} args - Arguments to create many Questions.
     * @example
     * // Create many Questions
     * const questions = await prisma.questions.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends QuestionsCreateManyArgs>(args?: SelectSubset<T, QuestionsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Questions and returns the data saved in the database.
     * @param {QuestionsCreateManyAndReturnArgs} args - Arguments to create many Questions.
     * @example
     * // Create many Questions
     * const questions = await prisma.questions.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Questions and only return the `question_id`
     * const questionsWithQuestion_idOnly = await prisma.questions.createManyAndReturn({ 
     *   select: { question_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends QuestionsCreateManyAndReturnArgs>(args?: SelectSubset<T, QuestionsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Questions.
     * @param {QuestionsDeleteArgs} args - Arguments to delete one Questions.
     * @example
     * // Delete one Questions
     * const Questions = await prisma.questions.delete({
     *   where: {
     *     // ... filter to delete one Questions
     *   }
     * })
     * 
     */
    delete<T extends QuestionsDeleteArgs>(args: SelectSubset<T, QuestionsDeleteArgs<ExtArgs>>): Prisma__QuestionsClient<$Result.GetResult<Prisma.$QuestionsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Questions.
     * @param {QuestionsUpdateArgs} args - Arguments to update one Questions.
     * @example
     * // Update one Questions
     * const questions = await prisma.questions.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends QuestionsUpdateArgs>(args: SelectSubset<T, QuestionsUpdateArgs<ExtArgs>>): Prisma__QuestionsClient<$Result.GetResult<Prisma.$QuestionsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Questions.
     * @param {QuestionsDeleteManyArgs} args - Arguments to filter Questions to delete.
     * @example
     * // Delete a few Questions
     * const { count } = await prisma.questions.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends QuestionsDeleteManyArgs>(args?: SelectSubset<T, QuestionsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Questions
     * const questions = await prisma.questions.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends QuestionsUpdateManyArgs>(args: SelectSubset<T, QuestionsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Questions.
     * @param {QuestionsUpsertArgs} args - Arguments to update or create a Questions.
     * @example
     * // Update or create a Questions
     * const questions = await prisma.questions.upsert({
     *   create: {
     *     // ... data to create a Questions
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Questions we want to update
     *   }
     * })
     */
    upsert<T extends QuestionsUpsertArgs>(args: SelectSubset<T, QuestionsUpsertArgs<ExtArgs>>): Prisma__QuestionsClient<$Result.GetResult<Prisma.$QuestionsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionsCountArgs} args - Arguments to filter Questions to count.
     * @example
     * // Count the number of Questions
     * const count = await prisma.questions.count({
     *   where: {
     *     // ... the filter for the Questions we want to count
     *   }
     * })
    **/
    count<T extends QuestionsCountArgs>(
      args?: Subset<T, QuestionsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuestionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuestionsAggregateArgs>(args: Subset<T, QuestionsAggregateArgs>): Prisma.PrismaPromise<GetQuestionsAggregateType<T>>

    /**
     * Group by Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QuestionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QuestionsGroupByArgs['orderBy'] }
        : { orderBy?: QuestionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QuestionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuestionsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Questions model
   */
  readonly fields: QuestionsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Questions.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__QuestionsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    quizzes<T extends QuizzesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, QuizzesDefaultArgs<ExtArgs>>): Prisma__QuizzesClient<$Result.GetResult<Prisma.$QuizzesPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    options<T extends Questions$optionsArgs<ExtArgs> = {}>(args?: Subset<T, Questions$optionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OptionsPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Questions model
   */ 
  interface QuestionsFieldRefs {
    readonly question_id: FieldRef<"Questions", 'String'>
    readonly quiz_id: FieldRef<"Questions", 'String'>
    readonly text: FieldRef<"Questions", 'String'>
    readonly type: FieldRef<"Questions", 'QuestionType'>
  }
    

  // Custom InputTypes
  /**
   * Questions findUnique
   */
  export type QuestionsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Questions
     */
    select?: QuestionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionsInclude<ExtArgs> | null
    /**
     * Filter, which Questions to fetch.
     */
    where: QuestionsWhereUniqueInput
  }

  /**
   * Questions findUniqueOrThrow
   */
  export type QuestionsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Questions
     */
    select?: QuestionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionsInclude<ExtArgs> | null
    /**
     * Filter, which Questions to fetch.
     */
    where: QuestionsWhereUniqueInput
  }

  /**
   * Questions findFirst
   */
  export type QuestionsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Questions
     */
    select?: QuestionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionsInclude<ExtArgs> | null
    /**
     * Filter, which Questions to fetch.
     */
    where?: QuestionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionsOrderByWithRelationInput | QuestionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Questions.
     */
    cursor?: QuestionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Questions.
     */
    distinct?: QuestionsScalarFieldEnum | QuestionsScalarFieldEnum[]
  }

  /**
   * Questions findFirstOrThrow
   */
  export type QuestionsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Questions
     */
    select?: QuestionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionsInclude<ExtArgs> | null
    /**
     * Filter, which Questions to fetch.
     */
    where?: QuestionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionsOrderByWithRelationInput | QuestionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Questions.
     */
    cursor?: QuestionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Questions.
     */
    distinct?: QuestionsScalarFieldEnum | QuestionsScalarFieldEnum[]
  }

  /**
   * Questions findMany
   */
  export type QuestionsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Questions
     */
    select?: QuestionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionsInclude<ExtArgs> | null
    /**
     * Filter, which Questions to fetch.
     */
    where?: QuestionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionsOrderByWithRelationInput | QuestionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Questions.
     */
    cursor?: QuestionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    distinct?: QuestionsScalarFieldEnum | QuestionsScalarFieldEnum[]
  }

  /**
   * Questions create
   */
  export type QuestionsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Questions
     */
    select?: QuestionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionsInclude<ExtArgs> | null
    /**
     * The data needed to create a Questions.
     */
    data: XOR<QuestionsCreateInput, QuestionsUncheckedCreateInput>
  }

  /**
   * Questions createMany
   */
  export type QuestionsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Questions.
     */
    data: QuestionsCreateManyInput | QuestionsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Questions createManyAndReturn
   */
  export type QuestionsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Questions
     */
    select?: QuestionsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Questions.
     */
    data: QuestionsCreateManyInput | QuestionsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Questions update
   */
  export type QuestionsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Questions
     */
    select?: QuestionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionsInclude<ExtArgs> | null
    /**
     * The data needed to update a Questions.
     */
    data: XOR<QuestionsUpdateInput, QuestionsUncheckedUpdateInput>
    /**
     * Choose, which Questions to update.
     */
    where: QuestionsWhereUniqueInput
  }

  /**
   * Questions updateMany
   */
  export type QuestionsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Questions.
     */
    data: XOR<QuestionsUpdateManyMutationInput, QuestionsUncheckedUpdateManyInput>
    /**
     * Filter which Questions to update
     */
    where?: QuestionsWhereInput
  }

  /**
   * Questions upsert
   */
  export type QuestionsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Questions
     */
    select?: QuestionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionsInclude<ExtArgs> | null
    /**
     * The filter to search for the Questions to update in case it exists.
     */
    where: QuestionsWhereUniqueInput
    /**
     * In case the Questions found by the `where` argument doesn't exist, create a new Questions with this data.
     */
    create: XOR<QuestionsCreateInput, QuestionsUncheckedCreateInput>
    /**
     * In case the Questions was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QuestionsUpdateInput, QuestionsUncheckedUpdateInput>
  }

  /**
   * Questions delete
   */
  export type QuestionsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Questions
     */
    select?: QuestionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionsInclude<ExtArgs> | null
    /**
     * Filter which Questions to delete.
     */
    where: QuestionsWhereUniqueInput
  }

  /**
   * Questions deleteMany
   */
  export type QuestionsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Questions to delete
     */
    where?: QuestionsWhereInput
  }

  /**
   * Questions.options
   */
  export type Questions$optionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Options
     */
    select?: OptionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OptionsInclude<ExtArgs> | null
    where?: OptionsWhereInput
    orderBy?: OptionsOrderByWithRelationInput | OptionsOrderByWithRelationInput[]
    cursor?: OptionsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OptionsScalarFieldEnum | OptionsScalarFieldEnum[]
  }

  /**
   * Questions without action
   */
  export type QuestionsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Questions
     */
    select?: QuestionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionsInclude<ExtArgs> | null
  }


  /**
   * Model Options
   */

  export type AggregateOptions = {
    _count: OptionsCountAggregateOutputType | null
    _min: OptionsMinAggregateOutputType | null
    _max: OptionsMaxAggregateOutputType | null
  }

  export type OptionsMinAggregateOutputType = {
    option_id: string | null
    question_id: string | null
    text: string | null
    is_correct: boolean | null
  }

  export type OptionsMaxAggregateOutputType = {
    option_id: string | null
    question_id: string | null
    text: string | null
    is_correct: boolean | null
  }

  export type OptionsCountAggregateOutputType = {
    option_id: number
    question_id: number
    text: number
    is_correct: number
    _all: number
  }


  export type OptionsMinAggregateInputType = {
    option_id?: true
    question_id?: true
    text?: true
    is_correct?: true
  }

  export type OptionsMaxAggregateInputType = {
    option_id?: true
    question_id?: true
    text?: true
    is_correct?: true
  }

  export type OptionsCountAggregateInputType = {
    option_id?: true
    question_id?: true
    text?: true
    is_correct?: true
    _all?: true
  }

  export type OptionsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Options to aggregate.
     */
    where?: OptionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Options to fetch.
     */
    orderBy?: OptionsOrderByWithRelationInput | OptionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OptionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Options from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Options.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Options
    **/
    _count?: true | OptionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OptionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OptionsMaxAggregateInputType
  }

  export type GetOptionsAggregateType<T extends OptionsAggregateArgs> = {
        [P in keyof T & keyof AggregateOptions]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOptions[P]>
      : GetScalarType<T[P], AggregateOptions[P]>
  }




  export type OptionsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OptionsWhereInput
    orderBy?: OptionsOrderByWithAggregationInput | OptionsOrderByWithAggregationInput[]
    by: OptionsScalarFieldEnum[] | OptionsScalarFieldEnum
    having?: OptionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OptionsCountAggregateInputType | true
    _min?: OptionsMinAggregateInputType
    _max?: OptionsMaxAggregateInputType
  }

  export type OptionsGroupByOutputType = {
    option_id: string
    question_id: string
    text: string
    is_correct: boolean
    _count: OptionsCountAggregateOutputType | null
    _min: OptionsMinAggregateOutputType | null
    _max: OptionsMaxAggregateOutputType | null
  }

  type GetOptionsGroupByPayload<T extends OptionsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OptionsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OptionsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OptionsGroupByOutputType[P]>
            : GetScalarType<T[P], OptionsGroupByOutputType[P]>
        }
      >
    >


  export type OptionsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    option_id?: boolean
    question_id?: boolean
    text?: boolean
    is_correct?: boolean
    question?: boolean | QuestionsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["options"]>

  export type OptionsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    option_id?: boolean
    question_id?: boolean
    text?: boolean
    is_correct?: boolean
    question?: boolean | QuestionsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["options"]>

  export type OptionsSelectScalar = {
    option_id?: boolean
    question_id?: boolean
    text?: boolean
    is_correct?: boolean
  }

  export type OptionsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    question?: boolean | QuestionsDefaultArgs<ExtArgs>
  }
  export type OptionsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    question?: boolean | QuestionsDefaultArgs<ExtArgs>
  }

  export type $OptionsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Options"
    objects: {
      question: Prisma.$QuestionsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      option_id: string
      question_id: string
      text: string
      is_correct: boolean
    }, ExtArgs["result"]["options"]>
    composites: {}
  }

  type OptionsGetPayload<S extends boolean | null | undefined | OptionsDefaultArgs> = $Result.GetResult<Prisma.$OptionsPayload, S>

  type OptionsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<OptionsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: OptionsCountAggregateInputType | true
    }

  export interface OptionsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Options'], meta: { name: 'Options' } }
    /**
     * Find zero or one Options that matches the filter.
     * @param {OptionsFindUniqueArgs} args - Arguments to find a Options
     * @example
     * // Get one Options
     * const options = await prisma.options.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OptionsFindUniqueArgs>(args: SelectSubset<T, OptionsFindUniqueArgs<ExtArgs>>): Prisma__OptionsClient<$Result.GetResult<Prisma.$OptionsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Options that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {OptionsFindUniqueOrThrowArgs} args - Arguments to find a Options
     * @example
     * // Get one Options
     * const options = await prisma.options.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OptionsFindUniqueOrThrowArgs>(args: SelectSubset<T, OptionsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OptionsClient<$Result.GetResult<Prisma.$OptionsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Options that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OptionsFindFirstArgs} args - Arguments to find a Options
     * @example
     * // Get one Options
     * const options = await prisma.options.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OptionsFindFirstArgs>(args?: SelectSubset<T, OptionsFindFirstArgs<ExtArgs>>): Prisma__OptionsClient<$Result.GetResult<Prisma.$OptionsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Options that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OptionsFindFirstOrThrowArgs} args - Arguments to find a Options
     * @example
     * // Get one Options
     * const options = await prisma.options.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OptionsFindFirstOrThrowArgs>(args?: SelectSubset<T, OptionsFindFirstOrThrowArgs<ExtArgs>>): Prisma__OptionsClient<$Result.GetResult<Prisma.$OptionsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Options that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OptionsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Options
     * const options = await prisma.options.findMany()
     * 
     * // Get first 10 Options
     * const options = await prisma.options.findMany({ take: 10 })
     * 
     * // Only select the `option_id`
     * const optionsWithOption_idOnly = await prisma.options.findMany({ select: { option_id: true } })
     * 
     */
    findMany<T extends OptionsFindManyArgs>(args?: SelectSubset<T, OptionsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OptionsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Options.
     * @param {OptionsCreateArgs} args - Arguments to create a Options.
     * @example
     * // Create one Options
     * const Options = await prisma.options.create({
     *   data: {
     *     // ... data to create a Options
     *   }
     * })
     * 
     */
    create<T extends OptionsCreateArgs>(args: SelectSubset<T, OptionsCreateArgs<ExtArgs>>): Prisma__OptionsClient<$Result.GetResult<Prisma.$OptionsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Options.
     * @param {OptionsCreateManyArgs} args - Arguments to create many Options.
     * @example
     * // Create many Options
     * const options = await prisma.options.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OptionsCreateManyArgs>(args?: SelectSubset<T, OptionsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Options and returns the data saved in the database.
     * @param {OptionsCreateManyAndReturnArgs} args - Arguments to create many Options.
     * @example
     * // Create many Options
     * const options = await prisma.options.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Options and only return the `option_id`
     * const optionsWithOption_idOnly = await prisma.options.createManyAndReturn({ 
     *   select: { option_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OptionsCreateManyAndReturnArgs>(args?: SelectSubset<T, OptionsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OptionsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Options.
     * @param {OptionsDeleteArgs} args - Arguments to delete one Options.
     * @example
     * // Delete one Options
     * const Options = await prisma.options.delete({
     *   where: {
     *     // ... filter to delete one Options
     *   }
     * })
     * 
     */
    delete<T extends OptionsDeleteArgs>(args: SelectSubset<T, OptionsDeleteArgs<ExtArgs>>): Prisma__OptionsClient<$Result.GetResult<Prisma.$OptionsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Options.
     * @param {OptionsUpdateArgs} args - Arguments to update one Options.
     * @example
     * // Update one Options
     * const options = await prisma.options.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OptionsUpdateArgs>(args: SelectSubset<T, OptionsUpdateArgs<ExtArgs>>): Prisma__OptionsClient<$Result.GetResult<Prisma.$OptionsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Options.
     * @param {OptionsDeleteManyArgs} args - Arguments to filter Options to delete.
     * @example
     * // Delete a few Options
     * const { count } = await prisma.options.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OptionsDeleteManyArgs>(args?: SelectSubset<T, OptionsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Options.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OptionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Options
     * const options = await prisma.options.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OptionsUpdateManyArgs>(args: SelectSubset<T, OptionsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Options.
     * @param {OptionsUpsertArgs} args - Arguments to update or create a Options.
     * @example
     * // Update or create a Options
     * const options = await prisma.options.upsert({
     *   create: {
     *     // ... data to create a Options
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Options we want to update
     *   }
     * })
     */
    upsert<T extends OptionsUpsertArgs>(args: SelectSubset<T, OptionsUpsertArgs<ExtArgs>>): Prisma__OptionsClient<$Result.GetResult<Prisma.$OptionsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Options.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OptionsCountArgs} args - Arguments to filter Options to count.
     * @example
     * // Count the number of Options
     * const count = await prisma.options.count({
     *   where: {
     *     // ... the filter for the Options we want to count
     *   }
     * })
    **/
    count<T extends OptionsCountArgs>(
      args?: Subset<T, OptionsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OptionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Options.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OptionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OptionsAggregateArgs>(args: Subset<T, OptionsAggregateArgs>): Prisma.PrismaPromise<GetOptionsAggregateType<T>>

    /**
     * Group by Options.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OptionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OptionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OptionsGroupByArgs['orderBy'] }
        : { orderBy?: OptionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OptionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOptionsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Options model
   */
  readonly fields: OptionsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Options.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OptionsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    question<T extends QuestionsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, QuestionsDefaultArgs<ExtArgs>>): Prisma__QuestionsClient<$Result.GetResult<Prisma.$QuestionsPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Options model
   */ 
  interface OptionsFieldRefs {
    readonly option_id: FieldRef<"Options", 'String'>
    readonly question_id: FieldRef<"Options", 'String'>
    readonly text: FieldRef<"Options", 'String'>
    readonly is_correct: FieldRef<"Options", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Options findUnique
   */
  export type OptionsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Options
     */
    select?: OptionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OptionsInclude<ExtArgs> | null
    /**
     * Filter, which Options to fetch.
     */
    where: OptionsWhereUniqueInput
  }

  /**
   * Options findUniqueOrThrow
   */
  export type OptionsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Options
     */
    select?: OptionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OptionsInclude<ExtArgs> | null
    /**
     * Filter, which Options to fetch.
     */
    where: OptionsWhereUniqueInput
  }

  /**
   * Options findFirst
   */
  export type OptionsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Options
     */
    select?: OptionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OptionsInclude<ExtArgs> | null
    /**
     * Filter, which Options to fetch.
     */
    where?: OptionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Options to fetch.
     */
    orderBy?: OptionsOrderByWithRelationInput | OptionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Options.
     */
    cursor?: OptionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Options from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Options.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Options.
     */
    distinct?: OptionsScalarFieldEnum | OptionsScalarFieldEnum[]
  }

  /**
   * Options findFirstOrThrow
   */
  export type OptionsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Options
     */
    select?: OptionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OptionsInclude<ExtArgs> | null
    /**
     * Filter, which Options to fetch.
     */
    where?: OptionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Options to fetch.
     */
    orderBy?: OptionsOrderByWithRelationInput | OptionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Options.
     */
    cursor?: OptionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Options from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Options.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Options.
     */
    distinct?: OptionsScalarFieldEnum | OptionsScalarFieldEnum[]
  }

  /**
   * Options findMany
   */
  export type OptionsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Options
     */
    select?: OptionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OptionsInclude<ExtArgs> | null
    /**
     * Filter, which Options to fetch.
     */
    where?: OptionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Options to fetch.
     */
    orderBy?: OptionsOrderByWithRelationInput | OptionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Options.
     */
    cursor?: OptionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Options from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Options.
     */
    skip?: number
    distinct?: OptionsScalarFieldEnum | OptionsScalarFieldEnum[]
  }

  /**
   * Options create
   */
  export type OptionsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Options
     */
    select?: OptionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OptionsInclude<ExtArgs> | null
    /**
     * The data needed to create a Options.
     */
    data: XOR<OptionsCreateInput, OptionsUncheckedCreateInput>
  }

  /**
   * Options createMany
   */
  export type OptionsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Options.
     */
    data: OptionsCreateManyInput | OptionsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Options createManyAndReturn
   */
  export type OptionsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Options
     */
    select?: OptionsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Options.
     */
    data: OptionsCreateManyInput | OptionsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OptionsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Options update
   */
  export type OptionsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Options
     */
    select?: OptionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OptionsInclude<ExtArgs> | null
    /**
     * The data needed to update a Options.
     */
    data: XOR<OptionsUpdateInput, OptionsUncheckedUpdateInput>
    /**
     * Choose, which Options to update.
     */
    where: OptionsWhereUniqueInput
  }

  /**
   * Options updateMany
   */
  export type OptionsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Options.
     */
    data: XOR<OptionsUpdateManyMutationInput, OptionsUncheckedUpdateManyInput>
    /**
     * Filter which Options to update
     */
    where?: OptionsWhereInput
  }

  /**
   * Options upsert
   */
  export type OptionsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Options
     */
    select?: OptionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OptionsInclude<ExtArgs> | null
    /**
     * The filter to search for the Options to update in case it exists.
     */
    where: OptionsWhereUniqueInput
    /**
     * In case the Options found by the `where` argument doesn't exist, create a new Options with this data.
     */
    create: XOR<OptionsCreateInput, OptionsUncheckedCreateInput>
    /**
     * In case the Options was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OptionsUpdateInput, OptionsUncheckedUpdateInput>
  }

  /**
   * Options delete
   */
  export type OptionsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Options
     */
    select?: OptionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OptionsInclude<ExtArgs> | null
    /**
     * Filter which Options to delete.
     */
    where: OptionsWhereUniqueInput
  }

  /**
   * Options deleteMany
   */
  export type OptionsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Options to delete
     */
    where?: OptionsWhereInput
  }

  /**
   * Options without action
   */
  export type OptionsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Options
     */
    select?: OptionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OptionsInclude<ExtArgs> | null
  }


  /**
   * Model Progress
   */

  export type AggregateProgress = {
    _count: ProgressCountAggregateOutputType | null
    _min: ProgressMinAggregateOutputType | null
    _max: ProgressMaxAggregateOutputType | null
  }

  export type ProgressMinAggregateOutputType = {
    progress_id: string | null
    user_id: string | null
    course_id: string | null
    lesson_id: string | null
    is_complete: boolean | null
    updated_at: Date | null
  }

  export type ProgressMaxAggregateOutputType = {
    progress_id: string | null
    user_id: string | null
    course_id: string | null
    lesson_id: string | null
    is_complete: boolean | null
    updated_at: Date | null
  }

  export type ProgressCountAggregateOutputType = {
    progress_id: number
    user_id: number
    course_id: number
    lesson_id: number
    is_complete: number
    updated_at: number
    _all: number
  }


  export type ProgressMinAggregateInputType = {
    progress_id?: true
    user_id?: true
    course_id?: true
    lesson_id?: true
    is_complete?: true
    updated_at?: true
  }

  export type ProgressMaxAggregateInputType = {
    progress_id?: true
    user_id?: true
    course_id?: true
    lesson_id?: true
    is_complete?: true
    updated_at?: true
  }

  export type ProgressCountAggregateInputType = {
    progress_id?: true
    user_id?: true
    course_id?: true
    lesson_id?: true
    is_complete?: true
    updated_at?: true
    _all?: true
  }

  export type ProgressAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Progress to aggregate.
     */
    where?: ProgressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Progresses to fetch.
     */
    orderBy?: ProgressOrderByWithRelationInput | ProgressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProgressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Progresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Progresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Progresses
    **/
    _count?: true | ProgressCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProgressMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProgressMaxAggregateInputType
  }

  export type GetProgressAggregateType<T extends ProgressAggregateArgs> = {
        [P in keyof T & keyof AggregateProgress]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProgress[P]>
      : GetScalarType<T[P], AggregateProgress[P]>
  }




  export type ProgressGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProgressWhereInput
    orderBy?: ProgressOrderByWithAggregationInput | ProgressOrderByWithAggregationInput[]
    by: ProgressScalarFieldEnum[] | ProgressScalarFieldEnum
    having?: ProgressScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProgressCountAggregateInputType | true
    _min?: ProgressMinAggregateInputType
    _max?: ProgressMaxAggregateInputType
  }

  export type ProgressGroupByOutputType = {
    progress_id: string
    user_id: string
    course_id: string
    lesson_id: string
    is_complete: boolean
    updated_at: Date
    _count: ProgressCountAggregateOutputType | null
    _min: ProgressMinAggregateOutputType | null
    _max: ProgressMaxAggregateOutputType | null
  }

  type GetProgressGroupByPayload<T extends ProgressGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProgressGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProgressGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProgressGroupByOutputType[P]>
            : GetScalarType<T[P], ProgressGroupByOutputType[P]>
        }
      >
    >


  export type ProgressSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    progress_id?: boolean
    user_id?: boolean
    course_id?: boolean
    lesson_id?: boolean
    is_complete?: boolean
    updated_at?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    course?: boolean | CoursesDefaultArgs<ExtArgs>
    lesson?: boolean | LessonsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["progress"]>

  export type ProgressSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    progress_id?: boolean
    user_id?: boolean
    course_id?: boolean
    lesson_id?: boolean
    is_complete?: boolean
    updated_at?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    course?: boolean | CoursesDefaultArgs<ExtArgs>
    lesson?: boolean | LessonsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["progress"]>

  export type ProgressSelectScalar = {
    progress_id?: boolean
    user_id?: boolean
    course_id?: boolean
    lesson_id?: boolean
    is_complete?: boolean
    updated_at?: boolean
  }

  export type ProgressInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    course?: boolean | CoursesDefaultArgs<ExtArgs>
    lesson?: boolean | LessonsDefaultArgs<ExtArgs>
  }
  export type ProgressIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    course?: boolean | CoursesDefaultArgs<ExtArgs>
    lesson?: boolean | LessonsDefaultArgs<ExtArgs>
  }

  export type $ProgressPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Progress"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      course: Prisma.$CoursesPayload<ExtArgs>
      lesson: Prisma.$LessonsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      progress_id: string
      user_id: string
      course_id: string
      lesson_id: string
      is_complete: boolean
      updated_at: Date
    }, ExtArgs["result"]["progress"]>
    composites: {}
  }

  type ProgressGetPayload<S extends boolean | null | undefined | ProgressDefaultArgs> = $Result.GetResult<Prisma.$ProgressPayload, S>

  type ProgressCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProgressFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProgressCountAggregateInputType | true
    }

  export interface ProgressDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Progress'], meta: { name: 'Progress' } }
    /**
     * Find zero or one Progress that matches the filter.
     * @param {ProgressFindUniqueArgs} args - Arguments to find a Progress
     * @example
     * // Get one Progress
     * const progress = await prisma.progress.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProgressFindUniqueArgs>(args: SelectSubset<T, ProgressFindUniqueArgs<ExtArgs>>): Prisma__ProgressClient<$Result.GetResult<Prisma.$ProgressPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Progress that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProgressFindUniqueOrThrowArgs} args - Arguments to find a Progress
     * @example
     * // Get one Progress
     * const progress = await prisma.progress.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProgressFindUniqueOrThrowArgs>(args: SelectSubset<T, ProgressFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProgressClient<$Result.GetResult<Prisma.$ProgressPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Progress that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProgressFindFirstArgs} args - Arguments to find a Progress
     * @example
     * // Get one Progress
     * const progress = await prisma.progress.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProgressFindFirstArgs>(args?: SelectSubset<T, ProgressFindFirstArgs<ExtArgs>>): Prisma__ProgressClient<$Result.GetResult<Prisma.$ProgressPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Progress that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProgressFindFirstOrThrowArgs} args - Arguments to find a Progress
     * @example
     * // Get one Progress
     * const progress = await prisma.progress.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProgressFindFirstOrThrowArgs>(args?: SelectSubset<T, ProgressFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProgressClient<$Result.GetResult<Prisma.$ProgressPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Progresses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProgressFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Progresses
     * const progresses = await prisma.progress.findMany()
     * 
     * // Get first 10 Progresses
     * const progresses = await prisma.progress.findMany({ take: 10 })
     * 
     * // Only select the `progress_id`
     * const progressWithProgress_idOnly = await prisma.progress.findMany({ select: { progress_id: true } })
     * 
     */
    findMany<T extends ProgressFindManyArgs>(args?: SelectSubset<T, ProgressFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProgressPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Progress.
     * @param {ProgressCreateArgs} args - Arguments to create a Progress.
     * @example
     * // Create one Progress
     * const Progress = await prisma.progress.create({
     *   data: {
     *     // ... data to create a Progress
     *   }
     * })
     * 
     */
    create<T extends ProgressCreateArgs>(args: SelectSubset<T, ProgressCreateArgs<ExtArgs>>): Prisma__ProgressClient<$Result.GetResult<Prisma.$ProgressPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Progresses.
     * @param {ProgressCreateManyArgs} args - Arguments to create many Progresses.
     * @example
     * // Create many Progresses
     * const progress = await prisma.progress.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProgressCreateManyArgs>(args?: SelectSubset<T, ProgressCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Progresses and returns the data saved in the database.
     * @param {ProgressCreateManyAndReturnArgs} args - Arguments to create many Progresses.
     * @example
     * // Create many Progresses
     * const progress = await prisma.progress.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Progresses and only return the `progress_id`
     * const progressWithProgress_idOnly = await prisma.progress.createManyAndReturn({ 
     *   select: { progress_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProgressCreateManyAndReturnArgs>(args?: SelectSubset<T, ProgressCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProgressPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Progress.
     * @param {ProgressDeleteArgs} args - Arguments to delete one Progress.
     * @example
     * // Delete one Progress
     * const Progress = await prisma.progress.delete({
     *   where: {
     *     // ... filter to delete one Progress
     *   }
     * })
     * 
     */
    delete<T extends ProgressDeleteArgs>(args: SelectSubset<T, ProgressDeleteArgs<ExtArgs>>): Prisma__ProgressClient<$Result.GetResult<Prisma.$ProgressPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Progress.
     * @param {ProgressUpdateArgs} args - Arguments to update one Progress.
     * @example
     * // Update one Progress
     * const progress = await prisma.progress.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProgressUpdateArgs>(args: SelectSubset<T, ProgressUpdateArgs<ExtArgs>>): Prisma__ProgressClient<$Result.GetResult<Prisma.$ProgressPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Progresses.
     * @param {ProgressDeleteManyArgs} args - Arguments to filter Progresses to delete.
     * @example
     * // Delete a few Progresses
     * const { count } = await prisma.progress.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProgressDeleteManyArgs>(args?: SelectSubset<T, ProgressDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Progresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProgressUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Progresses
     * const progress = await prisma.progress.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProgressUpdateManyArgs>(args: SelectSubset<T, ProgressUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Progress.
     * @param {ProgressUpsertArgs} args - Arguments to update or create a Progress.
     * @example
     * // Update or create a Progress
     * const progress = await prisma.progress.upsert({
     *   create: {
     *     // ... data to create a Progress
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Progress we want to update
     *   }
     * })
     */
    upsert<T extends ProgressUpsertArgs>(args: SelectSubset<T, ProgressUpsertArgs<ExtArgs>>): Prisma__ProgressClient<$Result.GetResult<Prisma.$ProgressPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Progresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProgressCountArgs} args - Arguments to filter Progresses to count.
     * @example
     * // Count the number of Progresses
     * const count = await prisma.progress.count({
     *   where: {
     *     // ... the filter for the Progresses we want to count
     *   }
     * })
    **/
    count<T extends ProgressCountArgs>(
      args?: Subset<T, ProgressCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProgressCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Progress.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProgressAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProgressAggregateArgs>(args: Subset<T, ProgressAggregateArgs>): Prisma.PrismaPromise<GetProgressAggregateType<T>>

    /**
     * Group by Progress.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProgressGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProgressGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProgressGroupByArgs['orderBy'] }
        : { orderBy?: ProgressGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProgressGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProgressGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Progress model
   */
  readonly fields: ProgressFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Progress.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProgressClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    course<T extends CoursesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CoursesDefaultArgs<ExtArgs>>): Prisma__CoursesClient<$Result.GetResult<Prisma.$CoursesPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    lesson<T extends LessonsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LessonsDefaultArgs<ExtArgs>>): Prisma__LessonsClient<$Result.GetResult<Prisma.$LessonsPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Progress model
   */ 
  interface ProgressFieldRefs {
    readonly progress_id: FieldRef<"Progress", 'String'>
    readonly user_id: FieldRef<"Progress", 'String'>
    readonly course_id: FieldRef<"Progress", 'String'>
    readonly lesson_id: FieldRef<"Progress", 'String'>
    readonly is_complete: FieldRef<"Progress", 'Boolean'>
    readonly updated_at: FieldRef<"Progress", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Progress findUnique
   */
  export type ProgressFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Progress
     */
    select?: ProgressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgressInclude<ExtArgs> | null
    /**
     * Filter, which Progress to fetch.
     */
    where: ProgressWhereUniqueInput
  }

  /**
   * Progress findUniqueOrThrow
   */
  export type ProgressFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Progress
     */
    select?: ProgressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgressInclude<ExtArgs> | null
    /**
     * Filter, which Progress to fetch.
     */
    where: ProgressWhereUniqueInput
  }

  /**
   * Progress findFirst
   */
  export type ProgressFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Progress
     */
    select?: ProgressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgressInclude<ExtArgs> | null
    /**
     * Filter, which Progress to fetch.
     */
    where?: ProgressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Progresses to fetch.
     */
    orderBy?: ProgressOrderByWithRelationInput | ProgressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Progresses.
     */
    cursor?: ProgressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Progresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Progresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Progresses.
     */
    distinct?: ProgressScalarFieldEnum | ProgressScalarFieldEnum[]
  }

  /**
   * Progress findFirstOrThrow
   */
  export type ProgressFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Progress
     */
    select?: ProgressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgressInclude<ExtArgs> | null
    /**
     * Filter, which Progress to fetch.
     */
    where?: ProgressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Progresses to fetch.
     */
    orderBy?: ProgressOrderByWithRelationInput | ProgressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Progresses.
     */
    cursor?: ProgressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Progresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Progresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Progresses.
     */
    distinct?: ProgressScalarFieldEnum | ProgressScalarFieldEnum[]
  }

  /**
   * Progress findMany
   */
  export type ProgressFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Progress
     */
    select?: ProgressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgressInclude<ExtArgs> | null
    /**
     * Filter, which Progresses to fetch.
     */
    where?: ProgressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Progresses to fetch.
     */
    orderBy?: ProgressOrderByWithRelationInput | ProgressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Progresses.
     */
    cursor?: ProgressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Progresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Progresses.
     */
    skip?: number
    distinct?: ProgressScalarFieldEnum | ProgressScalarFieldEnum[]
  }

  /**
   * Progress create
   */
  export type ProgressCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Progress
     */
    select?: ProgressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgressInclude<ExtArgs> | null
    /**
     * The data needed to create a Progress.
     */
    data: XOR<ProgressCreateInput, ProgressUncheckedCreateInput>
  }

  /**
   * Progress createMany
   */
  export type ProgressCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Progresses.
     */
    data: ProgressCreateManyInput | ProgressCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Progress createManyAndReturn
   */
  export type ProgressCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Progress
     */
    select?: ProgressSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Progresses.
     */
    data: ProgressCreateManyInput | ProgressCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgressIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Progress update
   */
  export type ProgressUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Progress
     */
    select?: ProgressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgressInclude<ExtArgs> | null
    /**
     * The data needed to update a Progress.
     */
    data: XOR<ProgressUpdateInput, ProgressUncheckedUpdateInput>
    /**
     * Choose, which Progress to update.
     */
    where: ProgressWhereUniqueInput
  }

  /**
   * Progress updateMany
   */
  export type ProgressUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Progresses.
     */
    data: XOR<ProgressUpdateManyMutationInput, ProgressUncheckedUpdateManyInput>
    /**
     * Filter which Progresses to update
     */
    where?: ProgressWhereInput
  }

  /**
   * Progress upsert
   */
  export type ProgressUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Progress
     */
    select?: ProgressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgressInclude<ExtArgs> | null
    /**
     * The filter to search for the Progress to update in case it exists.
     */
    where: ProgressWhereUniqueInput
    /**
     * In case the Progress found by the `where` argument doesn't exist, create a new Progress with this data.
     */
    create: XOR<ProgressCreateInput, ProgressUncheckedCreateInput>
    /**
     * In case the Progress was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProgressUpdateInput, ProgressUncheckedUpdateInput>
  }

  /**
   * Progress delete
   */
  export type ProgressDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Progress
     */
    select?: ProgressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgressInclude<ExtArgs> | null
    /**
     * Filter which Progress to delete.
     */
    where: ProgressWhereUniqueInput
  }

  /**
   * Progress deleteMany
   */
  export type ProgressDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Progresses to delete
     */
    where?: ProgressWhereInput
  }

  /**
   * Progress without action
   */
  export type ProgressDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Progress
     */
    select?: ProgressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProgressInclude<ExtArgs> | null
  }


  /**
   * Model Discussions
   */

  export type AggregateDiscussions = {
    _count: DiscussionsCountAggregateOutputType | null
    _min: DiscussionsMinAggregateOutputType | null
    _max: DiscussionsMaxAggregateOutputType | null
  }

  export type DiscussionsMinAggregateOutputType = {
    discussion_id: string | null
    course_id: string | null
    user_id: string | null
    title: string | null
    content: string | null
    created_at: Date | null
  }

  export type DiscussionsMaxAggregateOutputType = {
    discussion_id: string | null
    course_id: string | null
    user_id: string | null
    title: string | null
    content: string | null
    created_at: Date | null
  }

  export type DiscussionsCountAggregateOutputType = {
    discussion_id: number
    course_id: number
    user_id: number
    title: number
    content: number
    created_at: number
    _all: number
  }


  export type DiscussionsMinAggregateInputType = {
    discussion_id?: true
    course_id?: true
    user_id?: true
    title?: true
    content?: true
    created_at?: true
  }

  export type DiscussionsMaxAggregateInputType = {
    discussion_id?: true
    course_id?: true
    user_id?: true
    title?: true
    content?: true
    created_at?: true
  }

  export type DiscussionsCountAggregateInputType = {
    discussion_id?: true
    course_id?: true
    user_id?: true
    title?: true
    content?: true
    created_at?: true
    _all?: true
  }

  export type DiscussionsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Discussions to aggregate.
     */
    where?: DiscussionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Discussions to fetch.
     */
    orderBy?: DiscussionsOrderByWithRelationInput | DiscussionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DiscussionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Discussions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Discussions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Discussions
    **/
    _count?: true | DiscussionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DiscussionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DiscussionsMaxAggregateInputType
  }

  export type GetDiscussionsAggregateType<T extends DiscussionsAggregateArgs> = {
        [P in keyof T & keyof AggregateDiscussions]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDiscussions[P]>
      : GetScalarType<T[P], AggregateDiscussions[P]>
  }




  export type DiscussionsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DiscussionsWhereInput
    orderBy?: DiscussionsOrderByWithAggregationInput | DiscussionsOrderByWithAggregationInput[]
    by: DiscussionsScalarFieldEnum[] | DiscussionsScalarFieldEnum
    having?: DiscussionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DiscussionsCountAggregateInputType | true
    _min?: DiscussionsMinAggregateInputType
    _max?: DiscussionsMaxAggregateInputType
  }

  export type DiscussionsGroupByOutputType = {
    discussion_id: string
    course_id: string
    user_id: string
    title: string
    content: string
    created_at: Date
    _count: DiscussionsCountAggregateOutputType | null
    _min: DiscussionsMinAggregateOutputType | null
    _max: DiscussionsMaxAggregateOutputType | null
  }

  type GetDiscussionsGroupByPayload<T extends DiscussionsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DiscussionsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DiscussionsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DiscussionsGroupByOutputType[P]>
            : GetScalarType<T[P], DiscussionsGroupByOutputType[P]>
        }
      >
    >


  export type DiscussionsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    discussion_id?: boolean
    course_id?: boolean
    user_id?: boolean
    title?: boolean
    content?: boolean
    created_at?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    course?: boolean | CoursesDefaultArgs<ExtArgs>
    comments?: boolean | Discussions$commentsArgs<ExtArgs>
    _count?: boolean | DiscussionsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["discussions"]>

  export type DiscussionsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    discussion_id?: boolean
    course_id?: boolean
    user_id?: boolean
    title?: boolean
    content?: boolean
    created_at?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    course?: boolean | CoursesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["discussions"]>

  export type DiscussionsSelectScalar = {
    discussion_id?: boolean
    course_id?: boolean
    user_id?: boolean
    title?: boolean
    content?: boolean
    created_at?: boolean
  }

  export type DiscussionsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    course?: boolean | CoursesDefaultArgs<ExtArgs>
    comments?: boolean | Discussions$commentsArgs<ExtArgs>
    _count?: boolean | DiscussionsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DiscussionsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    course?: boolean | CoursesDefaultArgs<ExtArgs>
  }

  export type $DiscussionsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Discussions"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      course: Prisma.$CoursesPayload<ExtArgs>
      comments: Prisma.$CommentsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      discussion_id: string
      course_id: string
      user_id: string
      title: string
      content: string
      created_at: Date
    }, ExtArgs["result"]["discussions"]>
    composites: {}
  }

  type DiscussionsGetPayload<S extends boolean | null | undefined | DiscussionsDefaultArgs> = $Result.GetResult<Prisma.$DiscussionsPayload, S>

  type DiscussionsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DiscussionsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DiscussionsCountAggregateInputType | true
    }

  export interface DiscussionsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Discussions'], meta: { name: 'Discussions' } }
    /**
     * Find zero or one Discussions that matches the filter.
     * @param {DiscussionsFindUniqueArgs} args - Arguments to find a Discussions
     * @example
     * // Get one Discussions
     * const discussions = await prisma.discussions.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DiscussionsFindUniqueArgs>(args: SelectSubset<T, DiscussionsFindUniqueArgs<ExtArgs>>): Prisma__DiscussionsClient<$Result.GetResult<Prisma.$DiscussionsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Discussions that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DiscussionsFindUniqueOrThrowArgs} args - Arguments to find a Discussions
     * @example
     * // Get one Discussions
     * const discussions = await prisma.discussions.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DiscussionsFindUniqueOrThrowArgs>(args: SelectSubset<T, DiscussionsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DiscussionsClient<$Result.GetResult<Prisma.$DiscussionsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Discussions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscussionsFindFirstArgs} args - Arguments to find a Discussions
     * @example
     * // Get one Discussions
     * const discussions = await prisma.discussions.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DiscussionsFindFirstArgs>(args?: SelectSubset<T, DiscussionsFindFirstArgs<ExtArgs>>): Prisma__DiscussionsClient<$Result.GetResult<Prisma.$DiscussionsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Discussions that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscussionsFindFirstOrThrowArgs} args - Arguments to find a Discussions
     * @example
     * // Get one Discussions
     * const discussions = await prisma.discussions.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DiscussionsFindFirstOrThrowArgs>(args?: SelectSubset<T, DiscussionsFindFirstOrThrowArgs<ExtArgs>>): Prisma__DiscussionsClient<$Result.GetResult<Prisma.$DiscussionsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Discussions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscussionsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Discussions
     * const discussions = await prisma.discussions.findMany()
     * 
     * // Get first 10 Discussions
     * const discussions = await prisma.discussions.findMany({ take: 10 })
     * 
     * // Only select the `discussion_id`
     * const discussionsWithDiscussion_idOnly = await prisma.discussions.findMany({ select: { discussion_id: true } })
     * 
     */
    findMany<T extends DiscussionsFindManyArgs>(args?: SelectSubset<T, DiscussionsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DiscussionsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Discussions.
     * @param {DiscussionsCreateArgs} args - Arguments to create a Discussions.
     * @example
     * // Create one Discussions
     * const Discussions = await prisma.discussions.create({
     *   data: {
     *     // ... data to create a Discussions
     *   }
     * })
     * 
     */
    create<T extends DiscussionsCreateArgs>(args: SelectSubset<T, DiscussionsCreateArgs<ExtArgs>>): Prisma__DiscussionsClient<$Result.GetResult<Prisma.$DiscussionsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Discussions.
     * @param {DiscussionsCreateManyArgs} args - Arguments to create many Discussions.
     * @example
     * // Create many Discussions
     * const discussions = await prisma.discussions.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DiscussionsCreateManyArgs>(args?: SelectSubset<T, DiscussionsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Discussions and returns the data saved in the database.
     * @param {DiscussionsCreateManyAndReturnArgs} args - Arguments to create many Discussions.
     * @example
     * // Create many Discussions
     * const discussions = await prisma.discussions.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Discussions and only return the `discussion_id`
     * const discussionsWithDiscussion_idOnly = await prisma.discussions.createManyAndReturn({ 
     *   select: { discussion_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DiscussionsCreateManyAndReturnArgs>(args?: SelectSubset<T, DiscussionsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DiscussionsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Discussions.
     * @param {DiscussionsDeleteArgs} args - Arguments to delete one Discussions.
     * @example
     * // Delete one Discussions
     * const Discussions = await prisma.discussions.delete({
     *   where: {
     *     // ... filter to delete one Discussions
     *   }
     * })
     * 
     */
    delete<T extends DiscussionsDeleteArgs>(args: SelectSubset<T, DiscussionsDeleteArgs<ExtArgs>>): Prisma__DiscussionsClient<$Result.GetResult<Prisma.$DiscussionsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Discussions.
     * @param {DiscussionsUpdateArgs} args - Arguments to update one Discussions.
     * @example
     * // Update one Discussions
     * const discussions = await prisma.discussions.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DiscussionsUpdateArgs>(args: SelectSubset<T, DiscussionsUpdateArgs<ExtArgs>>): Prisma__DiscussionsClient<$Result.GetResult<Prisma.$DiscussionsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Discussions.
     * @param {DiscussionsDeleteManyArgs} args - Arguments to filter Discussions to delete.
     * @example
     * // Delete a few Discussions
     * const { count } = await prisma.discussions.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DiscussionsDeleteManyArgs>(args?: SelectSubset<T, DiscussionsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Discussions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscussionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Discussions
     * const discussions = await prisma.discussions.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DiscussionsUpdateManyArgs>(args: SelectSubset<T, DiscussionsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Discussions.
     * @param {DiscussionsUpsertArgs} args - Arguments to update or create a Discussions.
     * @example
     * // Update or create a Discussions
     * const discussions = await prisma.discussions.upsert({
     *   create: {
     *     // ... data to create a Discussions
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Discussions we want to update
     *   }
     * })
     */
    upsert<T extends DiscussionsUpsertArgs>(args: SelectSubset<T, DiscussionsUpsertArgs<ExtArgs>>): Prisma__DiscussionsClient<$Result.GetResult<Prisma.$DiscussionsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Discussions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscussionsCountArgs} args - Arguments to filter Discussions to count.
     * @example
     * // Count the number of Discussions
     * const count = await prisma.discussions.count({
     *   where: {
     *     // ... the filter for the Discussions we want to count
     *   }
     * })
    **/
    count<T extends DiscussionsCountArgs>(
      args?: Subset<T, DiscussionsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DiscussionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Discussions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscussionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DiscussionsAggregateArgs>(args: Subset<T, DiscussionsAggregateArgs>): Prisma.PrismaPromise<GetDiscussionsAggregateType<T>>

    /**
     * Group by Discussions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiscussionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DiscussionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DiscussionsGroupByArgs['orderBy'] }
        : { orderBy?: DiscussionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DiscussionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDiscussionsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Discussions model
   */
  readonly fields: DiscussionsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Discussions.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DiscussionsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    course<T extends CoursesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CoursesDefaultArgs<ExtArgs>>): Prisma__CoursesClient<$Result.GetResult<Prisma.$CoursesPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    comments<T extends Discussions$commentsArgs<ExtArgs> = {}>(args?: Subset<T, Discussions$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentsPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Discussions model
   */ 
  interface DiscussionsFieldRefs {
    readonly discussion_id: FieldRef<"Discussions", 'String'>
    readonly course_id: FieldRef<"Discussions", 'String'>
    readonly user_id: FieldRef<"Discussions", 'String'>
    readonly title: FieldRef<"Discussions", 'String'>
    readonly content: FieldRef<"Discussions", 'String'>
    readonly created_at: FieldRef<"Discussions", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Discussions findUnique
   */
  export type DiscussionsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discussions
     */
    select?: DiscussionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionsInclude<ExtArgs> | null
    /**
     * Filter, which Discussions to fetch.
     */
    where: DiscussionsWhereUniqueInput
  }

  /**
   * Discussions findUniqueOrThrow
   */
  export type DiscussionsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discussions
     */
    select?: DiscussionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionsInclude<ExtArgs> | null
    /**
     * Filter, which Discussions to fetch.
     */
    where: DiscussionsWhereUniqueInput
  }

  /**
   * Discussions findFirst
   */
  export type DiscussionsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discussions
     */
    select?: DiscussionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionsInclude<ExtArgs> | null
    /**
     * Filter, which Discussions to fetch.
     */
    where?: DiscussionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Discussions to fetch.
     */
    orderBy?: DiscussionsOrderByWithRelationInput | DiscussionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Discussions.
     */
    cursor?: DiscussionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Discussions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Discussions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Discussions.
     */
    distinct?: DiscussionsScalarFieldEnum | DiscussionsScalarFieldEnum[]
  }

  /**
   * Discussions findFirstOrThrow
   */
  export type DiscussionsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discussions
     */
    select?: DiscussionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionsInclude<ExtArgs> | null
    /**
     * Filter, which Discussions to fetch.
     */
    where?: DiscussionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Discussions to fetch.
     */
    orderBy?: DiscussionsOrderByWithRelationInput | DiscussionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Discussions.
     */
    cursor?: DiscussionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Discussions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Discussions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Discussions.
     */
    distinct?: DiscussionsScalarFieldEnum | DiscussionsScalarFieldEnum[]
  }

  /**
   * Discussions findMany
   */
  export type DiscussionsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discussions
     */
    select?: DiscussionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionsInclude<ExtArgs> | null
    /**
     * Filter, which Discussions to fetch.
     */
    where?: DiscussionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Discussions to fetch.
     */
    orderBy?: DiscussionsOrderByWithRelationInput | DiscussionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Discussions.
     */
    cursor?: DiscussionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Discussions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Discussions.
     */
    skip?: number
    distinct?: DiscussionsScalarFieldEnum | DiscussionsScalarFieldEnum[]
  }

  /**
   * Discussions create
   */
  export type DiscussionsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discussions
     */
    select?: DiscussionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionsInclude<ExtArgs> | null
    /**
     * The data needed to create a Discussions.
     */
    data: XOR<DiscussionsCreateInput, DiscussionsUncheckedCreateInput>
  }

  /**
   * Discussions createMany
   */
  export type DiscussionsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Discussions.
     */
    data: DiscussionsCreateManyInput | DiscussionsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Discussions createManyAndReturn
   */
  export type DiscussionsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discussions
     */
    select?: DiscussionsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Discussions.
     */
    data: DiscussionsCreateManyInput | DiscussionsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Discussions update
   */
  export type DiscussionsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discussions
     */
    select?: DiscussionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionsInclude<ExtArgs> | null
    /**
     * The data needed to update a Discussions.
     */
    data: XOR<DiscussionsUpdateInput, DiscussionsUncheckedUpdateInput>
    /**
     * Choose, which Discussions to update.
     */
    where: DiscussionsWhereUniqueInput
  }

  /**
   * Discussions updateMany
   */
  export type DiscussionsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Discussions.
     */
    data: XOR<DiscussionsUpdateManyMutationInput, DiscussionsUncheckedUpdateManyInput>
    /**
     * Filter which Discussions to update
     */
    where?: DiscussionsWhereInput
  }

  /**
   * Discussions upsert
   */
  export type DiscussionsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discussions
     */
    select?: DiscussionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionsInclude<ExtArgs> | null
    /**
     * The filter to search for the Discussions to update in case it exists.
     */
    where: DiscussionsWhereUniqueInput
    /**
     * In case the Discussions found by the `where` argument doesn't exist, create a new Discussions with this data.
     */
    create: XOR<DiscussionsCreateInput, DiscussionsUncheckedCreateInput>
    /**
     * In case the Discussions was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DiscussionsUpdateInput, DiscussionsUncheckedUpdateInput>
  }

  /**
   * Discussions delete
   */
  export type DiscussionsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discussions
     */
    select?: DiscussionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionsInclude<ExtArgs> | null
    /**
     * Filter which Discussions to delete.
     */
    where: DiscussionsWhereUniqueInput
  }

  /**
   * Discussions deleteMany
   */
  export type DiscussionsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Discussions to delete
     */
    where?: DiscussionsWhereInput
  }

  /**
   * Discussions.comments
   */
  export type Discussions$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comments
     */
    select?: CommentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentsInclude<ExtArgs> | null
    where?: CommentsWhereInput
    orderBy?: CommentsOrderByWithRelationInput | CommentsOrderByWithRelationInput[]
    cursor?: CommentsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentsScalarFieldEnum | CommentsScalarFieldEnum[]
  }

  /**
   * Discussions without action
   */
  export type DiscussionsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discussions
     */
    select?: DiscussionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiscussionsInclude<ExtArgs> | null
  }


  /**
   * Model Comments
   */

  export type AggregateComments = {
    _count: CommentsCountAggregateOutputType | null
    _min: CommentsMinAggregateOutputType | null
    _max: CommentsMaxAggregateOutputType | null
  }

  export type CommentsMinAggregateOutputType = {
    comment_id: string | null
    discussion_id: string | null
    user_id: string | null
    content: string | null
    created_at: Date | null
  }

  export type CommentsMaxAggregateOutputType = {
    comment_id: string | null
    discussion_id: string | null
    user_id: string | null
    content: string | null
    created_at: Date | null
  }

  export type CommentsCountAggregateOutputType = {
    comment_id: number
    discussion_id: number
    user_id: number
    content: number
    created_at: number
    _all: number
  }


  export type CommentsMinAggregateInputType = {
    comment_id?: true
    discussion_id?: true
    user_id?: true
    content?: true
    created_at?: true
  }

  export type CommentsMaxAggregateInputType = {
    comment_id?: true
    discussion_id?: true
    user_id?: true
    content?: true
    created_at?: true
  }

  export type CommentsCountAggregateInputType = {
    comment_id?: true
    discussion_id?: true
    user_id?: true
    content?: true
    created_at?: true
    _all?: true
  }

  export type CommentsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comments to aggregate.
     */
    where?: CommentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentsOrderByWithRelationInput | CommentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CommentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Comments
    **/
    _count?: true | CommentsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommentsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommentsMaxAggregateInputType
  }

  export type GetCommentsAggregateType<T extends CommentsAggregateArgs> = {
        [P in keyof T & keyof AggregateComments]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComments[P]>
      : GetScalarType<T[P], AggregateComments[P]>
  }




  export type CommentsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentsWhereInput
    orderBy?: CommentsOrderByWithAggregationInput | CommentsOrderByWithAggregationInput[]
    by: CommentsScalarFieldEnum[] | CommentsScalarFieldEnum
    having?: CommentsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommentsCountAggregateInputType | true
    _min?: CommentsMinAggregateInputType
    _max?: CommentsMaxAggregateInputType
  }

  export type CommentsGroupByOutputType = {
    comment_id: string
    discussion_id: string
    user_id: string
    content: string
    created_at: Date
    _count: CommentsCountAggregateOutputType | null
    _min: CommentsMinAggregateOutputType | null
    _max: CommentsMaxAggregateOutputType | null
  }

  type GetCommentsGroupByPayload<T extends CommentsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommentsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommentsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommentsGroupByOutputType[P]>
            : GetScalarType<T[P], CommentsGroupByOutputType[P]>
        }
      >
    >


  export type CommentsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    comment_id?: boolean
    discussion_id?: boolean
    user_id?: boolean
    content?: boolean
    created_at?: boolean
    discussion?: boolean | DiscussionsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["comments"]>

  export type CommentsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    comment_id?: boolean
    discussion_id?: boolean
    user_id?: boolean
    content?: boolean
    created_at?: boolean
    discussion?: boolean | DiscussionsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["comments"]>

  export type CommentsSelectScalar = {
    comment_id?: boolean
    discussion_id?: boolean
    user_id?: boolean
    content?: boolean
    created_at?: boolean
  }

  export type CommentsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    discussion?: boolean | DiscussionsDefaultArgs<ExtArgs>
  }
  export type CommentsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    discussion?: boolean | DiscussionsDefaultArgs<ExtArgs>
  }

  export type $CommentsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Comments"
    objects: {
      discussion: Prisma.$DiscussionsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      comment_id: string
      discussion_id: string
      user_id: string
      content: string
      created_at: Date
    }, ExtArgs["result"]["comments"]>
    composites: {}
  }

  type CommentsGetPayload<S extends boolean | null | undefined | CommentsDefaultArgs> = $Result.GetResult<Prisma.$CommentsPayload, S>

  type CommentsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CommentsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CommentsCountAggregateInputType | true
    }

  export interface CommentsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Comments'], meta: { name: 'Comments' } }
    /**
     * Find zero or one Comments that matches the filter.
     * @param {CommentsFindUniqueArgs} args - Arguments to find a Comments
     * @example
     * // Get one Comments
     * const comments = await prisma.comments.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CommentsFindUniqueArgs>(args: SelectSubset<T, CommentsFindUniqueArgs<ExtArgs>>): Prisma__CommentsClient<$Result.GetResult<Prisma.$CommentsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Comments that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CommentsFindUniqueOrThrowArgs} args - Arguments to find a Comments
     * @example
     * // Get one Comments
     * const comments = await prisma.comments.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CommentsFindUniqueOrThrowArgs>(args: SelectSubset<T, CommentsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CommentsClient<$Result.GetResult<Prisma.$CommentsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentsFindFirstArgs} args - Arguments to find a Comments
     * @example
     * // Get one Comments
     * const comments = await prisma.comments.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CommentsFindFirstArgs>(args?: SelectSubset<T, CommentsFindFirstArgs<ExtArgs>>): Prisma__CommentsClient<$Result.GetResult<Prisma.$CommentsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Comments that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentsFindFirstOrThrowArgs} args - Arguments to find a Comments
     * @example
     * // Get one Comments
     * const comments = await prisma.comments.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CommentsFindFirstOrThrowArgs>(args?: SelectSubset<T, CommentsFindFirstOrThrowArgs<ExtArgs>>): Prisma__CommentsClient<$Result.GetResult<Prisma.$CommentsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Comments
     * const comments = await prisma.comments.findMany()
     * 
     * // Get first 10 Comments
     * const comments = await prisma.comments.findMany({ take: 10 })
     * 
     * // Only select the `comment_id`
     * const commentsWithComment_idOnly = await prisma.comments.findMany({ select: { comment_id: true } })
     * 
     */
    findMany<T extends CommentsFindManyArgs>(args?: SelectSubset<T, CommentsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Comments.
     * @param {CommentsCreateArgs} args - Arguments to create a Comments.
     * @example
     * // Create one Comments
     * const Comments = await prisma.comments.create({
     *   data: {
     *     // ... data to create a Comments
     *   }
     * })
     * 
     */
    create<T extends CommentsCreateArgs>(args: SelectSubset<T, CommentsCreateArgs<ExtArgs>>): Prisma__CommentsClient<$Result.GetResult<Prisma.$CommentsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Comments.
     * @param {CommentsCreateManyArgs} args - Arguments to create many Comments.
     * @example
     * // Create many Comments
     * const comments = await prisma.comments.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CommentsCreateManyArgs>(args?: SelectSubset<T, CommentsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Comments and returns the data saved in the database.
     * @param {CommentsCreateManyAndReturnArgs} args - Arguments to create many Comments.
     * @example
     * // Create many Comments
     * const comments = await prisma.comments.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Comments and only return the `comment_id`
     * const commentsWithComment_idOnly = await prisma.comments.createManyAndReturn({ 
     *   select: { comment_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CommentsCreateManyAndReturnArgs>(args?: SelectSubset<T, CommentsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Comments.
     * @param {CommentsDeleteArgs} args - Arguments to delete one Comments.
     * @example
     * // Delete one Comments
     * const Comments = await prisma.comments.delete({
     *   where: {
     *     // ... filter to delete one Comments
     *   }
     * })
     * 
     */
    delete<T extends CommentsDeleteArgs>(args: SelectSubset<T, CommentsDeleteArgs<ExtArgs>>): Prisma__CommentsClient<$Result.GetResult<Prisma.$CommentsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Comments.
     * @param {CommentsUpdateArgs} args - Arguments to update one Comments.
     * @example
     * // Update one Comments
     * const comments = await prisma.comments.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CommentsUpdateArgs>(args: SelectSubset<T, CommentsUpdateArgs<ExtArgs>>): Prisma__CommentsClient<$Result.GetResult<Prisma.$CommentsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Comments.
     * @param {CommentsDeleteManyArgs} args - Arguments to filter Comments to delete.
     * @example
     * // Delete a few Comments
     * const { count } = await prisma.comments.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CommentsDeleteManyArgs>(args?: SelectSubset<T, CommentsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Comments
     * const comments = await prisma.comments.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CommentsUpdateManyArgs>(args: SelectSubset<T, CommentsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Comments.
     * @param {CommentsUpsertArgs} args - Arguments to update or create a Comments.
     * @example
     * // Update or create a Comments
     * const comments = await prisma.comments.upsert({
     *   create: {
     *     // ... data to create a Comments
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comments we want to update
     *   }
     * })
     */
    upsert<T extends CommentsUpsertArgs>(args: SelectSubset<T, CommentsUpsertArgs<ExtArgs>>): Prisma__CommentsClient<$Result.GetResult<Prisma.$CommentsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentsCountArgs} args - Arguments to filter Comments to count.
     * @example
     * // Count the number of Comments
     * const count = await prisma.comments.count({
     *   where: {
     *     // ... the filter for the Comments we want to count
     *   }
     * })
    **/
    count<T extends CommentsCountArgs>(
      args?: Subset<T, CommentsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommentsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommentsAggregateArgs>(args: Subset<T, CommentsAggregateArgs>): Prisma.PrismaPromise<GetCommentsAggregateType<T>>

    /**
     * Group by Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommentsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommentsGroupByArgs['orderBy'] }
        : { orderBy?: CommentsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommentsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommentsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Comments model
   */
  readonly fields: CommentsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Comments.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CommentsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    discussion<T extends DiscussionsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DiscussionsDefaultArgs<ExtArgs>>): Prisma__DiscussionsClient<$Result.GetResult<Prisma.$DiscussionsPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Comments model
   */ 
  interface CommentsFieldRefs {
    readonly comment_id: FieldRef<"Comments", 'String'>
    readonly discussion_id: FieldRef<"Comments", 'String'>
    readonly user_id: FieldRef<"Comments", 'String'>
    readonly content: FieldRef<"Comments", 'String'>
    readonly created_at: FieldRef<"Comments", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Comments findUnique
   */
  export type CommentsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comments
     */
    select?: CommentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentsInclude<ExtArgs> | null
    /**
     * Filter, which Comments to fetch.
     */
    where: CommentsWhereUniqueInput
  }

  /**
   * Comments findUniqueOrThrow
   */
  export type CommentsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comments
     */
    select?: CommentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentsInclude<ExtArgs> | null
    /**
     * Filter, which Comments to fetch.
     */
    where: CommentsWhereUniqueInput
  }

  /**
   * Comments findFirst
   */
  export type CommentsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comments
     */
    select?: CommentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentsInclude<ExtArgs> | null
    /**
     * Filter, which Comments to fetch.
     */
    where?: CommentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentsOrderByWithRelationInput | CommentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentsScalarFieldEnum | CommentsScalarFieldEnum[]
  }

  /**
   * Comments findFirstOrThrow
   */
  export type CommentsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comments
     */
    select?: CommentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentsInclude<ExtArgs> | null
    /**
     * Filter, which Comments to fetch.
     */
    where?: CommentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentsOrderByWithRelationInput | CommentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentsScalarFieldEnum | CommentsScalarFieldEnum[]
  }

  /**
   * Comments findMany
   */
  export type CommentsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comments
     */
    select?: CommentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentsInclude<ExtArgs> | null
    /**
     * Filter, which Comments to fetch.
     */
    where?: CommentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentsOrderByWithRelationInput | CommentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Comments.
     */
    cursor?: CommentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    distinct?: CommentsScalarFieldEnum | CommentsScalarFieldEnum[]
  }

  /**
   * Comments create
   */
  export type CommentsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comments
     */
    select?: CommentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentsInclude<ExtArgs> | null
    /**
     * The data needed to create a Comments.
     */
    data: XOR<CommentsCreateInput, CommentsUncheckedCreateInput>
  }

  /**
   * Comments createMany
   */
  export type CommentsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Comments.
     */
    data: CommentsCreateManyInput | CommentsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Comments createManyAndReturn
   */
  export type CommentsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comments
     */
    select?: CommentsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Comments.
     */
    data: CommentsCreateManyInput | CommentsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Comments update
   */
  export type CommentsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comments
     */
    select?: CommentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentsInclude<ExtArgs> | null
    /**
     * The data needed to update a Comments.
     */
    data: XOR<CommentsUpdateInput, CommentsUncheckedUpdateInput>
    /**
     * Choose, which Comments to update.
     */
    where: CommentsWhereUniqueInput
  }

  /**
   * Comments updateMany
   */
  export type CommentsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Comments.
     */
    data: XOR<CommentsUpdateManyMutationInput, CommentsUncheckedUpdateManyInput>
    /**
     * Filter which Comments to update
     */
    where?: CommentsWhereInput
  }

  /**
   * Comments upsert
   */
  export type CommentsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comments
     */
    select?: CommentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentsInclude<ExtArgs> | null
    /**
     * The filter to search for the Comments to update in case it exists.
     */
    where: CommentsWhereUniqueInput
    /**
     * In case the Comments found by the `where` argument doesn't exist, create a new Comments with this data.
     */
    create: XOR<CommentsCreateInput, CommentsUncheckedCreateInput>
    /**
     * In case the Comments was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CommentsUpdateInput, CommentsUncheckedUpdateInput>
  }

  /**
   * Comments delete
   */
  export type CommentsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comments
     */
    select?: CommentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentsInclude<ExtArgs> | null
    /**
     * Filter which Comments to delete.
     */
    where: CommentsWhereUniqueInput
  }

  /**
   * Comments deleteMany
   */
  export type CommentsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comments to delete
     */
    where?: CommentsWhereInput
  }

  /**
   * Comments without action
   */
  export type CommentsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comments
     */
    select?: CommentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentsInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    user_id: 'user_id',
    username: 'username',
    email: 'email',
    password: 'password',
    role: 'role',
    createdAt: 'createdAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const EnrollmentsScalarFieldEnum: {
    enrollment_id: 'enrollment_id',
    user_id: 'user_id',
    course_id: 'course_id',
    enrolled_at: 'enrolled_at'
  };

  export type EnrollmentsScalarFieldEnum = (typeof EnrollmentsScalarFieldEnum)[keyof typeof EnrollmentsScalarFieldEnum]


  export const CoursesScalarFieldEnum: {
    course_id: 'course_id',
    title: 'title',
    description: 'description',
    category: 'category',
    createdAt: 'createdAt'
  };

  export type CoursesScalarFieldEnum = (typeof CoursesScalarFieldEnum)[keyof typeof CoursesScalarFieldEnum]


  export const CourseTeachersScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    course_id: 'course_id',
    teacher_role: 'teacher_role',
    assigned_at: 'assigned_at'
  };

  export type CourseTeachersScalarFieldEnum = (typeof CourseTeachersScalarFieldEnum)[keyof typeof CourseTeachersScalarFieldEnum]


  export const LessonsScalarFieldEnum: {
    lesson_id: 'lesson_id',
    course_id: 'course_id',
    title: 'title',
    content: 'content',
    position: 'position'
  };

  export type LessonsScalarFieldEnum = (typeof LessonsScalarFieldEnum)[keyof typeof LessonsScalarFieldEnum]


  export const QuizzesScalarFieldEnum: {
    quiz_id: 'quiz_id',
    course_id: 'course_id',
    title: 'title',
    total_questions: 'total_questions'
  };

  export type QuizzesScalarFieldEnum = (typeof QuizzesScalarFieldEnum)[keyof typeof QuizzesScalarFieldEnum]


  export const QuestionsScalarFieldEnum: {
    question_id: 'question_id',
    quiz_id: 'quiz_id',
    text: 'text',
    type: 'type'
  };

  export type QuestionsScalarFieldEnum = (typeof QuestionsScalarFieldEnum)[keyof typeof QuestionsScalarFieldEnum]


  export const OptionsScalarFieldEnum: {
    option_id: 'option_id',
    question_id: 'question_id',
    text: 'text',
    is_correct: 'is_correct'
  };

  export type OptionsScalarFieldEnum = (typeof OptionsScalarFieldEnum)[keyof typeof OptionsScalarFieldEnum]


  export const ProgressScalarFieldEnum: {
    progress_id: 'progress_id',
    user_id: 'user_id',
    course_id: 'course_id',
    lesson_id: 'lesson_id',
    is_complete: 'is_complete',
    updated_at: 'updated_at'
  };

  export type ProgressScalarFieldEnum = (typeof ProgressScalarFieldEnum)[keyof typeof ProgressScalarFieldEnum]


  export const DiscussionsScalarFieldEnum: {
    discussion_id: 'discussion_id',
    course_id: 'course_id',
    user_id: 'user_id',
    title: 'title',
    content: 'content',
    created_at: 'created_at'
  };

  export type DiscussionsScalarFieldEnum = (typeof DiscussionsScalarFieldEnum)[keyof typeof DiscussionsScalarFieldEnum]


  export const CommentsScalarFieldEnum: {
    comment_id: 'comment_id',
    discussion_id: 'discussion_id',
    user_id: 'user_id',
    content: 'content',
    created_at: 'created_at'
  };

  export type CommentsScalarFieldEnum = (typeof CommentsScalarFieldEnum)[keyof typeof CommentsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Category'
   */
  export type EnumCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Category'>
    


  /**
   * Reference to a field of type 'Category[]'
   */
  export type ListEnumCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Category[]'>
    


  /**
   * Reference to a field of type 'TeacherRole'
   */
  export type EnumTeacherRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TeacherRole'>
    


  /**
   * Reference to a field of type 'TeacherRole[]'
   */
  export type ListEnumTeacherRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TeacherRole[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'QuestionType'
   */
  export type EnumQuestionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QuestionType'>
    


  /**
   * Reference to a field of type 'QuestionType[]'
   */
  export type ListEnumQuestionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QuestionType[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    user_id?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    createdAt?: DateTimeFilter<"User"> | Date | string
    enrollments?: EnrollmentsListRelationFilter
    courseteachers?: CourseTeachersListRelationFilter
    discussions?: DiscussionsListRelationFilter
    progress?: ProgressListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    user_id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    enrollments?: EnrollmentsOrderByRelationAggregateInput
    courseteachers?: CourseTeachersOrderByRelationAggregateInput
    discussions?: DiscussionsOrderByRelationAggregateInput
    progress?: ProgressOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    user_id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    username?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    createdAt?: DateTimeFilter<"User"> | Date | string
    enrollments?: EnrollmentsListRelationFilter
    courseteachers?: CourseTeachersListRelationFilter
    discussions?: DiscussionsListRelationFilter
    progress?: ProgressListRelationFilter
  }, "user_id" | "email">

  export type UserOrderByWithAggregationInput = {
    user_id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    user_id?: StringWithAggregatesFilter<"User"> | string
    username?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    role?: EnumRoleWithAggregatesFilter<"User"> | $Enums.Role
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type EnrollmentsWhereInput = {
    AND?: EnrollmentsWhereInput | EnrollmentsWhereInput[]
    OR?: EnrollmentsWhereInput[]
    NOT?: EnrollmentsWhereInput | EnrollmentsWhereInput[]
    enrollment_id?: StringFilter<"Enrollments"> | string
    user_id?: StringFilter<"Enrollments"> | string
    course_id?: StringFilter<"Enrollments"> | string
    enrolled_at?: DateTimeFilter<"Enrollments"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    course?: XOR<CoursesScalarRelationFilter, CoursesWhereInput>
  }

  export type EnrollmentsOrderByWithRelationInput = {
    enrollment_id?: SortOrder
    user_id?: SortOrder
    course_id?: SortOrder
    enrolled_at?: SortOrder
    user?: UserOrderByWithRelationInput
    course?: CoursesOrderByWithRelationInput
  }

  export type EnrollmentsWhereUniqueInput = Prisma.AtLeast<{
    enrollment_id?: string
    user_id_course_id?: EnrollmentsUser_idCourse_idCompoundUniqueInput
    AND?: EnrollmentsWhereInput | EnrollmentsWhereInput[]
    OR?: EnrollmentsWhereInput[]
    NOT?: EnrollmentsWhereInput | EnrollmentsWhereInput[]
    user_id?: StringFilter<"Enrollments"> | string
    course_id?: StringFilter<"Enrollments"> | string
    enrolled_at?: DateTimeFilter<"Enrollments"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    course?: XOR<CoursesScalarRelationFilter, CoursesWhereInput>
  }, "enrollment_id" | "user_id_course_id">

  export type EnrollmentsOrderByWithAggregationInput = {
    enrollment_id?: SortOrder
    user_id?: SortOrder
    course_id?: SortOrder
    enrolled_at?: SortOrder
    _count?: EnrollmentsCountOrderByAggregateInput
    _max?: EnrollmentsMaxOrderByAggregateInput
    _min?: EnrollmentsMinOrderByAggregateInput
  }

  export type EnrollmentsScalarWhereWithAggregatesInput = {
    AND?: EnrollmentsScalarWhereWithAggregatesInput | EnrollmentsScalarWhereWithAggregatesInput[]
    OR?: EnrollmentsScalarWhereWithAggregatesInput[]
    NOT?: EnrollmentsScalarWhereWithAggregatesInput | EnrollmentsScalarWhereWithAggregatesInput[]
    enrollment_id?: StringWithAggregatesFilter<"Enrollments"> | string
    user_id?: StringWithAggregatesFilter<"Enrollments"> | string
    course_id?: StringWithAggregatesFilter<"Enrollments"> | string
    enrolled_at?: DateTimeWithAggregatesFilter<"Enrollments"> | Date | string
  }

  export type CoursesWhereInput = {
    AND?: CoursesWhereInput | CoursesWhereInput[]
    OR?: CoursesWhereInput[]
    NOT?: CoursesWhereInput | CoursesWhereInput[]
    course_id?: StringFilter<"Courses"> | string
    title?: StringFilter<"Courses"> | string
    description?: StringFilter<"Courses"> | string
    category?: EnumCategoryFilter<"Courses"> | $Enums.Category
    createdAt?: DateTimeFilter<"Courses"> | Date | string
    courses?: CourseTeachersListRelationFilter
    lessons?: LessonsListRelationFilter
    quizzes?: QuizzesListRelationFilter
    discussions?: DiscussionsListRelationFilter
    enrollments?: EnrollmentsListRelationFilter
    progress?: ProgressListRelationFilter
  }

  export type CoursesOrderByWithRelationInput = {
    course_id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    category?: SortOrder
    createdAt?: SortOrder
    courses?: CourseTeachersOrderByRelationAggregateInput
    lessons?: LessonsOrderByRelationAggregateInput
    quizzes?: QuizzesOrderByRelationAggregateInput
    discussions?: DiscussionsOrderByRelationAggregateInput
    enrollments?: EnrollmentsOrderByRelationAggregateInput
    progress?: ProgressOrderByRelationAggregateInput
  }

  export type CoursesWhereUniqueInput = Prisma.AtLeast<{
    course_id?: string
    AND?: CoursesWhereInput | CoursesWhereInput[]
    OR?: CoursesWhereInput[]
    NOT?: CoursesWhereInput | CoursesWhereInput[]
    title?: StringFilter<"Courses"> | string
    description?: StringFilter<"Courses"> | string
    category?: EnumCategoryFilter<"Courses"> | $Enums.Category
    createdAt?: DateTimeFilter<"Courses"> | Date | string
    courses?: CourseTeachersListRelationFilter
    lessons?: LessonsListRelationFilter
    quizzes?: QuizzesListRelationFilter
    discussions?: DiscussionsListRelationFilter
    enrollments?: EnrollmentsListRelationFilter
    progress?: ProgressListRelationFilter
  }, "course_id">

  export type CoursesOrderByWithAggregationInput = {
    course_id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    category?: SortOrder
    createdAt?: SortOrder
    _count?: CoursesCountOrderByAggregateInput
    _max?: CoursesMaxOrderByAggregateInput
    _min?: CoursesMinOrderByAggregateInput
  }

  export type CoursesScalarWhereWithAggregatesInput = {
    AND?: CoursesScalarWhereWithAggregatesInput | CoursesScalarWhereWithAggregatesInput[]
    OR?: CoursesScalarWhereWithAggregatesInput[]
    NOT?: CoursesScalarWhereWithAggregatesInput | CoursesScalarWhereWithAggregatesInput[]
    course_id?: StringWithAggregatesFilter<"Courses"> | string
    title?: StringWithAggregatesFilter<"Courses"> | string
    description?: StringWithAggregatesFilter<"Courses"> | string
    category?: EnumCategoryWithAggregatesFilter<"Courses"> | $Enums.Category
    createdAt?: DateTimeWithAggregatesFilter<"Courses"> | Date | string
  }

  export type CourseTeachersWhereInput = {
    AND?: CourseTeachersWhereInput | CourseTeachersWhereInput[]
    OR?: CourseTeachersWhereInput[]
    NOT?: CourseTeachersWhereInput | CourseTeachersWhereInput[]
    id?: StringFilter<"CourseTeachers"> | string
    user_id?: StringFilter<"CourseTeachers"> | string
    course_id?: StringFilter<"CourseTeachers"> | string
    teacher_role?: EnumTeacherRoleFilter<"CourseTeachers"> | $Enums.TeacherRole
    assigned_at?: DateTimeFilter<"CourseTeachers"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    courses?: XOR<CoursesScalarRelationFilter, CoursesWhereInput>
  }

  export type CourseTeachersOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    course_id?: SortOrder
    teacher_role?: SortOrder
    assigned_at?: SortOrder
    user?: UserOrderByWithRelationInput
    courses?: CoursesOrderByWithRelationInput
  }

  export type CourseTeachersWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    course_id_teacher_role?: CourseTeachersCourse_idTeacher_roleCompoundUniqueInput
    AND?: CourseTeachersWhereInput | CourseTeachersWhereInput[]
    OR?: CourseTeachersWhereInput[]
    NOT?: CourseTeachersWhereInput | CourseTeachersWhereInput[]
    user_id?: StringFilter<"CourseTeachers"> | string
    course_id?: StringFilter<"CourseTeachers"> | string
    teacher_role?: EnumTeacherRoleFilter<"CourseTeachers"> | $Enums.TeacherRole
    assigned_at?: DateTimeFilter<"CourseTeachers"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    courses?: XOR<CoursesScalarRelationFilter, CoursesWhereInput>
  }, "id" | "course_id_teacher_role">

  export type CourseTeachersOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    course_id?: SortOrder
    teacher_role?: SortOrder
    assigned_at?: SortOrder
    _count?: CourseTeachersCountOrderByAggregateInput
    _max?: CourseTeachersMaxOrderByAggregateInput
    _min?: CourseTeachersMinOrderByAggregateInput
  }

  export type CourseTeachersScalarWhereWithAggregatesInput = {
    AND?: CourseTeachersScalarWhereWithAggregatesInput | CourseTeachersScalarWhereWithAggregatesInput[]
    OR?: CourseTeachersScalarWhereWithAggregatesInput[]
    NOT?: CourseTeachersScalarWhereWithAggregatesInput | CourseTeachersScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CourseTeachers"> | string
    user_id?: StringWithAggregatesFilter<"CourseTeachers"> | string
    course_id?: StringWithAggregatesFilter<"CourseTeachers"> | string
    teacher_role?: EnumTeacherRoleWithAggregatesFilter<"CourseTeachers"> | $Enums.TeacherRole
    assigned_at?: DateTimeWithAggregatesFilter<"CourseTeachers"> | Date | string
  }

  export type LessonsWhereInput = {
    AND?: LessonsWhereInput | LessonsWhereInput[]
    OR?: LessonsWhereInput[]
    NOT?: LessonsWhereInput | LessonsWhereInput[]
    lesson_id?: StringFilter<"Lessons"> | string
    course_id?: StringFilter<"Lessons"> | string
    title?: StringFilter<"Lessons"> | string
    content?: StringFilter<"Lessons"> | string
    position?: IntFilter<"Lessons"> | number
    course?: XOR<CoursesScalarRelationFilter, CoursesWhereInput>
    progress?: ProgressListRelationFilter
  }

  export type LessonsOrderByWithRelationInput = {
    lesson_id?: SortOrder
    course_id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    position?: SortOrder
    course?: CoursesOrderByWithRelationInput
    progress?: ProgressOrderByRelationAggregateInput
  }

  export type LessonsWhereUniqueInput = Prisma.AtLeast<{
    lesson_id?: string
    AND?: LessonsWhereInput | LessonsWhereInput[]
    OR?: LessonsWhereInput[]
    NOT?: LessonsWhereInput | LessonsWhereInput[]
    course_id?: StringFilter<"Lessons"> | string
    title?: StringFilter<"Lessons"> | string
    content?: StringFilter<"Lessons"> | string
    position?: IntFilter<"Lessons"> | number
    course?: XOR<CoursesScalarRelationFilter, CoursesWhereInput>
    progress?: ProgressListRelationFilter
  }, "lesson_id">

  export type LessonsOrderByWithAggregationInput = {
    lesson_id?: SortOrder
    course_id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    position?: SortOrder
    _count?: LessonsCountOrderByAggregateInput
    _avg?: LessonsAvgOrderByAggregateInput
    _max?: LessonsMaxOrderByAggregateInput
    _min?: LessonsMinOrderByAggregateInput
    _sum?: LessonsSumOrderByAggregateInput
  }

  export type LessonsScalarWhereWithAggregatesInput = {
    AND?: LessonsScalarWhereWithAggregatesInput | LessonsScalarWhereWithAggregatesInput[]
    OR?: LessonsScalarWhereWithAggregatesInput[]
    NOT?: LessonsScalarWhereWithAggregatesInput | LessonsScalarWhereWithAggregatesInput[]
    lesson_id?: StringWithAggregatesFilter<"Lessons"> | string
    course_id?: StringWithAggregatesFilter<"Lessons"> | string
    title?: StringWithAggregatesFilter<"Lessons"> | string
    content?: StringWithAggregatesFilter<"Lessons"> | string
    position?: IntWithAggregatesFilter<"Lessons"> | number
  }

  export type QuizzesWhereInput = {
    AND?: QuizzesWhereInput | QuizzesWhereInput[]
    OR?: QuizzesWhereInput[]
    NOT?: QuizzesWhereInput | QuizzesWhereInput[]
    quiz_id?: StringFilter<"Quizzes"> | string
    course_id?: StringFilter<"Quizzes"> | string
    title?: StringFilter<"Quizzes"> | string
    total_questions?: IntFilter<"Quizzes"> | number
    course?: XOR<CoursesScalarRelationFilter, CoursesWhereInput>
    questions?: QuestionsListRelationFilter
  }

  export type QuizzesOrderByWithRelationInput = {
    quiz_id?: SortOrder
    course_id?: SortOrder
    title?: SortOrder
    total_questions?: SortOrder
    course?: CoursesOrderByWithRelationInput
    questions?: QuestionsOrderByRelationAggregateInput
  }

  export type QuizzesWhereUniqueInput = Prisma.AtLeast<{
    quiz_id?: string
    AND?: QuizzesWhereInput | QuizzesWhereInput[]
    OR?: QuizzesWhereInput[]
    NOT?: QuizzesWhereInput | QuizzesWhereInput[]
    course_id?: StringFilter<"Quizzes"> | string
    title?: StringFilter<"Quizzes"> | string
    total_questions?: IntFilter<"Quizzes"> | number
    course?: XOR<CoursesScalarRelationFilter, CoursesWhereInput>
    questions?: QuestionsListRelationFilter
  }, "quiz_id">

  export type QuizzesOrderByWithAggregationInput = {
    quiz_id?: SortOrder
    course_id?: SortOrder
    title?: SortOrder
    total_questions?: SortOrder
    _count?: QuizzesCountOrderByAggregateInput
    _avg?: QuizzesAvgOrderByAggregateInput
    _max?: QuizzesMaxOrderByAggregateInput
    _min?: QuizzesMinOrderByAggregateInput
    _sum?: QuizzesSumOrderByAggregateInput
  }

  export type QuizzesScalarWhereWithAggregatesInput = {
    AND?: QuizzesScalarWhereWithAggregatesInput | QuizzesScalarWhereWithAggregatesInput[]
    OR?: QuizzesScalarWhereWithAggregatesInput[]
    NOT?: QuizzesScalarWhereWithAggregatesInput | QuizzesScalarWhereWithAggregatesInput[]
    quiz_id?: StringWithAggregatesFilter<"Quizzes"> | string
    course_id?: StringWithAggregatesFilter<"Quizzes"> | string
    title?: StringWithAggregatesFilter<"Quizzes"> | string
    total_questions?: IntWithAggregatesFilter<"Quizzes"> | number
  }

  export type QuestionsWhereInput = {
    AND?: QuestionsWhereInput | QuestionsWhereInput[]
    OR?: QuestionsWhereInput[]
    NOT?: QuestionsWhereInput | QuestionsWhereInput[]
    question_id?: StringFilter<"Questions"> | string
    quiz_id?: StringFilter<"Questions"> | string
    text?: StringFilter<"Questions"> | string
    type?: EnumQuestionTypeFilter<"Questions"> | $Enums.QuestionType
    quizzes?: XOR<QuizzesScalarRelationFilter, QuizzesWhereInput>
    options?: OptionsListRelationFilter
  }

  export type QuestionsOrderByWithRelationInput = {
    question_id?: SortOrder
    quiz_id?: SortOrder
    text?: SortOrder
    type?: SortOrder
    quizzes?: QuizzesOrderByWithRelationInput
    options?: OptionsOrderByRelationAggregateInput
  }

  export type QuestionsWhereUniqueInput = Prisma.AtLeast<{
    question_id?: string
    AND?: QuestionsWhereInput | QuestionsWhereInput[]
    OR?: QuestionsWhereInput[]
    NOT?: QuestionsWhereInput | QuestionsWhereInput[]
    quiz_id?: StringFilter<"Questions"> | string
    text?: StringFilter<"Questions"> | string
    type?: EnumQuestionTypeFilter<"Questions"> | $Enums.QuestionType
    quizzes?: XOR<QuizzesScalarRelationFilter, QuizzesWhereInput>
    options?: OptionsListRelationFilter
  }, "question_id">

  export type QuestionsOrderByWithAggregationInput = {
    question_id?: SortOrder
    quiz_id?: SortOrder
    text?: SortOrder
    type?: SortOrder
    _count?: QuestionsCountOrderByAggregateInput
    _max?: QuestionsMaxOrderByAggregateInput
    _min?: QuestionsMinOrderByAggregateInput
  }

  export type QuestionsScalarWhereWithAggregatesInput = {
    AND?: QuestionsScalarWhereWithAggregatesInput | QuestionsScalarWhereWithAggregatesInput[]
    OR?: QuestionsScalarWhereWithAggregatesInput[]
    NOT?: QuestionsScalarWhereWithAggregatesInput | QuestionsScalarWhereWithAggregatesInput[]
    question_id?: StringWithAggregatesFilter<"Questions"> | string
    quiz_id?: StringWithAggregatesFilter<"Questions"> | string
    text?: StringWithAggregatesFilter<"Questions"> | string
    type?: EnumQuestionTypeWithAggregatesFilter<"Questions"> | $Enums.QuestionType
  }

  export type OptionsWhereInput = {
    AND?: OptionsWhereInput | OptionsWhereInput[]
    OR?: OptionsWhereInput[]
    NOT?: OptionsWhereInput | OptionsWhereInput[]
    option_id?: StringFilter<"Options"> | string
    question_id?: StringFilter<"Options"> | string
    text?: StringFilter<"Options"> | string
    is_correct?: BoolFilter<"Options"> | boolean
    question?: XOR<QuestionsScalarRelationFilter, QuestionsWhereInput>
  }

  export type OptionsOrderByWithRelationInput = {
    option_id?: SortOrder
    question_id?: SortOrder
    text?: SortOrder
    is_correct?: SortOrder
    question?: QuestionsOrderByWithRelationInput
  }

  export type OptionsWhereUniqueInput = Prisma.AtLeast<{
    option_id?: string
    AND?: OptionsWhereInput | OptionsWhereInput[]
    OR?: OptionsWhereInput[]
    NOT?: OptionsWhereInput | OptionsWhereInput[]
    question_id?: StringFilter<"Options"> | string
    text?: StringFilter<"Options"> | string
    is_correct?: BoolFilter<"Options"> | boolean
    question?: XOR<QuestionsScalarRelationFilter, QuestionsWhereInput>
  }, "option_id">

  export type OptionsOrderByWithAggregationInput = {
    option_id?: SortOrder
    question_id?: SortOrder
    text?: SortOrder
    is_correct?: SortOrder
    _count?: OptionsCountOrderByAggregateInput
    _max?: OptionsMaxOrderByAggregateInput
    _min?: OptionsMinOrderByAggregateInput
  }

  export type OptionsScalarWhereWithAggregatesInput = {
    AND?: OptionsScalarWhereWithAggregatesInput | OptionsScalarWhereWithAggregatesInput[]
    OR?: OptionsScalarWhereWithAggregatesInput[]
    NOT?: OptionsScalarWhereWithAggregatesInput | OptionsScalarWhereWithAggregatesInput[]
    option_id?: StringWithAggregatesFilter<"Options"> | string
    question_id?: StringWithAggregatesFilter<"Options"> | string
    text?: StringWithAggregatesFilter<"Options"> | string
    is_correct?: BoolWithAggregatesFilter<"Options"> | boolean
  }

  export type ProgressWhereInput = {
    AND?: ProgressWhereInput | ProgressWhereInput[]
    OR?: ProgressWhereInput[]
    NOT?: ProgressWhereInput | ProgressWhereInput[]
    progress_id?: StringFilter<"Progress"> | string
    user_id?: StringFilter<"Progress"> | string
    course_id?: StringFilter<"Progress"> | string
    lesson_id?: StringFilter<"Progress"> | string
    is_complete?: BoolFilter<"Progress"> | boolean
    updated_at?: DateTimeFilter<"Progress"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    course?: XOR<CoursesScalarRelationFilter, CoursesWhereInput>
    lesson?: XOR<LessonsScalarRelationFilter, LessonsWhereInput>
  }

  export type ProgressOrderByWithRelationInput = {
    progress_id?: SortOrder
    user_id?: SortOrder
    course_id?: SortOrder
    lesson_id?: SortOrder
    is_complete?: SortOrder
    updated_at?: SortOrder
    user?: UserOrderByWithRelationInput
    course?: CoursesOrderByWithRelationInput
    lesson?: LessonsOrderByWithRelationInput
  }

  export type ProgressWhereUniqueInput = Prisma.AtLeast<{
    progress_id?: string
    AND?: ProgressWhereInput | ProgressWhereInput[]
    OR?: ProgressWhereInput[]
    NOT?: ProgressWhereInput | ProgressWhereInput[]
    user_id?: StringFilter<"Progress"> | string
    course_id?: StringFilter<"Progress"> | string
    lesson_id?: StringFilter<"Progress"> | string
    is_complete?: BoolFilter<"Progress"> | boolean
    updated_at?: DateTimeFilter<"Progress"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    course?: XOR<CoursesScalarRelationFilter, CoursesWhereInput>
    lesson?: XOR<LessonsScalarRelationFilter, LessonsWhereInput>
  }, "progress_id">

  export type ProgressOrderByWithAggregationInput = {
    progress_id?: SortOrder
    user_id?: SortOrder
    course_id?: SortOrder
    lesson_id?: SortOrder
    is_complete?: SortOrder
    updated_at?: SortOrder
    _count?: ProgressCountOrderByAggregateInput
    _max?: ProgressMaxOrderByAggregateInput
    _min?: ProgressMinOrderByAggregateInput
  }

  export type ProgressScalarWhereWithAggregatesInput = {
    AND?: ProgressScalarWhereWithAggregatesInput | ProgressScalarWhereWithAggregatesInput[]
    OR?: ProgressScalarWhereWithAggregatesInput[]
    NOT?: ProgressScalarWhereWithAggregatesInput | ProgressScalarWhereWithAggregatesInput[]
    progress_id?: StringWithAggregatesFilter<"Progress"> | string
    user_id?: StringWithAggregatesFilter<"Progress"> | string
    course_id?: StringWithAggregatesFilter<"Progress"> | string
    lesson_id?: StringWithAggregatesFilter<"Progress"> | string
    is_complete?: BoolWithAggregatesFilter<"Progress"> | boolean
    updated_at?: DateTimeWithAggregatesFilter<"Progress"> | Date | string
  }

  export type DiscussionsWhereInput = {
    AND?: DiscussionsWhereInput | DiscussionsWhereInput[]
    OR?: DiscussionsWhereInput[]
    NOT?: DiscussionsWhereInput | DiscussionsWhereInput[]
    discussion_id?: StringFilter<"Discussions"> | string
    course_id?: StringFilter<"Discussions"> | string
    user_id?: StringFilter<"Discussions"> | string
    title?: StringFilter<"Discussions"> | string
    content?: StringFilter<"Discussions"> | string
    created_at?: DateTimeFilter<"Discussions"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    course?: XOR<CoursesScalarRelationFilter, CoursesWhereInput>
    comments?: CommentsListRelationFilter
  }

  export type DiscussionsOrderByWithRelationInput = {
    discussion_id?: SortOrder
    course_id?: SortOrder
    user_id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    created_at?: SortOrder
    user?: UserOrderByWithRelationInput
    course?: CoursesOrderByWithRelationInput
    comments?: CommentsOrderByRelationAggregateInput
  }

  export type DiscussionsWhereUniqueInput = Prisma.AtLeast<{
    discussion_id?: string
    AND?: DiscussionsWhereInput | DiscussionsWhereInput[]
    OR?: DiscussionsWhereInput[]
    NOT?: DiscussionsWhereInput | DiscussionsWhereInput[]
    course_id?: StringFilter<"Discussions"> | string
    user_id?: StringFilter<"Discussions"> | string
    title?: StringFilter<"Discussions"> | string
    content?: StringFilter<"Discussions"> | string
    created_at?: DateTimeFilter<"Discussions"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    course?: XOR<CoursesScalarRelationFilter, CoursesWhereInput>
    comments?: CommentsListRelationFilter
  }, "discussion_id">

  export type DiscussionsOrderByWithAggregationInput = {
    discussion_id?: SortOrder
    course_id?: SortOrder
    user_id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    created_at?: SortOrder
    _count?: DiscussionsCountOrderByAggregateInput
    _max?: DiscussionsMaxOrderByAggregateInput
    _min?: DiscussionsMinOrderByAggregateInput
  }

  export type DiscussionsScalarWhereWithAggregatesInput = {
    AND?: DiscussionsScalarWhereWithAggregatesInput | DiscussionsScalarWhereWithAggregatesInput[]
    OR?: DiscussionsScalarWhereWithAggregatesInput[]
    NOT?: DiscussionsScalarWhereWithAggregatesInput | DiscussionsScalarWhereWithAggregatesInput[]
    discussion_id?: StringWithAggregatesFilter<"Discussions"> | string
    course_id?: StringWithAggregatesFilter<"Discussions"> | string
    user_id?: StringWithAggregatesFilter<"Discussions"> | string
    title?: StringWithAggregatesFilter<"Discussions"> | string
    content?: StringWithAggregatesFilter<"Discussions"> | string
    created_at?: DateTimeWithAggregatesFilter<"Discussions"> | Date | string
  }

  export type CommentsWhereInput = {
    AND?: CommentsWhereInput | CommentsWhereInput[]
    OR?: CommentsWhereInput[]
    NOT?: CommentsWhereInput | CommentsWhereInput[]
    comment_id?: StringFilter<"Comments"> | string
    discussion_id?: StringFilter<"Comments"> | string
    user_id?: StringFilter<"Comments"> | string
    content?: StringFilter<"Comments"> | string
    created_at?: DateTimeFilter<"Comments"> | Date | string
    discussion?: XOR<DiscussionsScalarRelationFilter, DiscussionsWhereInput>
  }

  export type CommentsOrderByWithRelationInput = {
    comment_id?: SortOrder
    discussion_id?: SortOrder
    user_id?: SortOrder
    content?: SortOrder
    created_at?: SortOrder
    discussion?: DiscussionsOrderByWithRelationInput
  }

  export type CommentsWhereUniqueInput = Prisma.AtLeast<{
    comment_id?: string
    AND?: CommentsWhereInput | CommentsWhereInput[]
    OR?: CommentsWhereInput[]
    NOT?: CommentsWhereInput | CommentsWhereInput[]
    discussion_id?: StringFilter<"Comments"> | string
    user_id?: StringFilter<"Comments"> | string
    content?: StringFilter<"Comments"> | string
    created_at?: DateTimeFilter<"Comments"> | Date | string
    discussion?: XOR<DiscussionsScalarRelationFilter, DiscussionsWhereInput>
  }, "comment_id">

  export type CommentsOrderByWithAggregationInput = {
    comment_id?: SortOrder
    discussion_id?: SortOrder
    user_id?: SortOrder
    content?: SortOrder
    created_at?: SortOrder
    _count?: CommentsCountOrderByAggregateInput
    _max?: CommentsMaxOrderByAggregateInput
    _min?: CommentsMinOrderByAggregateInput
  }

  export type CommentsScalarWhereWithAggregatesInput = {
    AND?: CommentsScalarWhereWithAggregatesInput | CommentsScalarWhereWithAggregatesInput[]
    OR?: CommentsScalarWhereWithAggregatesInput[]
    NOT?: CommentsScalarWhereWithAggregatesInput | CommentsScalarWhereWithAggregatesInput[]
    comment_id?: StringWithAggregatesFilter<"Comments"> | string
    discussion_id?: StringWithAggregatesFilter<"Comments"> | string
    user_id?: StringWithAggregatesFilter<"Comments"> | string
    content?: StringWithAggregatesFilter<"Comments"> | string
    created_at?: DateTimeWithAggregatesFilter<"Comments"> | Date | string
  }

  export type UserCreateInput = {
    user_id?: string
    username: string
    email: string
    password: string
    role?: $Enums.Role
    createdAt?: Date | string
    enrollments?: EnrollmentsCreateNestedManyWithoutUserInput
    courseteachers?: CourseTeachersCreateNestedManyWithoutUserInput
    discussions?: DiscussionsCreateNestedManyWithoutUserInput
    progress?: ProgressCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    user_id?: string
    username: string
    email: string
    password: string
    role?: $Enums.Role
    createdAt?: Date | string
    enrollments?: EnrollmentsUncheckedCreateNestedManyWithoutUserInput
    courseteachers?: CourseTeachersUncheckedCreateNestedManyWithoutUserInput
    discussions?: DiscussionsUncheckedCreateNestedManyWithoutUserInput
    progress?: ProgressUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollments?: EnrollmentsUpdateManyWithoutUserNestedInput
    courseteachers?: CourseTeachersUpdateManyWithoutUserNestedInput
    discussions?: DiscussionsUpdateManyWithoutUserNestedInput
    progress?: ProgressUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollments?: EnrollmentsUncheckedUpdateManyWithoutUserNestedInput
    courseteachers?: CourseTeachersUncheckedUpdateManyWithoutUserNestedInput
    discussions?: DiscussionsUncheckedUpdateManyWithoutUserNestedInput
    progress?: ProgressUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    user_id?: string
    username: string
    email: string
    password: string
    role?: $Enums.Role
    createdAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EnrollmentsCreateInput = {
    enrollment_id?: string
    enrolled_at?: Date | string
    user: UserCreateNestedOneWithoutEnrollmentsInput
    course: CoursesCreateNestedOneWithoutEnrollmentsInput
  }

  export type EnrollmentsUncheckedCreateInput = {
    enrollment_id?: string
    user_id: string
    course_id: string
    enrolled_at?: Date | string
  }

  export type EnrollmentsUpdateInput = {
    enrollment_id?: StringFieldUpdateOperationsInput | string
    enrolled_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutEnrollmentsNestedInput
    course?: CoursesUpdateOneRequiredWithoutEnrollmentsNestedInput
  }

  export type EnrollmentsUncheckedUpdateInput = {
    enrollment_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    course_id?: StringFieldUpdateOperationsInput | string
    enrolled_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EnrollmentsCreateManyInput = {
    enrollment_id?: string
    user_id: string
    course_id: string
    enrolled_at?: Date | string
  }

  export type EnrollmentsUpdateManyMutationInput = {
    enrollment_id?: StringFieldUpdateOperationsInput | string
    enrolled_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EnrollmentsUncheckedUpdateManyInput = {
    enrollment_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    course_id?: StringFieldUpdateOperationsInput | string
    enrolled_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CoursesCreateInput = {
    course_id?: string
    title: string
    description: string
    category: $Enums.Category
    createdAt?: Date | string
    courses?: CourseTeachersCreateNestedManyWithoutCoursesInput
    lessons?: LessonsCreateNestedManyWithoutCourseInput
    quizzes?: QuizzesCreateNestedManyWithoutCourseInput
    discussions?: DiscussionsCreateNestedManyWithoutCourseInput
    enrollments?: EnrollmentsCreateNestedManyWithoutCourseInput
    progress?: ProgressCreateNestedManyWithoutCourseInput
  }

  export type CoursesUncheckedCreateInput = {
    course_id?: string
    title: string
    description: string
    category: $Enums.Category
    createdAt?: Date | string
    courses?: CourseTeachersUncheckedCreateNestedManyWithoutCoursesInput
    lessons?: LessonsUncheckedCreateNestedManyWithoutCourseInput
    quizzes?: QuizzesUncheckedCreateNestedManyWithoutCourseInput
    discussions?: DiscussionsUncheckedCreateNestedManyWithoutCourseInput
    enrollments?: EnrollmentsUncheckedCreateNestedManyWithoutCourseInput
    progress?: ProgressUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CoursesUpdateInput = {
    course_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: EnumCategoryFieldUpdateOperationsInput | $Enums.Category
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    courses?: CourseTeachersUpdateManyWithoutCoursesNestedInput
    lessons?: LessonsUpdateManyWithoutCourseNestedInput
    quizzes?: QuizzesUpdateManyWithoutCourseNestedInput
    discussions?: DiscussionsUpdateManyWithoutCourseNestedInput
    enrollments?: EnrollmentsUpdateManyWithoutCourseNestedInput
    progress?: ProgressUpdateManyWithoutCourseNestedInput
  }

  export type CoursesUncheckedUpdateInput = {
    course_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: EnumCategoryFieldUpdateOperationsInput | $Enums.Category
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    courses?: CourseTeachersUncheckedUpdateManyWithoutCoursesNestedInput
    lessons?: LessonsUncheckedUpdateManyWithoutCourseNestedInput
    quizzes?: QuizzesUncheckedUpdateManyWithoutCourseNestedInput
    discussions?: DiscussionsUncheckedUpdateManyWithoutCourseNestedInput
    enrollments?: EnrollmentsUncheckedUpdateManyWithoutCourseNestedInput
    progress?: ProgressUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type CoursesCreateManyInput = {
    course_id?: string
    title: string
    description: string
    category: $Enums.Category
    createdAt?: Date | string
  }

  export type CoursesUpdateManyMutationInput = {
    course_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: EnumCategoryFieldUpdateOperationsInput | $Enums.Category
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CoursesUncheckedUpdateManyInput = {
    course_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: EnumCategoryFieldUpdateOperationsInput | $Enums.Category
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourseTeachersCreateInput = {
    id?: string
    teacher_role?: $Enums.TeacherRole
    assigned_at?: Date | string
    user: UserCreateNestedOneWithoutCourseteachersInput
    courses: CoursesCreateNestedOneWithoutCoursesInput
  }

  export type CourseTeachersUncheckedCreateInput = {
    id?: string
    user_id: string
    course_id: string
    teacher_role?: $Enums.TeacherRole
    assigned_at?: Date | string
  }

  export type CourseTeachersUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    teacher_role?: EnumTeacherRoleFieldUpdateOperationsInput | $Enums.TeacherRole
    assigned_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCourseteachersNestedInput
    courses?: CoursesUpdateOneRequiredWithoutCoursesNestedInput
  }

  export type CourseTeachersUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    course_id?: StringFieldUpdateOperationsInput | string
    teacher_role?: EnumTeacherRoleFieldUpdateOperationsInput | $Enums.TeacherRole
    assigned_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourseTeachersCreateManyInput = {
    id?: string
    user_id: string
    course_id: string
    teacher_role?: $Enums.TeacherRole
    assigned_at?: Date | string
  }

  export type CourseTeachersUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    teacher_role?: EnumTeacherRoleFieldUpdateOperationsInput | $Enums.TeacherRole
    assigned_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourseTeachersUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    course_id?: StringFieldUpdateOperationsInput | string
    teacher_role?: EnumTeacherRoleFieldUpdateOperationsInput | $Enums.TeacherRole
    assigned_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LessonsCreateInput = {
    lesson_id?: string
    title: string
    content: string
    position: number
    course: CoursesCreateNestedOneWithoutLessonsInput
    progress?: ProgressCreateNestedManyWithoutLessonInput
  }

  export type LessonsUncheckedCreateInput = {
    lesson_id?: string
    course_id: string
    title: string
    content: string
    position: number
    progress?: ProgressUncheckedCreateNestedManyWithoutLessonInput
  }

  export type LessonsUpdateInput = {
    lesson_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    course?: CoursesUpdateOneRequiredWithoutLessonsNestedInput
    progress?: ProgressUpdateManyWithoutLessonNestedInput
  }

  export type LessonsUncheckedUpdateInput = {
    lesson_id?: StringFieldUpdateOperationsInput | string
    course_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    progress?: ProgressUncheckedUpdateManyWithoutLessonNestedInput
  }

  export type LessonsCreateManyInput = {
    lesson_id?: string
    course_id: string
    title: string
    content: string
    position: number
  }

  export type LessonsUpdateManyMutationInput = {
    lesson_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
  }

  export type LessonsUncheckedUpdateManyInput = {
    lesson_id?: StringFieldUpdateOperationsInput | string
    course_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
  }

  export type QuizzesCreateInput = {
    quiz_id?: string
    title: string
    total_questions: number
    course: CoursesCreateNestedOneWithoutQuizzesInput
    questions?: QuestionsCreateNestedManyWithoutQuizzesInput
  }

  export type QuizzesUncheckedCreateInput = {
    quiz_id?: string
    course_id: string
    title: string
    total_questions: number
    questions?: QuestionsUncheckedCreateNestedManyWithoutQuizzesInput
  }

  export type QuizzesUpdateInput = {
    quiz_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    total_questions?: IntFieldUpdateOperationsInput | number
    course?: CoursesUpdateOneRequiredWithoutQuizzesNestedInput
    questions?: QuestionsUpdateManyWithoutQuizzesNestedInput
  }

  export type QuizzesUncheckedUpdateInput = {
    quiz_id?: StringFieldUpdateOperationsInput | string
    course_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    total_questions?: IntFieldUpdateOperationsInput | number
    questions?: QuestionsUncheckedUpdateManyWithoutQuizzesNestedInput
  }

  export type QuizzesCreateManyInput = {
    quiz_id?: string
    course_id: string
    title: string
    total_questions: number
  }

  export type QuizzesUpdateManyMutationInput = {
    quiz_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    total_questions?: IntFieldUpdateOperationsInput | number
  }

  export type QuizzesUncheckedUpdateManyInput = {
    quiz_id?: StringFieldUpdateOperationsInput | string
    course_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    total_questions?: IntFieldUpdateOperationsInput | number
  }

  export type QuestionsCreateInput = {
    question_id?: string
    text: string
    type: $Enums.QuestionType
    quizzes: QuizzesCreateNestedOneWithoutQuestionsInput
    options?: OptionsCreateNestedManyWithoutQuestionInput
  }

  export type QuestionsUncheckedCreateInput = {
    question_id?: string
    quiz_id: string
    text: string
    type: $Enums.QuestionType
    options?: OptionsUncheckedCreateNestedManyWithoutQuestionInput
  }

  export type QuestionsUpdateInput = {
    question_id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    type?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    quizzes?: QuizzesUpdateOneRequiredWithoutQuestionsNestedInput
    options?: OptionsUpdateManyWithoutQuestionNestedInput
  }

  export type QuestionsUncheckedUpdateInput = {
    question_id?: StringFieldUpdateOperationsInput | string
    quiz_id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    type?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    options?: OptionsUncheckedUpdateManyWithoutQuestionNestedInput
  }

  export type QuestionsCreateManyInput = {
    question_id?: string
    quiz_id: string
    text: string
    type: $Enums.QuestionType
  }

  export type QuestionsUpdateManyMutationInput = {
    question_id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    type?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
  }

  export type QuestionsUncheckedUpdateManyInput = {
    question_id?: StringFieldUpdateOperationsInput | string
    quiz_id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    type?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
  }

  export type OptionsCreateInput = {
    option_id?: string
    text: string
    is_correct: boolean
    question: QuestionsCreateNestedOneWithoutOptionsInput
  }

  export type OptionsUncheckedCreateInput = {
    option_id?: string
    question_id: string
    text: string
    is_correct: boolean
  }

  export type OptionsUpdateInput = {
    option_id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    is_correct?: BoolFieldUpdateOperationsInput | boolean
    question?: QuestionsUpdateOneRequiredWithoutOptionsNestedInput
  }

  export type OptionsUncheckedUpdateInput = {
    option_id?: StringFieldUpdateOperationsInput | string
    question_id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    is_correct?: BoolFieldUpdateOperationsInput | boolean
  }

  export type OptionsCreateManyInput = {
    option_id?: string
    question_id: string
    text: string
    is_correct: boolean
  }

  export type OptionsUpdateManyMutationInput = {
    option_id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    is_correct?: BoolFieldUpdateOperationsInput | boolean
  }

  export type OptionsUncheckedUpdateManyInput = {
    option_id?: StringFieldUpdateOperationsInput | string
    question_id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    is_correct?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ProgressCreateInput = {
    progress_id?: string
    is_complete: boolean
    updated_at?: Date | string
    user: UserCreateNestedOneWithoutProgressInput
    course: CoursesCreateNestedOneWithoutProgressInput
    lesson: LessonsCreateNestedOneWithoutProgressInput
  }

  export type ProgressUncheckedCreateInput = {
    progress_id?: string
    user_id: string
    course_id: string
    lesson_id: string
    is_complete: boolean
    updated_at?: Date | string
  }

  export type ProgressUpdateInput = {
    progress_id?: StringFieldUpdateOperationsInput | string
    is_complete?: BoolFieldUpdateOperationsInput | boolean
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutProgressNestedInput
    course?: CoursesUpdateOneRequiredWithoutProgressNestedInput
    lesson?: LessonsUpdateOneRequiredWithoutProgressNestedInput
  }

  export type ProgressUncheckedUpdateInput = {
    progress_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    course_id?: StringFieldUpdateOperationsInput | string
    lesson_id?: StringFieldUpdateOperationsInput | string
    is_complete?: BoolFieldUpdateOperationsInput | boolean
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProgressCreateManyInput = {
    progress_id?: string
    user_id: string
    course_id: string
    lesson_id: string
    is_complete: boolean
    updated_at?: Date | string
  }

  export type ProgressUpdateManyMutationInput = {
    progress_id?: StringFieldUpdateOperationsInput | string
    is_complete?: BoolFieldUpdateOperationsInput | boolean
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProgressUncheckedUpdateManyInput = {
    progress_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    course_id?: StringFieldUpdateOperationsInput | string
    lesson_id?: StringFieldUpdateOperationsInput | string
    is_complete?: BoolFieldUpdateOperationsInput | boolean
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DiscussionsCreateInput = {
    discussion_id?: string
    title: string
    content: string
    created_at?: Date | string
    user: UserCreateNestedOneWithoutDiscussionsInput
    course: CoursesCreateNestedOneWithoutDiscussionsInput
    comments?: CommentsCreateNestedManyWithoutDiscussionInput
  }

  export type DiscussionsUncheckedCreateInput = {
    discussion_id?: string
    course_id: string
    user_id: string
    title: string
    content: string
    created_at?: Date | string
    comments?: CommentsUncheckedCreateNestedManyWithoutDiscussionInput
  }

  export type DiscussionsUpdateInput = {
    discussion_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutDiscussionsNestedInput
    course?: CoursesUpdateOneRequiredWithoutDiscussionsNestedInput
    comments?: CommentsUpdateManyWithoutDiscussionNestedInput
  }

  export type DiscussionsUncheckedUpdateInput = {
    discussion_id?: StringFieldUpdateOperationsInput | string
    course_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    comments?: CommentsUncheckedUpdateManyWithoutDiscussionNestedInput
  }

  export type DiscussionsCreateManyInput = {
    discussion_id?: string
    course_id: string
    user_id: string
    title: string
    content: string
    created_at?: Date | string
  }

  export type DiscussionsUpdateManyMutationInput = {
    discussion_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DiscussionsUncheckedUpdateManyInput = {
    discussion_id?: StringFieldUpdateOperationsInput | string
    course_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentsCreateInput = {
    comment_id?: string
    user_id: string
    content: string
    created_at?: Date | string
    discussion: DiscussionsCreateNestedOneWithoutCommentsInput
  }

  export type CommentsUncheckedCreateInput = {
    comment_id?: string
    discussion_id: string
    user_id: string
    content: string
    created_at?: Date | string
  }

  export type CommentsUpdateInput = {
    comment_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    discussion?: DiscussionsUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type CommentsUncheckedUpdateInput = {
    comment_id?: StringFieldUpdateOperationsInput | string
    discussion_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentsCreateManyInput = {
    comment_id?: string
    discussion_id: string
    user_id: string
    content: string
    created_at?: Date | string
  }

  export type CommentsUpdateManyMutationInput = {
    comment_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentsUncheckedUpdateManyInput = {
    comment_id?: StringFieldUpdateOperationsInput | string
    discussion_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type EnrollmentsListRelationFilter = {
    every?: EnrollmentsWhereInput
    some?: EnrollmentsWhereInput
    none?: EnrollmentsWhereInput
  }

  export type CourseTeachersListRelationFilter = {
    every?: CourseTeachersWhereInput
    some?: CourseTeachersWhereInput
    none?: CourseTeachersWhereInput
  }

  export type DiscussionsListRelationFilter = {
    every?: DiscussionsWhereInput
    some?: DiscussionsWhereInput
    none?: DiscussionsWhereInput
  }

  export type ProgressListRelationFilter = {
    every?: ProgressWhereInput
    some?: ProgressWhereInput
    none?: ProgressWhereInput
  }

  export type EnrollmentsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CourseTeachersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DiscussionsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProgressOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    user_id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    user_id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    user_id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type CoursesScalarRelationFilter = {
    is?: CoursesWhereInput
    isNot?: CoursesWhereInput
  }

  export type EnrollmentsUser_idCourse_idCompoundUniqueInput = {
    user_id: string
    course_id: string
  }

  export type EnrollmentsCountOrderByAggregateInput = {
    enrollment_id?: SortOrder
    user_id?: SortOrder
    course_id?: SortOrder
    enrolled_at?: SortOrder
  }

  export type EnrollmentsMaxOrderByAggregateInput = {
    enrollment_id?: SortOrder
    user_id?: SortOrder
    course_id?: SortOrder
    enrolled_at?: SortOrder
  }

  export type EnrollmentsMinOrderByAggregateInput = {
    enrollment_id?: SortOrder
    user_id?: SortOrder
    course_id?: SortOrder
    enrolled_at?: SortOrder
  }

  export type EnumCategoryFilter<$PrismaModel = never> = {
    equals?: $Enums.Category | EnumCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.Category[] | ListEnumCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.Category[] | ListEnumCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumCategoryFilter<$PrismaModel> | $Enums.Category
  }

  export type LessonsListRelationFilter = {
    every?: LessonsWhereInput
    some?: LessonsWhereInput
    none?: LessonsWhereInput
  }

  export type QuizzesListRelationFilter = {
    every?: QuizzesWhereInput
    some?: QuizzesWhereInput
    none?: QuizzesWhereInput
  }

  export type LessonsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type QuizzesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CoursesCountOrderByAggregateInput = {
    course_id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    category?: SortOrder
    createdAt?: SortOrder
  }

  export type CoursesMaxOrderByAggregateInput = {
    course_id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    category?: SortOrder
    createdAt?: SortOrder
  }

  export type CoursesMinOrderByAggregateInput = {
    course_id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    category?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumCategoryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Category | EnumCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.Category[] | ListEnumCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.Category[] | ListEnumCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumCategoryWithAggregatesFilter<$PrismaModel> | $Enums.Category
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCategoryFilter<$PrismaModel>
    _max?: NestedEnumCategoryFilter<$PrismaModel>
  }

  export type EnumTeacherRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.TeacherRole | EnumTeacherRoleFieldRefInput<$PrismaModel>
    in?: $Enums.TeacherRole[] | ListEnumTeacherRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.TeacherRole[] | ListEnumTeacherRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumTeacherRoleFilter<$PrismaModel> | $Enums.TeacherRole
  }

  export type CourseTeachersCourse_idTeacher_roleCompoundUniqueInput = {
    course_id: string
    teacher_role: $Enums.TeacherRole
  }

  export type CourseTeachersCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    course_id?: SortOrder
    teacher_role?: SortOrder
    assigned_at?: SortOrder
  }

  export type CourseTeachersMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    course_id?: SortOrder
    teacher_role?: SortOrder
    assigned_at?: SortOrder
  }

  export type CourseTeachersMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    course_id?: SortOrder
    teacher_role?: SortOrder
    assigned_at?: SortOrder
  }

  export type EnumTeacherRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TeacherRole | EnumTeacherRoleFieldRefInput<$PrismaModel>
    in?: $Enums.TeacherRole[] | ListEnumTeacherRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.TeacherRole[] | ListEnumTeacherRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumTeacherRoleWithAggregatesFilter<$PrismaModel> | $Enums.TeacherRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTeacherRoleFilter<$PrismaModel>
    _max?: NestedEnumTeacherRoleFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type LessonsCountOrderByAggregateInput = {
    lesson_id?: SortOrder
    course_id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    position?: SortOrder
  }

  export type LessonsAvgOrderByAggregateInput = {
    position?: SortOrder
  }

  export type LessonsMaxOrderByAggregateInput = {
    lesson_id?: SortOrder
    course_id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    position?: SortOrder
  }

  export type LessonsMinOrderByAggregateInput = {
    lesson_id?: SortOrder
    course_id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    position?: SortOrder
  }

  export type LessonsSumOrderByAggregateInput = {
    position?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type QuestionsListRelationFilter = {
    every?: QuestionsWhereInput
    some?: QuestionsWhereInput
    none?: QuestionsWhereInput
  }

  export type QuestionsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type QuizzesCountOrderByAggregateInput = {
    quiz_id?: SortOrder
    course_id?: SortOrder
    title?: SortOrder
    total_questions?: SortOrder
  }

  export type QuizzesAvgOrderByAggregateInput = {
    total_questions?: SortOrder
  }

  export type QuizzesMaxOrderByAggregateInput = {
    quiz_id?: SortOrder
    course_id?: SortOrder
    title?: SortOrder
    total_questions?: SortOrder
  }

  export type QuizzesMinOrderByAggregateInput = {
    quiz_id?: SortOrder
    course_id?: SortOrder
    title?: SortOrder
    total_questions?: SortOrder
  }

  export type QuizzesSumOrderByAggregateInput = {
    total_questions?: SortOrder
  }

  export type EnumQuestionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.QuestionType | EnumQuestionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.QuestionType[] | ListEnumQuestionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.QuestionType[] | ListEnumQuestionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumQuestionTypeFilter<$PrismaModel> | $Enums.QuestionType
  }

  export type QuizzesScalarRelationFilter = {
    is?: QuizzesWhereInput
    isNot?: QuizzesWhereInput
  }

  export type OptionsListRelationFilter = {
    every?: OptionsWhereInput
    some?: OptionsWhereInput
    none?: OptionsWhereInput
  }

  export type OptionsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type QuestionsCountOrderByAggregateInput = {
    question_id?: SortOrder
    quiz_id?: SortOrder
    text?: SortOrder
    type?: SortOrder
  }

  export type QuestionsMaxOrderByAggregateInput = {
    question_id?: SortOrder
    quiz_id?: SortOrder
    text?: SortOrder
    type?: SortOrder
  }

  export type QuestionsMinOrderByAggregateInput = {
    question_id?: SortOrder
    quiz_id?: SortOrder
    text?: SortOrder
    type?: SortOrder
  }

  export type EnumQuestionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.QuestionType | EnumQuestionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.QuestionType[] | ListEnumQuestionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.QuestionType[] | ListEnumQuestionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumQuestionTypeWithAggregatesFilter<$PrismaModel> | $Enums.QuestionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumQuestionTypeFilter<$PrismaModel>
    _max?: NestedEnumQuestionTypeFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type QuestionsScalarRelationFilter = {
    is?: QuestionsWhereInput
    isNot?: QuestionsWhereInput
  }

  export type OptionsCountOrderByAggregateInput = {
    option_id?: SortOrder
    question_id?: SortOrder
    text?: SortOrder
    is_correct?: SortOrder
  }

  export type OptionsMaxOrderByAggregateInput = {
    option_id?: SortOrder
    question_id?: SortOrder
    text?: SortOrder
    is_correct?: SortOrder
  }

  export type OptionsMinOrderByAggregateInput = {
    option_id?: SortOrder
    question_id?: SortOrder
    text?: SortOrder
    is_correct?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type LessonsScalarRelationFilter = {
    is?: LessonsWhereInput
    isNot?: LessonsWhereInput
  }

  export type ProgressCountOrderByAggregateInput = {
    progress_id?: SortOrder
    user_id?: SortOrder
    course_id?: SortOrder
    lesson_id?: SortOrder
    is_complete?: SortOrder
    updated_at?: SortOrder
  }

  export type ProgressMaxOrderByAggregateInput = {
    progress_id?: SortOrder
    user_id?: SortOrder
    course_id?: SortOrder
    lesson_id?: SortOrder
    is_complete?: SortOrder
    updated_at?: SortOrder
  }

  export type ProgressMinOrderByAggregateInput = {
    progress_id?: SortOrder
    user_id?: SortOrder
    course_id?: SortOrder
    lesson_id?: SortOrder
    is_complete?: SortOrder
    updated_at?: SortOrder
  }

  export type CommentsListRelationFilter = {
    every?: CommentsWhereInput
    some?: CommentsWhereInput
    none?: CommentsWhereInput
  }

  export type CommentsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DiscussionsCountOrderByAggregateInput = {
    discussion_id?: SortOrder
    course_id?: SortOrder
    user_id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    created_at?: SortOrder
  }

  export type DiscussionsMaxOrderByAggregateInput = {
    discussion_id?: SortOrder
    course_id?: SortOrder
    user_id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    created_at?: SortOrder
  }

  export type DiscussionsMinOrderByAggregateInput = {
    discussion_id?: SortOrder
    course_id?: SortOrder
    user_id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    created_at?: SortOrder
  }

  export type DiscussionsScalarRelationFilter = {
    is?: DiscussionsWhereInput
    isNot?: DiscussionsWhereInput
  }

  export type CommentsCountOrderByAggregateInput = {
    comment_id?: SortOrder
    discussion_id?: SortOrder
    user_id?: SortOrder
    content?: SortOrder
    created_at?: SortOrder
  }

  export type CommentsMaxOrderByAggregateInput = {
    comment_id?: SortOrder
    discussion_id?: SortOrder
    user_id?: SortOrder
    content?: SortOrder
    created_at?: SortOrder
  }

  export type CommentsMinOrderByAggregateInput = {
    comment_id?: SortOrder
    discussion_id?: SortOrder
    user_id?: SortOrder
    content?: SortOrder
    created_at?: SortOrder
  }

  export type EnrollmentsCreateNestedManyWithoutUserInput = {
    create?: XOR<EnrollmentsCreateWithoutUserInput, EnrollmentsUncheckedCreateWithoutUserInput> | EnrollmentsCreateWithoutUserInput[] | EnrollmentsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EnrollmentsCreateOrConnectWithoutUserInput | EnrollmentsCreateOrConnectWithoutUserInput[]
    createMany?: EnrollmentsCreateManyUserInputEnvelope
    connect?: EnrollmentsWhereUniqueInput | EnrollmentsWhereUniqueInput[]
  }

  export type CourseTeachersCreateNestedManyWithoutUserInput = {
    create?: XOR<CourseTeachersCreateWithoutUserInput, CourseTeachersUncheckedCreateWithoutUserInput> | CourseTeachersCreateWithoutUserInput[] | CourseTeachersUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CourseTeachersCreateOrConnectWithoutUserInput | CourseTeachersCreateOrConnectWithoutUserInput[]
    createMany?: CourseTeachersCreateManyUserInputEnvelope
    connect?: CourseTeachersWhereUniqueInput | CourseTeachersWhereUniqueInput[]
  }

  export type DiscussionsCreateNestedManyWithoutUserInput = {
    create?: XOR<DiscussionsCreateWithoutUserInput, DiscussionsUncheckedCreateWithoutUserInput> | DiscussionsCreateWithoutUserInput[] | DiscussionsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DiscussionsCreateOrConnectWithoutUserInput | DiscussionsCreateOrConnectWithoutUserInput[]
    createMany?: DiscussionsCreateManyUserInputEnvelope
    connect?: DiscussionsWhereUniqueInput | DiscussionsWhereUniqueInput[]
  }

  export type ProgressCreateNestedManyWithoutUserInput = {
    create?: XOR<ProgressCreateWithoutUserInput, ProgressUncheckedCreateWithoutUserInput> | ProgressCreateWithoutUserInput[] | ProgressUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProgressCreateOrConnectWithoutUserInput | ProgressCreateOrConnectWithoutUserInput[]
    createMany?: ProgressCreateManyUserInputEnvelope
    connect?: ProgressWhereUniqueInput | ProgressWhereUniqueInput[]
  }

  export type EnrollmentsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<EnrollmentsCreateWithoutUserInput, EnrollmentsUncheckedCreateWithoutUserInput> | EnrollmentsCreateWithoutUserInput[] | EnrollmentsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EnrollmentsCreateOrConnectWithoutUserInput | EnrollmentsCreateOrConnectWithoutUserInput[]
    createMany?: EnrollmentsCreateManyUserInputEnvelope
    connect?: EnrollmentsWhereUniqueInput | EnrollmentsWhereUniqueInput[]
  }

  export type CourseTeachersUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<CourseTeachersCreateWithoutUserInput, CourseTeachersUncheckedCreateWithoutUserInput> | CourseTeachersCreateWithoutUserInput[] | CourseTeachersUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CourseTeachersCreateOrConnectWithoutUserInput | CourseTeachersCreateOrConnectWithoutUserInput[]
    createMany?: CourseTeachersCreateManyUserInputEnvelope
    connect?: CourseTeachersWhereUniqueInput | CourseTeachersWhereUniqueInput[]
  }

  export type DiscussionsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<DiscussionsCreateWithoutUserInput, DiscussionsUncheckedCreateWithoutUserInput> | DiscussionsCreateWithoutUserInput[] | DiscussionsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DiscussionsCreateOrConnectWithoutUserInput | DiscussionsCreateOrConnectWithoutUserInput[]
    createMany?: DiscussionsCreateManyUserInputEnvelope
    connect?: DiscussionsWhereUniqueInput | DiscussionsWhereUniqueInput[]
  }

  export type ProgressUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ProgressCreateWithoutUserInput, ProgressUncheckedCreateWithoutUserInput> | ProgressCreateWithoutUserInput[] | ProgressUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProgressCreateOrConnectWithoutUserInput | ProgressCreateOrConnectWithoutUserInput[]
    createMany?: ProgressCreateManyUserInputEnvelope
    connect?: ProgressWhereUniqueInput | ProgressWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type EnrollmentsUpdateManyWithoutUserNestedInput = {
    create?: XOR<EnrollmentsCreateWithoutUserInput, EnrollmentsUncheckedCreateWithoutUserInput> | EnrollmentsCreateWithoutUserInput[] | EnrollmentsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EnrollmentsCreateOrConnectWithoutUserInput | EnrollmentsCreateOrConnectWithoutUserInput[]
    upsert?: EnrollmentsUpsertWithWhereUniqueWithoutUserInput | EnrollmentsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: EnrollmentsCreateManyUserInputEnvelope
    set?: EnrollmentsWhereUniqueInput | EnrollmentsWhereUniqueInput[]
    disconnect?: EnrollmentsWhereUniqueInput | EnrollmentsWhereUniqueInput[]
    delete?: EnrollmentsWhereUniqueInput | EnrollmentsWhereUniqueInput[]
    connect?: EnrollmentsWhereUniqueInput | EnrollmentsWhereUniqueInput[]
    update?: EnrollmentsUpdateWithWhereUniqueWithoutUserInput | EnrollmentsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: EnrollmentsUpdateManyWithWhereWithoutUserInput | EnrollmentsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: EnrollmentsScalarWhereInput | EnrollmentsScalarWhereInput[]
  }

  export type CourseTeachersUpdateManyWithoutUserNestedInput = {
    create?: XOR<CourseTeachersCreateWithoutUserInput, CourseTeachersUncheckedCreateWithoutUserInput> | CourseTeachersCreateWithoutUserInput[] | CourseTeachersUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CourseTeachersCreateOrConnectWithoutUserInput | CourseTeachersCreateOrConnectWithoutUserInput[]
    upsert?: CourseTeachersUpsertWithWhereUniqueWithoutUserInput | CourseTeachersUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CourseTeachersCreateManyUserInputEnvelope
    set?: CourseTeachersWhereUniqueInput | CourseTeachersWhereUniqueInput[]
    disconnect?: CourseTeachersWhereUniqueInput | CourseTeachersWhereUniqueInput[]
    delete?: CourseTeachersWhereUniqueInput | CourseTeachersWhereUniqueInput[]
    connect?: CourseTeachersWhereUniqueInput | CourseTeachersWhereUniqueInput[]
    update?: CourseTeachersUpdateWithWhereUniqueWithoutUserInput | CourseTeachersUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CourseTeachersUpdateManyWithWhereWithoutUserInput | CourseTeachersUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CourseTeachersScalarWhereInput | CourseTeachersScalarWhereInput[]
  }

  export type DiscussionsUpdateManyWithoutUserNestedInput = {
    create?: XOR<DiscussionsCreateWithoutUserInput, DiscussionsUncheckedCreateWithoutUserInput> | DiscussionsCreateWithoutUserInput[] | DiscussionsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DiscussionsCreateOrConnectWithoutUserInput | DiscussionsCreateOrConnectWithoutUserInput[]
    upsert?: DiscussionsUpsertWithWhereUniqueWithoutUserInput | DiscussionsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: DiscussionsCreateManyUserInputEnvelope
    set?: DiscussionsWhereUniqueInput | DiscussionsWhereUniqueInput[]
    disconnect?: DiscussionsWhereUniqueInput | DiscussionsWhereUniqueInput[]
    delete?: DiscussionsWhereUniqueInput | DiscussionsWhereUniqueInput[]
    connect?: DiscussionsWhereUniqueInput | DiscussionsWhereUniqueInput[]
    update?: DiscussionsUpdateWithWhereUniqueWithoutUserInput | DiscussionsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: DiscussionsUpdateManyWithWhereWithoutUserInput | DiscussionsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: DiscussionsScalarWhereInput | DiscussionsScalarWhereInput[]
  }

  export type ProgressUpdateManyWithoutUserNestedInput = {
    create?: XOR<ProgressCreateWithoutUserInput, ProgressUncheckedCreateWithoutUserInput> | ProgressCreateWithoutUserInput[] | ProgressUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProgressCreateOrConnectWithoutUserInput | ProgressCreateOrConnectWithoutUserInput[]
    upsert?: ProgressUpsertWithWhereUniqueWithoutUserInput | ProgressUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ProgressCreateManyUserInputEnvelope
    set?: ProgressWhereUniqueInput | ProgressWhereUniqueInput[]
    disconnect?: ProgressWhereUniqueInput | ProgressWhereUniqueInput[]
    delete?: ProgressWhereUniqueInput | ProgressWhereUniqueInput[]
    connect?: ProgressWhereUniqueInput | ProgressWhereUniqueInput[]
    update?: ProgressUpdateWithWhereUniqueWithoutUserInput | ProgressUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ProgressUpdateManyWithWhereWithoutUserInput | ProgressUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ProgressScalarWhereInput | ProgressScalarWhereInput[]
  }

  export type EnrollmentsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<EnrollmentsCreateWithoutUserInput, EnrollmentsUncheckedCreateWithoutUserInput> | EnrollmentsCreateWithoutUserInput[] | EnrollmentsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EnrollmentsCreateOrConnectWithoutUserInput | EnrollmentsCreateOrConnectWithoutUserInput[]
    upsert?: EnrollmentsUpsertWithWhereUniqueWithoutUserInput | EnrollmentsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: EnrollmentsCreateManyUserInputEnvelope
    set?: EnrollmentsWhereUniqueInput | EnrollmentsWhereUniqueInput[]
    disconnect?: EnrollmentsWhereUniqueInput | EnrollmentsWhereUniqueInput[]
    delete?: EnrollmentsWhereUniqueInput | EnrollmentsWhereUniqueInput[]
    connect?: EnrollmentsWhereUniqueInput | EnrollmentsWhereUniqueInput[]
    update?: EnrollmentsUpdateWithWhereUniqueWithoutUserInput | EnrollmentsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: EnrollmentsUpdateManyWithWhereWithoutUserInput | EnrollmentsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: EnrollmentsScalarWhereInput | EnrollmentsScalarWhereInput[]
  }

  export type CourseTeachersUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CourseTeachersCreateWithoutUserInput, CourseTeachersUncheckedCreateWithoutUserInput> | CourseTeachersCreateWithoutUserInput[] | CourseTeachersUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CourseTeachersCreateOrConnectWithoutUserInput | CourseTeachersCreateOrConnectWithoutUserInput[]
    upsert?: CourseTeachersUpsertWithWhereUniqueWithoutUserInput | CourseTeachersUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CourseTeachersCreateManyUserInputEnvelope
    set?: CourseTeachersWhereUniqueInput | CourseTeachersWhereUniqueInput[]
    disconnect?: CourseTeachersWhereUniqueInput | CourseTeachersWhereUniqueInput[]
    delete?: CourseTeachersWhereUniqueInput | CourseTeachersWhereUniqueInput[]
    connect?: CourseTeachersWhereUniqueInput | CourseTeachersWhereUniqueInput[]
    update?: CourseTeachersUpdateWithWhereUniqueWithoutUserInput | CourseTeachersUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CourseTeachersUpdateManyWithWhereWithoutUserInput | CourseTeachersUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CourseTeachersScalarWhereInput | CourseTeachersScalarWhereInput[]
  }

  export type DiscussionsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<DiscussionsCreateWithoutUserInput, DiscussionsUncheckedCreateWithoutUserInput> | DiscussionsCreateWithoutUserInput[] | DiscussionsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DiscussionsCreateOrConnectWithoutUserInput | DiscussionsCreateOrConnectWithoutUserInput[]
    upsert?: DiscussionsUpsertWithWhereUniqueWithoutUserInput | DiscussionsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: DiscussionsCreateManyUserInputEnvelope
    set?: DiscussionsWhereUniqueInput | DiscussionsWhereUniqueInput[]
    disconnect?: DiscussionsWhereUniqueInput | DiscussionsWhereUniqueInput[]
    delete?: DiscussionsWhereUniqueInput | DiscussionsWhereUniqueInput[]
    connect?: DiscussionsWhereUniqueInput | DiscussionsWhereUniqueInput[]
    update?: DiscussionsUpdateWithWhereUniqueWithoutUserInput | DiscussionsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: DiscussionsUpdateManyWithWhereWithoutUserInput | DiscussionsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: DiscussionsScalarWhereInput | DiscussionsScalarWhereInput[]
  }

  export type ProgressUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ProgressCreateWithoutUserInput, ProgressUncheckedCreateWithoutUserInput> | ProgressCreateWithoutUserInput[] | ProgressUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProgressCreateOrConnectWithoutUserInput | ProgressCreateOrConnectWithoutUserInput[]
    upsert?: ProgressUpsertWithWhereUniqueWithoutUserInput | ProgressUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ProgressCreateManyUserInputEnvelope
    set?: ProgressWhereUniqueInput | ProgressWhereUniqueInput[]
    disconnect?: ProgressWhereUniqueInput | ProgressWhereUniqueInput[]
    delete?: ProgressWhereUniqueInput | ProgressWhereUniqueInput[]
    connect?: ProgressWhereUniqueInput | ProgressWhereUniqueInput[]
    update?: ProgressUpdateWithWhereUniqueWithoutUserInput | ProgressUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ProgressUpdateManyWithWhereWithoutUserInput | ProgressUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ProgressScalarWhereInput | ProgressScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutEnrollmentsInput = {
    create?: XOR<UserCreateWithoutEnrollmentsInput, UserUncheckedCreateWithoutEnrollmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutEnrollmentsInput
    connect?: UserWhereUniqueInput
  }

  export type CoursesCreateNestedOneWithoutEnrollmentsInput = {
    create?: XOR<CoursesCreateWithoutEnrollmentsInput, CoursesUncheckedCreateWithoutEnrollmentsInput>
    connectOrCreate?: CoursesCreateOrConnectWithoutEnrollmentsInput
    connect?: CoursesWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutEnrollmentsNestedInput = {
    create?: XOR<UserCreateWithoutEnrollmentsInput, UserUncheckedCreateWithoutEnrollmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutEnrollmentsInput
    upsert?: UserUpsertWithoutEnrollmentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutEnrollmentsInput, UserUpdateWithoutEnrollmentsInput>, UserUncheckedUpdateWithoutEnrollmentsInput>
  }

  export type CoursesUpdateOneRequiredWithoutEnrollmentsNestedInput = {
    create?: XOR<CoursesCreateWithoutEnrollmentsInput, CoursesUncheckedCreateWithoutEnrollmentsInput>
    connectOrCreate?: CoursesCreateOrConnectWithoutEnrollmentsInput
    upsert?: CoursesUpsertWithoutEnrollmentsInput
    connect?: CoursesWhereUniqueInput
    update?: XOR<XOR<CoursesUpdateToOneWithWhereWithoutEnrollmentsInput, CoursesUpdateWithoutEnrollmentsInput>, CoursesUncheckedUpdateWithoutEnrollmentsInput>
  }

  export type CourseTeachersCreateNestedManyWithoutCoursesInput = {
    create?: XOR<CourseTeachersCreateWithoutCoursesInput, CourseTeachersUncheckedCreateWithoutCoursesInput> | CourseTeachersCreateWithoutCoursesInput[] | CourseTeachersUncheckedCreateWithoutCoursesInput[]
    connectOrCreate?: CourseTeachersCreateOrConnectWithoutCoursesInput | CourseTeachersCreateOrConnectWithoutCoursesInput[]
    createMany?: CourseTeachersCreateManyCoursesInputEnvelope
    connect?: CourseTeachersWhereUniqueInput | CourseTeachersWhereUniqueInput[]
  }

  export type LessonsCreateNestedManyWithoutCourseInput = {
    create?: XOR<LessonsCreateWithoutCourseInput, LessonsUncheckedCreateWithoutCourseInput> | LessonsCreateWithoutCourseInput[] | LessonsUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: LessonsCreateOrConnectWithoutCourseInput | LessonsCreateOrConnectWithoutCourseInput[]
    createMany?: LessonsCreateManyCourseInputEnvelope
    connect?: LessonsWhereUniqueInput | LessonsWhereUniqueInput[]
  }

  export type QuizzesCreateNestedManyWithoutCourseInput = {
    create?: XOR<QuizzesCreateWithoutCourseInput, QuizzesUncheckedCreateWithoutCourseInput> | QuizzesCreateWithoutCourseInput[] | QuizzesUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: QuizzesCreateOrConnectWithoutCourseInput | QuizzesCreateOrConnectWithoutCourseInput[]
    createMany?: QuizzesCreateManyCourseInputEnvelope
    connect?: QuizzesWhereUniqueInput | QuizzesWhereUniqueInput[]
  }

  export type DiscussionsCreateNestedManyWithoutCourseInput = {
    create?: XOR<DiscussionsCreateWithoutCourseInput, DiscussionsUncheckedCreateWithoutCourseInput> | DiscussionsCreateWithoutCourseInput[] | DiscussionsUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: DiscussionsCreateOrConnectWithoutCourseInput | DiscussionsCreateOrConnectWithoutCourseInput[]
    createMany?: DiscussionsCreateManyCourseInputEnvelope
    connect?: DiscussionsWhereUniqueInput | DiscussionsWhereUniqueInput[]
  }

  export type EnrollmentsCreateNestedManyWithoutCourseInput = {
    create?: XOR<EnrollmentsCreateWithoutCourseInput, EnrollmentsUncheckedCreateWithoutCourseInput> | EnrollmentsCreateWithoutCourseInput[] | EnrollmentsUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: EnrollmentsCreateOrConnectWithoutCourseInput | EnrollmentsCreateOrConnectWithoutCourseInput[]
    createMany?: EnrollmentsCreateManyCourseInputEnvelope
    connect?: EnrollmentsWhereUniqueInput | EnrollmentsWhereUniqueInput[]
  }

  export type ProgressCreateNestedManyWithoutCourseInput = {
    create?: XOR<ProgressCreateWithoutCourseInput, ProgressUncheckedCreateWithoutCourseInput> | ProgressCreateWithoutCourseInput[] | ProgressUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: ProgressCreateOrConnectWithoutCourseInput | ProgressCreateOrConnectWithoutCourseInput[]
    createMany?: ProgressCreateManyCourseInputEnvelope
    connect?: ProgressWhereUniqueInput | ProgressWhereUniqueInput[]
  }

  export type CourseTeachersUncheckedCreateNestedManyWithoutCoursesInput = {
    create?: XOR<CourseTeachersCreateWithoutCoursesInput, CourseTeachersUncheckedCreateWithoutCoursesInput> | CourseTeachersCreateWithoutCoursesInput[] | CourseTeachersUncheckedCreateWithoutCoursesInput[]
    connectOrCreate?: CourseTeachersCreateOrConnectWithoutCoursesInput | CourseTeachersCreateOrConnectWithoutCoursesInput[]
    createMany?: CourseTeachersCreateManyCoursesInputEnvelope
    connect?: CourseTeachersWhereUniqueInput | CourseTeachersWhereUniqueInput[]
  }

  export type LessonsUncheckedCreateNestedManyWithoutCourseInput = {
    create?: XOR<LessonsCreateWithoutCourseInput, LessonsUncheckedCreateWithoutCourseInput> | LessonsCreateWithoutCourseInput[] | LessonsUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: LessonsCreateOrConnectWithoutCourseInput | LessonsCreateOrConnectWithoutCourseInput[]
    createMany?: LessonsCreateManyCourseInputEnvelope
    connect?: LessonsWhereUniqueInput | LessonsWhereUniqueInput[]
  }

  export type QuizzesUncheckedCreateNestedManyWithoutCourseInput = {
    create?: XOR<QuizzesCreateWithoutCourseInput, QuizzesUncheckedCreateWithoutCourseInput> | QuizzesCreateWithoutCourseInput[] | QuizzesUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: QuizzesCreateOrConnectWithoutCourseInput | QuizzesCreateOrConnectWithoutCourseInput[]
    createMany?: QuizzesCreateManyCourseInputEnvelope
    connect?: QuizzesWhereUniqueInput | QuizzesWhereUniqueInput[]
  }

  export type DiscussionsUncheckedCreateNestedManyWithoutCourseInput = {
    create?: XOR<DiscussionsCreateWithoutCourseInput, DiscussionsUncheckedCreateWithoutCourseInput> | DiscussionsCreateWithoutCourseInput[] | DiscussionsUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: DiscussionsCreateOrConnectWithoutCourseInput | DiscussionsCreateOrConnectWithoutCourseInput[]
    createMany?: DiscussionsCreateManyCourseInputEnvelope
    connect?: DiscussionsWhereUniqueInput | DiscussionsWhereUniqueInput[]
  }

  export type EnrollmentsUncheckedCreateNestedManyWithoutCourseInput = {
    create?: XOR<EnrollmentsCreateWithoutCourseInput, EnrollmentsUncheckedCreateWithoutCourseInput> | EnrollmentsCreateWithoutCourseInput[] | EnrollmentsUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: EnrollmentsCreateOrConnectWithoutCourseInput | EnrollmentsCreateOrConnectWithoutCourseInput[]
    createMany?: EnrollmentsCreateManyCourseInputEnvelope
    connect?: EnrollmentsWhereUniqueInput | EnrollmentsWhereUniqueInput[]
  }

  export type ProgressUncheckedCreateNestedManyWithoutCourseInput = {
    create?: XOR<ProgressCreateWithoutCourseInput, ProgressUncheckedCreateWithoutCourseInput> | ProgressCreateWithoutCourseInput[] | ProgressUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: ProgressCreateOrConnectWithoutCourseInput | ProgressCreateOrConnectWithoutCourseInput[]
    createMany?: ProgressCreateManyCourseInputEnvelope
    connect?: ProgressWhereUniqueInput | ProgressWhereUniqueInput[]
  }

  export type EnumCategoryFieldUpdateOperationsInput = {
    set?: $Enums.Category
  }

  export type CourseTeachersUpdateManyWithoutCoursesNestedInput = {
    create?: XOR<CourseTeachersCreateWithoutCoursesInput, CourseTeachersUncheckedCreateWithoutCoursesInput> | CourseTeachersCreateWithoutCoursesInput[] | CourseTeachersUncheckedCreateWithoutCoursesInput[]
    connectOrCreate?: CourseTeachersCreateOrConnectWithoutCoursesInput | CourseTeachersCreateOrConnectWithoutCoursesInput[]
    upsert?: CourseTeachersUpsertWithWhereUniqueWithoutCoursesInput | CourseTeachersUpsertWithWhereUniqueWithoutCoursesInput[]
    createMany?: CourseTeachersCreateManyCoursesInputEnvelope
    set?: CourseTeachersWhereUniqueInput | CourseTeachersWhereUniqueInput[]
    disconnect?: CourseTeachersWhereUniqueInput | CourseTeachersWhereUniqueInput[]
    delete?: CourseTeachersWhereUniqueInput | CourseTeachersWhereUniqueInput[]
    connect?: CourseTeachersWhereUniqueInput | CourseTeachersWhereUniqueInput[]
    update?: CourseTeachersUpdateWithWhereUniqueWithoutCoursesInput | CourseTeachersUpdateWithWhereUniqueWithoutCoursesInput[]
    updateMany?: CourseTeachersUpdateManyWithWhereWithoutCoursesInput | CourseTeachersUpdateManyWithWhereWithoutCoursesInput[]
    deleteMany?: CourseTeachersScalarWhereInput | CourseTeachersScalarWhereInput[]
  }

  export type LessonsUpdateManyWithoutCourseNestedInput = {
    create?: XOR<LessonsCreateWithoutCourseInput, LessonsUncheckedCreateWithoutCourseInput> | LessonsCreateWithoutCourseInput[] | LessonsUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: LessonsCreateOrConnectWithoutCourseInput | LessonsCreateOrConnectWithoutCourseInput[]
    upsert?: LessonsUpsertWithWhereUniqueWithoutCourseInput | LessonsUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: LessonsCreateManyCourseInputEnvelope
    set?: LessonsWhereUniqueInput | LessonsWhereUniqueInput[]
    disconnect?: LessonsWhereUniqueInput | LessonsWhereUniqueInput[]
    delete?: LessonsWhereUniqueInput | LessonsWhereUniqueInput[]
    connect?: LessonsWhereUniqueInput | LessonsWhereUniqueInput[]
    update?: LessonsUpdateWithWhereUniqueWithoutCourseInput | LessonsUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: LessonsUpdateManyWithWhereWithoutCourseInput | LessonsUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: LessonsScalarWhereInput | LessonsScalarWhereInput[]
  }

  export type QuizzesUpdateManyWithoutCourseNestedInput = {
    create?: XOR<QuizzesCreateWithoutCourseInput, QuizzesUncheckedCreateWithoutCourseInput> | QuizzesCreateWithoutCourseInput[] | QuizzesUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: QuizzesCreateOrConnectWithoutCourseInput | QuizzesCreateOrConnectWithoutCourseInput[]
    upsert?: QuizzesUpsertWithWhereUniqueWithoutCourseInput | QuizzesUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: QuizzesCreateManyCourseInputEnvelope
    set?: QuizzesWhereUniqueInput | QuizzesWhereUniqueInput[]
    disconnect?: QuizzesWhereUniqueInput | QuizzesWhereUniqueInput[]
    delete?: QuizzesWhereUniqueInput | QuizzesWhereUniqueInput[]
    connect?: QuizzesWhereUniqueInput | QuizzesWhereUniqueInput[]
    update?: QuizzesUpdateWithWhereUniqueWithoutCourseInput | QuizzesUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: QuizzesUpdateManyWithWhereWithoutCourseInput | QuizzesUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: QuizzesScalarWhereInput | QuizzesScalarWhereInput[]
  }

  export type DiscussionsUpdateManyWithoutCourseNestedInput = {
    create?: XOR<DiscussionsCreateWithoutCourseInput, DiscussionsUncheckedCreateWithoutCourseInput> | DiscussionsCreateWithoutCourseInput[] | DiscussionsUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: DiscussionsCreateOrConnectWithoutCourseInput | DiscussionsCreateOrConnectWithoutCourseInput[]
    upsert?: DiscussionsUpsertWithWhereUniqueWithoutCourseInput | DiscussionsUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: DiscussionsCreateManyCourseInputEnvelope
    set?: DiscussionsWhereUniqueInput | DiscussionsWhereUniqueInput[]
    disconnect?: DiscussionsWhereUniqueInput | DiscussionsWhereUniqueInput[]
    delete?: DiscussionsWhereUniqueInput | DiscussionsWhereUniqueInput[]
    connect?: DiscussionsWhereUniqueInput | DiscussionsWhereUniqueInput[]
    update?: DiscussionsUpdateWithWhereUniqueWithoutCourseInput | DiscussionsUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: DiscussionsUpdateManyWithWhereWithoutCourseInput | DiscussionsUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: DiscussionsScalarWhereInput | DiscussionsScalarWhereInput[]
  }

  export type EnrollmentsUpdateManyWithoutCourseNestedInput = {
    create?: XOR<EnrollmentsCreateWithoutCourseInput, EnrollmentsUncheckedCreateWithoutCourseInput> | EnrollmentsCreateWithoutCourseInput[] | EnrollmentsUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: EnrollmentsCreateOrConnectWithoutCourseInput | EnrollmentsCreateOrConnectWithoutCourseInput[]
    upsert?: EnrollmentsUpsertWithWhereUniqueWithoutCourseInput | EnrollmentsUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: EnrollmentsCreateManyCourseInputEnvelope
    set?: EnrollmentsWhereUniqueInput | EnrollmentsWhereUniqueInput[]
    disconnect?: EnrollmentsWhereUniqueInput | EnrollmentsWhereUniqueInput[]
    delete?: EnrollmentsWhereUniqueInput | EnrollmentsWhereUniqueInput[]
    connect?: EnrollmentsWhereUniqueInput | EnrollmentsWhereUniqueInput[]
    update?: EnrollmentsUpdateWithWhereUniqueWithoutCourseInput | EnrollmentsUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: EnrollmentsUpdateManyWithWhereWithoutCourseInput | EnrollmentsUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: EnrollmentsScalarWhereInput | EnrollmentsScalarWhereInput[]
  }

  export type ProgressUpdateManyWithoutCourseNestedInput = {
    create?: XOR<ProgressCreateWithoutCourseInput, ProgressUncheckedCreateWithoutCourseInput> | ProgressCreateWithoutCourseInput[] | ProgressUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: ProgressCreateOrConnectWithoutCourseInput | ProgressCreateOrConnectWithoutCourseInput[]
    upsert?: ProgressUpsertWithWhereUniqueWithoutCourseInput | ProgressUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: ProgressCreateManyCourseInputEnvelope
    set?: ProgressWhereUniqueInput | ProgressWhereUniqueInput[]
    disconnect?: ProgressWhereUniqueInput | ProgressWhereUniqueInput[]
    delete?: ProgressWhereUniqueInput | ProgressWhereUniqueInput[]
    connect?: ProgressWhereUniqueInput | ProgressWhereUniqueInput[]
    update?: ProgressUpdateWithWhereUniqueWithoutCourseInput | ProgressUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: ProgressUpdateManyWithWhereWithoutCourseInput | ProgressUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: ProgressScalarWhereInput | ProgressScalarWhereInput[]
  }

  export type CourseTeachersUncheckedUpdateManyWithoutCoursesNestedInput = {
    create?: XOR<CourseTeachersCreateWithoutCoursesInput, CourseTeachersUncheckedCreateWithoutCoursesInput> | CourseTeachersCreateWithoutCoursesInput[] | CourseTeachersUncheckedCreateWithoutCoursesInput[]
    connectOrCreate?: CourseTeachersCreateOrConnectWithoutCoursesInput | CourseTeachersCreateOrConnectWithoutCoursesInput[]
    upsert?: CourseTeachersUpsertWithWhereUniqueWithoutCoursesInput | CourseTeachersUpsertWithWhereUniqueWithoutCoursesInput[]
    createMany?: CourseTeachersCreateManyCoursesInputEnvelope
    set?: CourseTeachersWhereUniqueInput | CourseTeachersWhereUniqueInput[]
    disconnect?: CourseTeachersWhereUniqueInput | CourseTeachersWhereUniqueInput[]
    delete?: CourseTeachersWhereUniqueInput | CourseTeachersWhereUniqueInput[]
    connect?: CourseTeachersWhereUniqueInput | CourseTeachersWhereUniqueInput[]
    update?: CourseTeachersUpdateWithWhereUniqueWithoutCoursesInput | CourseTeachersUpdateWithWhereUniqueWithoutCoursesInput[]
    updateMany?: CourseTeachersUpdateManyWithWhereWithoutCoursesInput | CourseTeachersUpdateManyWithWhereWithoutCoursesInput[]
    deleteMany?: CourseTeachersScalarWhereInput | CourseTeachersScalarWhereInput[]
  }

  export type LessonsUncheckedUpdateManyWithoutCourseNestedInput = {
    create?: XOR<LessonsCreateWithoutCourseInput, LessonsUncheckedCreateWithoutCourseInput> | LessonsCreateWithoutCourseInput[] | LessonsUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: LessonsCreateOrConnectWithoutCourseInput | LessonsCreateOrConnectWithoutCourseInput[]
    upsert?: LessonsUpsertWithWhereUniqueWithoutCourseInput | LessonsUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: LessonsCreateManyCourseInputEnvelope
    set?: LessonsWhereUniqueInput | LessonsWhereUniqueInput[]
    disconnect?: LessonsWhereUniqueInput | LessonsWhereUniqueInput[]
    delete?: LessonsWhereUniqueInput | LessonsWhereUniqueInput[]
    connect?: LessonsWhereUniqueInput | LessonsWhereUniqueInput[]
    update?: LessonsUpdateWithWhereUniqueWithoutCourseInput | LessonsUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: LessonsUpdateManyWithWhereWithoutCourseInput | LessonsUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: LessonsScalarWhereInput | LessonsScalarWhereInput[]
  }

  export type QuizzesUncheckedUpdateManyWithoutCourseNestedInput = {
    create?: XOR<QuizzesCreateWithoutCourseInput, QuizzesUncheckedCreateWithoutCourseInput> | QuizzesCreateWithoutCourseInput[] | QuizzesUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: QuizzesCreateOrConnectWithoutCourseInput | QuizzesCreateOrConnectWithoutCourseInput[]
    upsert?: QuizzesUpsertWithWhereUniqueWithoutCourseInput | QuizzesUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: QuizzesCreateManyCourseInputEnvelope
    set?: QuizzesWhereUniqueInput | QuizzesWhereUniqueInput[]
    disconnect?: QuizzesWhereUniqueInput | QuizzesWhereUniqueInput[]
    delete?: QuizzesWhereUniqueInput | QuizzesWhereUniqueInput[]
    connect?: QuizzesWhereUniqueInput | QuizzesWhereUniqueInput[]
    update?: QuizzesUpdateWithWhereUniqueWithoutCourseInput | QuizzesUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: QuizzesUpdateManyWithWhereWithoutCourseInput | QuizzesUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: QuizzesScalarWhereInput | QuizzesScalarWhereInput[]
  }

  export type DiscussionsUncheckedUpdateManyWithoutCourseNestedInput = {
    create?: XOR<DiscussionsCreateWithoutCourseInput, DiscussionsUncheckedCreateWithoutCourseInput> | DiscussionsCreateWithoutCourseInput[] | DiscussionsUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: DiscussionsCreateOrConnectWithoutCourseInput | DiscussionsCreateOrConnectWithoutCourseInput[]
    upsert?: DiscussionsUpsertWithWhereUniqueWithoutCourseInput | DiscussionsUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: DiscussionsCreateManyCourseInputEnvelope
    set?: DiscussionsWhereUniqueInput | DiscussionsWhereUniqueInput[]
    disconnect?: DiscussionsWhereUniqueInput | DiscussionsWhereUniqueInput[]
    delete?: DiscussionsWhereUniqueInput | DiscussionsWhereUniqueInput[]
    connect?: DiscussionsWhereUniqueInput | DiscussionsWhereUniqueInput[]
    update?: DiscussionsUpdateWithWhereUniqueWithoutCourseInput | DiscussionsUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: DiscussionsUpdateManyWithWhereWithoutCourseInput | DiscussionsUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: DiscussionsScalarWhereInput | DiscussionsScalarWhereInput[]
  }

  export type EnrollmentsUncheckedUpdateManyWithoutCourseNestedInput = {
    create?: XOR<EnrollmentsCreateWithoutCourseInput, EnrollmentsUncheckedCreateWithoutCourseInput> | EnrollmentsCreateWithoutCourseInput[] | EnrollmentsUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: EnrollmentsCreateOrConnectWithoutCourseInput | EnrollmentsCreateOrConnectWithoutCourseInput[]
    upsert?: EnrollmentsUpsertWithWhereUniqueWithoutCourseInput | EnrollmentsUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: EnrollmentsCreateManyCourseInputEnvelope
    set?: EnrollmentsWhereUniqueInput | EnrollmentsWhereUniqueInput[]
    disconnect?: EnrollmentsWhereUniqueInput | EnrollmentsWhereUniqueInput[]
    delete?: EnrollmentsWhereUniqueInput | EnrollmentsWhereUniqueInput[]
    connect?: EnrollmentsWhereUniqueInput | EnrollmentsWhereUniqueInput[]
    update?: EnrollmentsUpdateWithWhereUniqueWithoutCourseInput | EnrollmentsUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: EnrollmentsUpdateManyWithWhereWithoutCourseInput | EnrollmentsUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: EnrollmentsScalarWhereInput | EnrollmentsScalarWhereInput[]
  }

  export type ProgressUncheckedUpdateManyWithoutCourseNestedInput = {
    create?: XOR<ProgressCreateWithoutCourseInput, ProgressUncheckedCreateWithoutCourseInput> | ProgressCreateWithoutCourseInput[] | ProgressUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: ProgressCreateOrConnectWithoutCourseInput | ProgressCreateOrConnectWithoutCourseInput[]
    upsert?: ProgressUpsertWithWhereUniqueWithoutCourseInput | ProgressUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: ProgressCreateManyCourseInputEnvelope
    set?: ProgressWhereUniqueInput | ProgressWhereUniqueInput[]
    disconnect?: ProgressWhereUniqueInput | ProgressWhereUniqueInput[]
    delete?: ProgressWhereUniqueInput | ProgressWhereUniqueInput[]
    connect?: ProgressWhereUniqueInput | ProgressWhereUniqueInput[]
    update?: ProgressUpdateWithWhereUniqueWithoutCourseInput | ProgressUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: ProgressUpdateManyWithWhereWithoutCourseInput | ProgressUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: ProgressScalarWhereInput | ProgressScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutCourseteachersInput = {
    create?: XOR<UserCreateWithoutCourseteachersInput, UserUncheckedCreateWithoutCourseteachersInput>
    connectOrCreate?: UserCreateOrConnectWithoutCourseteachersInput
    connect?: UserWhereUniqueInput
  }

  export type CoursesCreateNestedOneWithoutCoursesInput = {
    create?: XOR<CoursesCreateWithoutCoursesInput, CoursesUncheckedCreateWithoutCoursesInput>
    connectOrCreate?: CoursesCreateOrConnectWithoutCoursesInput
    connect?: CoursesWhereUniqueInput
  }

  export type EnumTeacherRoleFieldUpdateOperationsInput = {
    set?: $Enums.TeacherRole
  }

  export type UserUpdateOneRequiredWithoutCourseteachersNestedInput = {
    create?: XOR<UserCreateWithoutCourseteachersInput, UserUncheckedCreateWithoutCourseteachersInput>
    connectOrCreate?: UserCreateOrConnectWithoutCourseteachersInput
    upsert?: UserUpsertWithoutCourseteachersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCourseteachersInput, UserUpdateWithoutCourseteachersInput>, UserUncheckedUpdateWithoutCourseteachersInput>
  }

  export type CoursesUpdateOneRequiredWithoutCoursesNestedInput = {
    create?: XOR<CoursesCreateWithoutCoursesInput, CoursesUncheckedCreateWithoutCoursesInput>
    connectOrCreate?: CoursesCreateOrConnectWithoutCoursesInput
    upsert?: CoursesUpsertWithoutCoursesInput
    connect?: CoursesWhereUniqueInput
    update?: XOR<XOR<CoursesUpdateToOneWithWhereWithoutCoursesInput, CoursesUpdateWithoutCoursesInput>, CoursesUncheckedUpdateWithoutCoursesInput>
  }

  export type CoursesCreateNestedOneWithoutLessonsInput = {
    create?: XOR<CoursesCreateWithoutLessonsInput, CoursesUncheckedCreateWithoutLessonsInput>
    connectOrCreate?: CoursesCreateOrConnectWithoutLessonsInput
    connect?: CoursesWhereUniqueInput
  }

  export type ProgressCreateNestedManyWithoutLessonInput = {
    create?: XOR<ProgressCreateWithoutLessonInput, ProgressUncheckedCreateWithoutLessonInput> | ProgressCreateWithoutLessonInput[] | ProgressUncheckedCreateWithoutLessonInput[]
    connectOrCreate?: ProgressCreateOrConnectWithoutLessonInput | ProgressCreateOrConnectWithoutLessonInput[]
    createMany?: ProgressCreateManyLessonInputEnvelope
    connect?: ProgressWhereUniqueInput | ProgressWhereUniqueInput[]
  }

  export type ProgressUncheckedCreateNestedManyWithoutLessonInput = {
    create?: XOR<ProgressCreateWithoutLessonInput, ProgressUncheckedCreateWithoutLessonInput> | ProgressCreateWithoutLessonInput[] | ProgressUncheckedCreateWithoutLessonInput[]
    connectOrCreate?: ProgressCreateOrConnectWithoutLessonInput | ProgressCreateOrConnectWithoutLessonInput[]
    createMany?: ProgressCreateManyLessonInputEnvelope
    connect?: ProgressWhereUniqueInput | ProgressWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CoursesUpdateOneRequiredWithoutLessonsNestedInput = {
    create?: XOR<CoursesCreateWithoutLessonsInput, CoursesUncheckedCreateWithoutLessonsInput>
    connectOrCreate?: CoursesCreateOrConnectWithoutLessonsInput
    upsert?: CoursesUpsertWithoutLessonsInput
    connect?: CoursesWhereUniqueInput
    update?: XOR<XOR<CoursesUpdateToOneWithWhereWithoutLessonsInput, CoursesUpdateWithoutLessonsInput>, CoursesUncheckedUpdateWithoutLessonsInput>
  }

  export type ProgressUpdateManyWithoutLessonNestedInput = {
    create?: XOR<ProgressCreateWithoutLessonInput, ProgressUncheckedCreateWithoutLessonInput> | ProgressCreateWithoutLessonInput[] | ProgressUncheckedCreateWithoutLessonInput[]
    connectOrCreate?: ProgressCreateOrConnectWithoutLessonInput | ProgressCreateOrConnectWithoutLessonInput[]
    upsert?: ProgressUpsertWithWhereUniqueWithoutLessonInput | ProgressUpsertWithWhereUniqueWithoutLessonInput[]
    createMany?: ProgressCreateManyLessonInputEnvelope
    set?: ProgressWhereUniqueInput | ProgressWhereUniqueInput[]
    disconnect?: ProgressWhereUniqueInput | ProgressWhereUniqueInput[]
    delete?: ProgressWhereUniqueInput | ProgressWhereUniqueInput[]
    connect?: ProgressWhereUniqueInput | ProgressWhereUniqueInput[]
    update?: ProgressUpdateWithWhereUniqueWithoutLessonInput | ProgressUpdateWithWhereUniqueWithoutLessonInput[]
    updateMany?: ProgressUpdateManyWithWhereWithoutLessonInput | ProgressUpdateManyWithWhereWithoutLessonInput[]
    deleteMany?: ProgressScalarWhereInput | ProgressScalarWhereInput[]
  }

  export type ProgressUncheckedUpdateManyWithoutLessonNestedInput = {
    create?: XOR<ProgressCreateWithoutLessonInput, ProgressUncheckedCreateWithoutLessonInput> | ProgressCreateWithoutLessonInput[] | ProgressUncheckedCreateWithoutLessonInput[]
    connectOrCreate?: ProgressCreateOrConnectWithoutLessonInput | ProgressCreateOrConnectWithoutLessonInput[]
    upsert?: ProgressUpsertWithWhereUniqueWithoutLessonInput | ProgressUpsertWithWhereUniqueWithoutLessonInput[]
    createMany?: ProgressCreateManyLessonInputEnvelope
    set?: ProgressWhereUniqueInput | ProgressWhereUniqueInput[]
    disconnect?: ProgressWhereUniqueInput | ProgressWhereUniqueInput[]
    delete?: ProgressWhereUniqueInput | ProgressWhereUniqueInput[]
    connect?: ProgressWhereUniqueInput | ProgressWhereUniqueInput[]
    update?: ProgressUpdateWithWhereUniqueWithoutLessonInput | ProgressUpdateWithWhereUniqueWithoutLessonInput[]
    updateMany?: ProgressUpdateManyWithWhereWithoutLessonInput | ProgressUpdateManyWithWhereWithoutLessonInput[]
    deleteMany?: ProgressScalarWhereInput | ProgressScalarWhereInput[]
  }

  export type CoursesCreateNestedOneWithoutQuizzesInput = {
    create?: XOR<CoursesCreateWithoutQuizzesInput, CoursesUncheckedCreateWithoutQuizzesInput>
    connectOrCreate?: CoursesCreateOrConnectWithoutQuizzesInput
    connect?: CoursesWhereUniqueInput
  }

  export type QuestionsCreateNestedManyWithoutQuizzesInput = {
    create?: XOR<QuestionsCreateWithoutQuizzesInput, QuestionsUncheckedCreateWithoutQuizzesInput> | QuestionsCreateWithoutQuizzesInput[] | QuestionsUncheckedCreateWithoutQuizzesInput[]
    connectOrCreate?: QuestionsCreateOrConnectWithoutQuizzesInput | QuestionsCreateOrConnectWithoutQuizzesInput[]
    createMany?: QuestionsCreateManyQuizzesInputEnvelope
    connect?: QuestionsWhereUniqueInput | QuestionsWhereUniqueInput[]
  }

  export type QuestionsUncheckedCreateNestedManyWithoutQuizzesInput = {
    create?: XOR<QuestionsCreateWithoutQuizzesInput, QuestionsUncheckedCreateWithoutQuizzesInput> | QuestionsCreateWithoutQuizzesInput[] | QuestionsUncheckedCreateWithoutQuizzesInput[]
    connectOrCreate?: QuestionsCreateOrConnectWithoutQuizzesInput | QuestionsCreateOrConnectWithoutQuizzesInput[]
    createMany?: QuestionsCreateManyQuizzesInputEnvelope
    connect?: QuestionsWhereUniqueInput | QuestionsWhereUniqueInput[]
  }

  export type CoursesUpdateOneRequiredWithoutQuizzesNestedInput = {
    create?: XOR<CoursesCreateWithoutQuizzesInput, CoursesUncheckedCreateWithoutQuizzesInput>
    connectOrCreate?: CoursesCreateOrConnectWithoutQuizzesInput
    upsert?: CoursesUpsertWithoutQuizzesInput
    connect?: CoursesWhereUniqueInput
    update?: XOR<XOR<CoursesUpdateToOneWithWhereWithoutQuizzesInput, CoursesUpdateWithoutQuizzesInput>, CoursesUncheckedUpdateWithoutQuizzesInput>
  }

  export type QuestionsUpdateManyWithoutQuizzesNestedInput = {
    create?: XOR<QuestionsCreateWithoutQuizzesInput, QuestionsUncheckedCreateWithoutQuizzesInput> | QuestionsCreateWithoutQuizzesInput[] | QuestionsUncheckedCreateWithoutQuizzesInput[]
    connectOrCreate?: QuestionsCreateOrConnectWithoutQuizzesInput | QuestionsCreateOrConnectWithoutQuizzesInput[]
    upsert?: QuestionsUpsertWithWhereUniqueWithoutQuizzesInput | QuestionsUpsertWithWhereUniqueWithoutQuizzesInput[]
    createMany?: QuestionsCreateManyQuizzesInputEnvelope
    set?: QuestionsWhereUniqueInput | QuestionsWhereUniqueInput[]
    disconnect?: QuestionsWhereUniqueInput | QuestionsWhereUniqueInput[]
    delete?: QuestionsWhereUniqueInput | QuestionsWhereUniqueInput[]
    connect?: QuestionsWhereUniqueInput | QuestionsWhereUniqueInput[]
    update?: QuestionsUpdateWithWhereUniqueWithoutQuizzesInput | QuestionsUpdateWithWhereUniqueWithoutQuizzesInput[]
    updateMany?: QuestionsUpdateManyWithWhereWithoutQuizzesInput | QuestionsUpdateManyWithWhereWithoutQuizzesInput[]
    deleteMany?: QuestionsScalarWhereInput | QuestionsScalarWhereInput[]
  }

  export type QuestionsUncheckedUpdateManyWithoutQuizzesNestedInput = {
    create?: XOR<QuestionsCreateWithoutQuizzesInput, QuestionsUncheckedCreateWithoutQuizzesInput> | QuestionsCreateWithoutQuizzesInput[] | QuestionsUncheckedCreateWithoutQuizzesInput[]
    connectOrCreate?: QuestionsCreateOrConnectWithoutQuizzesInput | QuestionsCreateOrConnectWithoutQuizzesInput[]
    upsert?: QuestionsUpsertWithWhereUniqueWithoutQuizzesInput | QuestionsUpsertWithWhereUniqueWithoutQuizzesInput[]
    createMany?: QuestionsCreateManyQuizzesInputEnvelope
    set?: QuestionsWhereUniqueInput | QuestionsWhereUniqueInput[]
    disconnect?: QuestionsWhereUniqueInput | QuestionsWhereUniqueInput[]
    delete?: QuestionsWhereUniqueInput | QuestionsWhereUniqueInput[]
    connect?: QuestionsWhereUniqueInput | QuestionsWhereUniqueInput[]
    update?: QuestionsUpdateWithWhereUniqueWithoutQuizzesInput | QuestionsUpdateWithWhereUniqueWithoutQuizzesInput[]
    updateMany?: QuestionsUpdateManyWithWhereWithoutQuizzesInput | QuestionsUpdateManyWithWhereWithoutQuizzesInput[]
    deleteMany?: QuestionsScalarWhereInput | QuestionsScalarWhereInput[]
  }

  export type QuizzesCreateNestedOneWithoutQuestionsInput = {
    create?: XOR<QuizzesCreateWithoutQuestionsInput, QuizzesUncheckedCreateWithoutQuestionsInput>
    connectOrCreate?: QuizzesCreateOrConnectWithoutQuestionsInput
    connect?: QuizzesWhereUniqueInput
  }

  export type OptionsCreateNestedManyWithoutQuestionInput = {
    create?: XOR<OptionsCreateWithoutQuestionInput, OptionsUncheckedCreateWithoutQuestionInput> | OptionsCreateWithoutQuestionInput[] | OptionsUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: OptionsCreateOrConnectWithoutQuestionInput | OptionsCreateOrConnectWithoutQuestionInput[]
    createMany?: OptionsCreateManyQuestionInputEnvelope
    connect?: OptionsWhereUniqueInput | OptionsWhereUniqueInput[]
  }

  export type OptionsUncheckedCreateNestedManyWithoutQuestionInput = {
    create?: XOR<OptionsCreateWithoutQuestionInput, OptionsUncheckedCreateWithoutQuestionInput> | OptionsCreateWithoutQuestionInput[] | OptionsUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: OptionsCreateOrConnectWithoutQuestionInput | OptionsCreateOrConnectWithoutQuestionInput[]
    createMany?: OptionsCreateManyQuestionInputEnvelope
    connect?: OptionsWhereUniqueInput | OptionsWhereUniqueInput[]
  }

  export type EnumQuestionTypeFieldUpdateOperationsInput = {
    set?: $Enums.QuestionType
  }

  export type QuizzesUpdateOneRequiredWithoutQuestionsNestedInput = {
    create?: XOR<QuizzesCreateWithoutQuestionsInput, QuizzesUncheckedCreateWithoutQuestionsInput>
    connectOrCreate?: QuizzesCreateOrConnectWithoutQuestionsInput
    upsert?: QuizzesUpsertWithoutQuestionsInput
    connect?: QuizzesWhereUniqueInput
    update?: XOR<XOR<QuizzesUpdateToOneWithWhereWithoutQuestionsInput, QuizzesUpdateWithoutQuestionsInput>, QuizzesUncheckedUpdateWithoutQuestionsInput>
  }

  export type OptionsUpdateManyWithoutQuestionNestedInput = {
    create?: XOR<OptionsCreateWithoutQuestionInput, OptionsUncheckedCreateWithoutQuestionInput> | OptionsCreateWithoutQuestionInput[] | OptionsUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: OptionsCreateOrConnectWithoutQuestionInput | OptionsCreateOrConnectWithoutQuestionInput[]
    upsert?: OptionsUpsertWithWhereUniqueWithoutQuestionInput | OptionsUpsertWithWhereUniqueWithoutQuestionInput[]
    createMany?: OptionsCreateManyQuestionInputEnvelope
    set?: OptionsWhereUniqueInput | OptionsWhereUniqueInput[]
    disconnect?: OptionsWhereUniqueInput | OptionsWhereUniqueInput[]
    delete?: OptionsWhereUniqueInput | OptionsWhereUniqueInput[]
    connect?: OptionsWhereUniqueInput | OptionsWhereUniqueInput[]
    update?: OptionsUpdateWithWhereUniqueWithoutQuestionInput | OptionsUpdateWithWhereUniqueWithoutQuestionInput[]
    updateMany?: OptionsUpdateManyWithWhereWithoutQuestionInput | OptionsUpdateManyWithWhereWithoutQuestionInput[]
    deleteMany?: OptionsScalarWhereInput | OptionsScalarWhereInput[]
  }

  export type OptionsUncheckedUpdateManyWithoutQuestionNestedInput = {
    create?: XOR<OptionsCreateWithoutQuestionInput, OptionsUncheckedCreateWithoutQuestionInput> | OptionsCreateWithoutQuestionInput[] | OptionsUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: OptionsCreateOrConnectWithoutQuestionInput | OptionsCreateOrConnectWithoutQuestionInput[]
    upsert?: OptionsUpsertWithWhereUniqueWithoutQuestionInput | OptionsUpsertWithWhereUniqueWithoutQuestionInput[]
    createMany?: OptionsCreateManyQuestionInputEnvelope
    set?: OptionsWhereUniqueInput | OptionsWhereUniqueInput[]
    disconnect?: OptionsWhereUniqueInput | OptionsWhereUniqueInput[]
    delete?: OptionsWhereUniqueInput | OptionsWhereUniqueInput[]
    connect?: OptionsWhereUniqueInput | OptionsWhereUniqueInput[]
    update?: OptionsUpdateWithWhereUniqueWithoutQuestionInput | OptionsUpdateWithWhereUniqueWithoutQuestionInput[]
    updateMany?: OptionsUpdateManyWithWhereWithoutQuestionInput | OptionsUpdateManyWithWhereWithoutQuestionInput[]
    deleteMany?: OptionsScalarWhereInput | OptionsScalarWhereInput[]
  }

  export type QuestionsCreateNestedOneWithoutOptionsInput = {
    create?: XOR<QuestionsCreateWithoutOptionsInput, QuestionsUncheckedCreateWithoutOptionsInput>
    connectOrCreate?: QuestionsCreateOrConnectWithoutOptionsInput
    connect?: QuestionsWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type QuestionsUpdateOneRequiredWithoutOptionsNestedInput = {
    create?: XOR<QuestionsCreateWithoutOptionsInput, QuestionsUncheckedCreateWithoutOptionsInput>
    connectOrCreate?: QuestionsCreateOrConnectWithoutOptionsInput
    upsert?: QuestionsUpsertWithoutOptionsInput
    connect?: QuestionsWhereUniqueInput
    update?: XOR<XOR<QuestionsUpdateToOneWithWhereWithoutOptionsInput, QuestionsUpdateWithoutOptionsInput>, QuestionsUncheckedUpdateWithoutOptionsInput>
  }

  export type UserCreateNestedOneWithoutProgressInput = {
    create?: XOR<UserCreateWithoutProgressInput, UserUncheckedCreateWithoutProgressInput>
    connectOrCreate?: UserCreateOrConnectWithoutProgressInput
    connect?: UserWhereUniqueInput
  }

  export type CoursesCreateNestedOneWithoutProgressInput = {
    create?: XOR<CoursesCreateWithoutProgressInput, CoursesUncheckedCreateWithoutProgressInput>
    connectOrCreate?: CoursesCreateOrConnectWithoutProgressInput
    connect?: CoursesWhereUniqueInput
  }

  export type LessonsCreateNestedOneWithoutProgressInput = {
    create?: XOR<LessonsCreateWithoutProgressInput, LessonsUncheckedCreateWithoutProgressInput>
    connectOrCreate?: LessonsCreateOrConnectWithoutProgressInput
    connect?: LessonsWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutProgressNestedInput = {
    create?: XOR<UserCreateWithoutProgressInput, UserUncheckedCreateWithoutProgressInput>
    connectOrCreate?: UserCreateOrConnectWithoutProgressInput
    upsert?: UserUpsertWithoutProgressInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutProgressInput, UserUpdateWithoutProgressInput>, UserUncheckedUpdateWithoutProgressInput>
  }

  export type CoursesUpdateOneRequiredWithoutProgressNestedInput = {
    create?: XOR<CoursesCreateWithoutProgressInput, CoursesUncheckedCreateWithoutProgressInput>
    connectOrCreate?: CoursesCreateOrConnectWithoutProgressInput
    upsert?: CoursesUpsertWithoutProgressInput
    connect?: CoursesWhereUniqueInput
    update?: XOR<XOR<CoursesUpdateToOneWithWhereWithoutProgressInput, CoursesUpdateWithoutProgressInput>, CoursesUncheckedUpdateWithoutProgressInput>
  }

  export type LessonsUpdateOneRequiredWithoutProgressNestedInput = {
    create?: XOR<LessonsCreateWithoutProgressInput, LessonsUncheckedCreateWithoutProgressInput>
    connectOrCreate?: LessonsCreateOrConnectWithoutProgressInput
    upsert?: LessonsUpsertWithoutProgressInput
    connect?: LessonsWhereUniqueInput
    update?: XOR<XOR<LessonsUpdateToOneWithWhereWithoutProgressInput, LessonsUpdateWithoutProgressInput>, LessonsUncheckedUpdateWithoutProgressInput>
  }

  export type UserCreateNestedOneWithoutDiscussionsInput = {
    create?: XOR<UserCreateWithoutDiscussionsInput, UserUncheckedCreateWithoutDiscussionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutDiscussionsInput
    connect?: UserWhereUniqueInput
  }

  export type CoursesCreateNestedOneWithoutDiscussionsInput = {
    create?: XOR<CoursesCreateWithoutDiscussionsInput, CoursesUncheckedCreateWithoutDiscussionsInput>
    connectOrCreate?: CoursesCreateOrConnectWithoutDiscussionsInput
    connect?: CoursesWhereUniqueInput
  }

  export type CommentsCreateNestedManyWithoutDiscussionInput = {
    create?: XOR<CommentsCreateWithoutDiscussionInput, CommentsUncheckedCreateWithoutDiscussionInput> | CommentsCreateWithoutDiscussionInput[] | CommentsUncheckedCreateWithoutDiscussionInput[]
    connectOrCreate?: CommentsCreateOrConnectWithoutDiscussionInput | CommentsCreateOrConnectWithoutDiscussionInput[]
    createMany?: CommentsCreateManyDiscussionInputEnvelope
    connect?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
  }

  export type CommentsUncheckedCreateNestedManyWithoutDiscussionInput = {
    create?: XOR<CommentsCreateWithoutDiscussionInput, CommentsUncheckedCreateWithoutDiscussionInput> | CommentsCreateWithoutDiscussionInput[] | CommentsUncheckedCreateWithoutDiscussionInput[]
    connectOrCreate?: CommentsCreateOrConnectWithoutDiscussionInput | CommentsCreateOrConnectWithoutDiscussionInput[]
    createMany?: CommentsCreateManyDiscussionInputEnvelope
    connect?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutDiscussionsNestedInput = {
    create?: XOR<UserCreateWithoutDiscussionsInput, UserUncheckedCreateWithoutDiscussionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutDiscussionsInput
    upsert?: UserUpsertWithoutDiscussionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDiscussionsInput, UserUpdateWithoutDiscussionsInput>, UserUncheckedUpdateWithoutDiscussionsInput>
  }

  export type CoursesUpdateOneRequiredWithoutDiscussionsNestedInput = {
    create?: XOR<CoursesCreateWithoutDiscussionsInput, CoursesUncheckedCreateWithoutDiscussionsInput>
    connectOrCreate?: CoursesCreateOrConnectWithoutDiscussionsInput
    upsert?: CoursesUpsertWithoutDiscussionsInput
    connect?: CoursesWhereUniqueInput
    update?: XOR<XOR<CoursesUpdateToOneWithWhereWithoutDiscussionsInput, CoursesUpdateWithoutDiscussionsInput>, CoursesUncheckedUpdateWithoutDiscussionsInput>
  }

  export type CommentsUpdateManyWithoutDiscussionNestedInput = {
    create?: XOR<CommentsCreateWithoutDiscussionInput, CommentsUncheckedCreateWithoutDiscussionInput> | CommentsCreateWithoutDiscussionInput[] | CommentsUncheckedCreateWithoutDiscussionInput[]
    connectOrCreate?: CommentsCreateOrConnectWithoutDiscussionInput | CommentsCreateOrConnectWithoutDiscussionInput[]
    upsert?: CommentsUpsertWithWhereUniqueWithoutDiscussionInput | CommentsUpsertWithWhereUniqueWithoutDiscussionInput[]
    createMany?: CommentsCreateManyDiscussionInputEnvelope
    set?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    disconnect?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    delete?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    connect?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    update?: CommentsUpdateWithWhereUniqueWithoutDiscussionInput | CommentsUpdateWithWhereUniqueWithoutDiscussionInput[]
    updateMany?: CommentsUpdateManyWithWhereWithoutDiscussionInput | CommentsUpdateManyWithWhereWithoutDiscussionInput[]
    deleteMany?: CommentsScalarWhereInput | CommentsScalarWhereInput[]
  }

  export type CommentsUncheckedUpdateManyWithoutDiscussionNestedInput = {
    create?: XOR<CommentsCreateWithoutDiscussionInput, CommentsUncheckedCreateWithoutDiscussionInput> | CommentsCreateWithoutDiscussionInput[] | CommentsUncheckedCreateWithoutDiscussionInput[]
    connectOrCreate?: CommentsCreateOrConnectWithoutDiscussionInput | CommentsCreateOrConnectWithoutDiscussionInput[]
    upsert?: CommentsUpsertWithWhereUniqueWithoutDiscussionInput | CommentsUpsertWithWhereUniqueWithoutDiscussionInput[]
    createMany?: CommentsCreateManyDiscussionInputEnvelope
    set?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    disconnect?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    delete?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    connect?: CommentsWhereUniqueInput | CommentsWhereUniqueInput[]
    update?: CommentsUpdateWithWhereUniqueWithoutDiscussionInput | CommentsUpdateWithWhereUniqueWithoutDiscussionInput[]
    updateMany?: CommentsUpdateManyWithWhereWithoutDiscussionInput | CommentsUpdateManyWithWhereWithoutDiscussionInput[]
    deleteMany?: CommentsScalarWhereInput | CommentsScalarWhereInput[]
  }

  export type DiscussionsCreateNestedOneWithoutCommentsInput = {
    create?: XOR<DiscussionsCreateWithoutCommentsInput, DiscussionsUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: DiscussionsCreateOrConnectWithoutCommentsInput
    connect?: DiscussionsWhereUniqueInput
  }

  export type DiscussionsUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<DiscussionsCreateWithoutCommentsInput, DiscussionsUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: DiscussionsCreateOrConnectWithoutCommentsInput
    upsert?: DiscussionsUpsertWithoutCommentsInput
    connect?: DiscussionsWhereUniqueInput
    update?: XOR<XOR<DiscussionsUpdateToOneWithWhereWithoutCommentsInput, DiscussionsUpdateWithoutCommentsInput>, DiscussionsUncheckedUpdateWithoutCommentsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumCategoryFilter<$PrismaModel = never> = {
    equals?: $Enums.Category | EnumCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.Category[] | ListEnumCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.Category[] | ListEnumCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumCategoryFilter<$PrismaModel> | $Enums.Category
  }

  export type NestedEnumCategoryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Category | EnumCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.Category[] | ListEnumCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.Category[] | ListEnumCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumCategoryWithAggregatesFilter<$PrismaModel> | $Enums.Category
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCategoryFilter<$PrismaModel>
    _max?: NestedEnumCategoryFilter<$PrismaModel>
  }

  export type NestedEnumTeacherRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.TeacherRole | EnumTeacherRoleFieldRefInput<$PrismaModel>
    in?: $Enums.TeacherRole[] | ListEnumTeacherRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.TeacherRole[] | ListEnumTeacherRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumTeacherRoleFilter<$PrismaModel> | $Enums.TeacherRole
  }

  export type NestedEnumTeacherRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TeacherRole | EnumTeacherRoleFieldRefInput<$PrismaModel>
    in?: $Enums.TeacherRole[] | ListEnumTeacherRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.TeacherRole[] | ListEnumTeacherRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumTeacherRoleWithAggregatesFilter<$PrismaModel> | $Enums.TeacherRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTeacherRoleFilter<$PrismaModel>
    _max?: NestedEnumTeacherRoleFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumQuestionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.QuestionType | EnumQuestionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.QuestionType[] | ListEnumQuestionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.QuestionType[] | ListEnumQuestionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumQuestionTypeFilter<$PrismaModel> | $Enums.QuestionType
  }

  export type NestedEnumQuestionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.QuestionType | EnumQuestionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.QuestionType[] | ListEnumQuestionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.QuestionType[] | ListEnumQuestionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumQuestionTypeWithAggregatesFilter<$PrismaModel> | $Enums.QuestionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumQuestionTypeFilter<$PrismaModel>
    _max?: NestedEnumQuestionTypeFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnrollmentsCreateWithoutUserInput = {
    enrollment_id?: string
    enrolled_at?: Date | string
    course: CoursesCreateNestedOneWithoutEnrollmentsInput
  }

  export type EnrollmentsUncheckedCreateWithoutUserInput = {
    enrollment_id?: string
    course_id: string
    enrolled_at?: Date | string
  }

  export type EnrollmentsCreateOrConnectWithoutUserInput = {
    where: EnrollmentsWhereUniqueInput
    create: XOR<EnrollmentsCreateWithoutUserInput, EnrollmentsUncheckedCreateWithoutUserInput>
  }

  export type EnrollmentsCreateManyUserInputEnvelope = {
    data: EnrollmentsCreateManyUserInput | EnrollmentsCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type CourseTeachersCreateWithoutUserInput = {
    id?: string
    teacher_role?: $Enums.TeacherRole
    assigned_at?: Date | string
    courses: CoursesCreateNestedOneWithoutCoursesInput
  }

  export type CourseTeachersUncheckedCreateWithoutUserInput = {
    id?: string
    course_id: string
    teacher_role?: $Enums.TeacherRole
    assigned_at?: Date | string
  }

  export type CourseTeachersCreateOrConnectWithoutUserInput = {
    where: CourseTeachersWhereUniqueInput
    create: XOR<CourseTeachersCreateWithoutUserInput, CourseTeachersUncheckedCreateWithoutUserInput>
  }

  export type CourseTeachersCreateManyUserInputEnvelope = {
    data: CourseTeachersCreateManyUserInput | CourseTeachersCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type DiscussionsCreateWithoutUserInput = {
    discussion_id?: string
    title: string
    content: string
    created_at?: Date | string
    course: CoursesCreateNestedOneWithoutDiscussionsInput
    comments?: CommentsCreateNestedManyWithoutDiscussionInput
  }

  export type DiscussionsUncheckedCreateWithoutUserInput = {
    discussion_id?: string
    course_id: string
    title: string
    content: string
    created_at?: Date | string
    comments?: CommentsUncheckedCreateNestedManyWithoutDiscussionInput
  }

  export type DiscussionsCreateOrConnectWithoutUserInput = {
    where: DiscussionsWhereUniqueInput
    create: XOR<DiscussionsCreateWithoutUserInput, DiscussionsUncheckedCreateWithoutUserInput>
  }

  export type DiscussionsCreateManyUserInputEnvelope = {
    data: DiscussionsCreateManyUserInput | DiscussionsCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ProgressCreateWithoutUserInput = {
    progress_id?: string
    is_complete: boolean
    updated_at?: Date | string
    course: CoursesCreateNestedOneWithoutProgressInput
    lesson: LessonsCreateNestedOneWithoutProgressInput
  }

  export type ProgressUncheckedCreateWithoutUserInput = {
    progress_id?: string
    course_id: string
    lesson_id: string
    is_complete: boolean
    updated_at?: Date | string
  }

  export type ProgressCreateOrConnectWithoutUserInput = {
    where: ProgressWhereUniqueInput
    create: XOR<ProgressCreateWithoutUserInput, ProgressUncheckedCreateWithoutUserInput>
  }

  export type ProgressCreateManyUserInputEnvelope = {
    data: ProgressCreateManyUserInput | ProgressCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type EnrollmentsUpsertWithWhereUniqueWithoutUserInput = {
    where: EnrollmentsWhereUniqueInput
    update: XOR<EnrollmentsUpdateWithoutUserInput, EnrollmentsUncheckedUpdateWithoutUserInput>
    create: XOR<EnrollmentsCreateWithoutUserInput, EnrollmentsUncheckedCreateWithoutUserInput>
  }

  export type EnrollmentsUpdateWithWhereUniqueWithoutUserInput = {
    where: EnrollmentsWhereUniqueInput
    data: XOR<EnrollmentsUpdateWithoutUserInput, EnrollmentsUncheckedUpdateWithoutUserInput>
  }

  export type EnrollmentsUpdateManyWithWhereWithoutUserInput = {
    where: EnrollmentsScalarWhereInput
    data: XOR<EnrollmentsUpdateManyMutationInput, EnrollmentsUncheckedUpdateManyWithoutUserInput>
  }

  export type EnrollmentsScalarWhereInput = {
    AND?: EnrollmentsScalarWhereInput | EnrollmentsScalarWhereInput[]
    OR?: EnrollmentsScalarWhereInput[]
    NOT?: EnrollmentsScalarWhereInput | EnrollmentsScalarWhereInput[]
    enrollment_id?: StringFilter<"Enrollments"> | string
    user_id?: StringFilter<"Enrollments"> | string
    course_id?: StringFilter<"Enrollments"> | string
    enrolled_at?: DateTimeFilter<"Enrollments"> | Date | string
  }

  export type CourseTeachersUpsertWithWhereUniqueWithoutUserInput = {
    where: CourseTeachersWhereUniqueInput
    update: XOR<CourseTeachersUpdateWithoutUserInput, CourseTeachersUncheckedUpdateWithoutUserInput>
    create: XOR<CourseTeachersCreateWithoutUserInput, CourseTeachersUncheckedCreateWithoutUserInput>
  }

  export type CourseTeachersUpdateWithWhereUniqueWithoutUserInput = {
    where: CourseTeachersWhereUniqueInput
    data: XOR<CourseTeachersUpdateWithoutUserInput, CourseTeachersUncheckedUpdateWithoutUserInput>
  }

  export type CourseTeachersUpdateManyWithWhereWithoutUserInput = {
    where: CourseTeachersScalarWhereInput
    data: XOR<CourseTeachersUpdateManyMutationInput, CourseTeachersUncheckedUpdateManyWithoutUserInput>
  }

  export type CourseTeachersScalarWhereInput = {
    AND?: CourseTeachersScalarWhereInput | CourseTeachersScalarWhereInput[]
    OR?: CourseTeachersScalarWhereInput[]
    NOT?: CourseTeachersScalarWhereInput | CourseTeachersScalarWhereInput[]
    id?: StringFilter<"CourseTeachers"> | string
    user_id?: StringFilter<"CourseTeachers"> | string
    course_id?: StringFilter<"CourseTeachers"> | string
    teacher_role?: EnumTeacherRoleFilter<"CourseTeachers"> | $Enums.TeacherRole
    assigned_at?: DateTimeFilter<"CourseTeachers"> | Date | string
  }

  export type DiscussionsUpsertWithWhereUniqueWithoutUserInput = {
    where: DiscussionsWhereUniqueInput
    update: XOR<DiscussionsUpdateWithoutUserInput, DiscussionsUncheckedUpdateWithoutUserInput>
    create: XOR<DiscussionsCreateWithoutUserInput, DiscussionsUncheckedCreateWithoutUserInput>
  }

  export type DiscussionsUpdateWithWhereUniqueWithoutUserInput = {
    where: DiscussionsWhereUniqueInput
    data: XOR<DiscussionsUpdateWithoutUserInput, DiscussionsUncheckedUpdateWithoutUserInput>
  }

  export type DiscussionsUpdateManyWithWhereWithoutUserInput = {
    where: DiscussionsScalarWhereInput
    data: XOR<DiscussionsUpdateManyMutationInput, DiscussionsUncheckedUpdateManyWithoutUserInput>
  }

  export type DiscussionsScalarWhereInput = {
    AND?: DiscussionsScalarWhereInput | DiscussionsScalarWhereInput[]
    OR?: DiscussionsScalarWhereInput[]
    NOT?: DiscussionsScalarWhereInput | DiscussionsScalarWhereInput[]
    discussion_id?: StringFilter<"Discussions"> | string
    course_id?: StringFilter<"Discussions"> | string
    user_id?: StringFilter<"Discussions"> | string
    title?: StringFilter<"Discussions"> | string
    content?: StringFilter<"Discussions"> | string
    created_at?: DateTimeFilter<"Discussions"> | Date | string
  }

  export type ProgressUpsertWithWhereUniqueWithoutUserInput = {
    where: ProgressWhereUniqueInput
    update: XOR<ProgressUpdateWithoutUserInput, ProgressUncheckedUpdateWithoutUserInput>
    create: XOR<ProgressCreateWithoutUserInput, ProgressUncheckedCreateWithoutUserInput>
  }

  export type ProgressUpdateWithWhereUniqueWithoutUserInput = {
    where: ProgressWhereUniqueInput
    data: XOR<ProgressUpdateWithoutUserInput, ProgressUncheckedUpdateWithoutUserInput>
  }

  export type ProgressUpdateManyWithWhereWithoutUserInput = {
    where: ProgressScalarWhereInput
    data: XOR<ProgressUpdateManyMutationInput, ProgressUncheckedUpdateManyWithoutUserInput>
  }

  export type ProgressScalarWhereInput = {
    AND?: ProgressScalarWhereInput | ProgressScalarWhereInput[]
    OR?: ProgressScalarWhereInput[]
    NOT?: ProgressScalarWhereInput | ProgressScalarWhereInput[]
    progress_id?: StringFilter<"Progress"> | string
    user_id?: StringFilter<"Progress"> | string
    course_id?: StringFilter<"Progress"> | string
    lesson_id?: StringFilter<"Progress"> | string
    is_complete?: BoolFilter<"Progress"> | boolean
    updated_at?: DateTimeFilter<"Progress"> | Date | string
  }

  export type UserCreateWithoutEnrollmentsInput = {
    user_id?: string
    username: string
    email: string
    password: string
    role?: $Enums.Role
    createdAt?: Date | string
    courseteachers?: CourseTeachersCreateNestedManyWithoutUserInput
    discussions?: DiscussionsCreateNestedManyWithoutUserInput
    progress?: ProgressCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutEnrollmentsInput = {
    user_id?: string
    username: string
    email: string
    password: string
    role?: $Enums.Role
    createdAt?: Date | string
    courseteachers?: CourseTeachersUncheckedCreateNestedManyWithoutUserInput
    discussions?: DiscussionsUncheckedCreateNestedManyWithoutUserInput
    progress?: ProgressUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutEnrollmentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutEnrollmentsInput, UserUncheckedCreateWithoutEnrollmentsInput>
  }

  export type CoursesCreateWithoutEnrollmentsInput = {
    course_id?: string
    title: string
    description: string
    category: $Enums.Category
    createdAt?: Date | string
    courses?: CourseTeachersCreateNestedManyWithoutCoursesInput
    lessons?: LessonsCreateNestedManyWithoutCourseInput
    quizzes?: QuizzesCreateNestedManyWithoutCourseInput
    discussions?: DiscussionsCreateNestedManyWithoutCourseInput
    progress?: ProgressCreateNestedManyWithoutCourseInput
  }

  export type CoursesUncheckedCreateWithoutEnrollmentsInput = {
    course_id?: string
    title: string
    description: string
    category: $Enums.Category
    createdAt?: Date | string
    courses?: CourseTeachersUncheckedCreateNestedManyWithoutCoursesInput
    lessons?: LessonsUncheckedCreateNestedManyWithoutCourseInput
    quizzes?: QuizzesUncheckedCreateNestedManyWithoutCourseInput
    discussions?: DiscussionsUncheckedCreateNestedManyWithoutCourseInput
    progress?: ProgressUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CoursesCreateOrConnectWithoutEnrollmentsInput = {
    where: CoursesWhereUniqueInput
    create: XOR<CoursesCreateWithoutEnrollmentsInput, CoursesUncheckedCreateWithoutEnrollmentsInput>
  }

  export type UserUpsertWithoutEnrollmentsInput = {
    update: XOR<UserUpdateWithoutEnrollmentsInput, UserUncheckedUpdateWithoutEnrollmentsInput>
    create: XOR<UserCreateWithoutEnrollmentsInput, UserUncheckedCreateWithoutEnrollmentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutEnrollmentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutEnrollmentsInput, UserUncheckedUpdateWithoutEnrollmentsInput>
  }

  export type UserUpdateWithoutEnrollmentsInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    courseteachers?: CourseTeachersUpdateManyWithoutUserNestedInput
    discussions?: DiscussionsUpdateManyWithoutUserNestedInput
    progress?: ProgressUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutEnrollmentsInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    courseteachers?: CourseTeachersUncheckedUpdateManyWithoutUserNestedInput
    discussions?: DiscussionsUncheckedUpdateManyWithoutUserNestedInput
    progress?: ProgressUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CoursesUpsertWithoutEnrollmentsInput = {
    update: XOR<CoursesUpdateWithoutEnrollmentsInput, CoursesUncheckedUpdateWithoutEnrollmentsInput>
    create: XOR<CoursesCreateWithoutEnrollmentsInput, CoursesUncheckedCreateWithoutEnrollmentsInput>
    where?: CoursesWhereInput
  }

  export type CoursesUpdateToOneWithWhereWithoutEnrollmentsInput = {
    where?: CoursesWhereInput
    data: XOR<CoursesUpdateWithoutEnrollmentsInput, CoursesUncheckedUpdateWithoutEnrollmentsInput>
  }

  export type CoursesUpdateWithoutEnrollmentsInput = {
    course_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: EnumCategoryFieldUpdateOperationsInput | $Enums.Category
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    courses?: CourseTeachersUpdateManyWithoutCoursesNestedInput
    lessons?: LessonsUpdateManyWithoutCourseNestedInput
    quizzes?: QuizzesUpdateManyWithoutCourseNestedInput
    discussions?: DiscussionsUpdateManyWithoutCourseNestedInput
    progress?: ProgressUpdateManyWithoutCourseNestedInput
  }

  export type CoursesUncheckedUpdateWithoutEnrollmentsInput = {
    course_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: EnumCategoryFieldUpdateOperationsInput | $Enums.Category
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    courses?: CourseTeachersUncheckedUpdateManyWithoutCoursesNestedInput
    lessons?: LessonsUncheckedUpdateManyWithoutCourseNestedInput
    quizzes?: QuizzesUncheckedUpdateManyWithoutCourseNestedInput
    discussions?: DiscussionsUncheckedUpdateManyWithoutCourseNestedInput
    progress?: ProgressUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type CourseTeachersCreateWithoutCoursesInput = {
    id?: string
    teacher_role?: $Enums.TeacherRole
    assigned_at?: Date | string
    user: UserCreateNestedOneWithoutCourseteachersInput
  }

  export type CourseTeachersUncheckedCreateWithoutCoursesInput = {
    id?: string
    user_id: string
    teacher_role?: $Enums.TeacherRole
    assigned_at?: Date | string
  }

  export type CourseTeachersCreateOrConnectWithoutCoursesInput = {
    where: CourseTeachersWhereUniqueInput
    create: XOR<CourseTeachersCreateWithoutCoursesInput, CourseTeachersUncheckedCreateWithoutCoursesInput>
  }

  export type CourseTeachersCreateManyCoursesInputEnvelope = {
    data: CourseTeachersCreateManyCoursesInput | CourseTeachersCreateManyCoursesInput[]
    skipDuplicates?: boolean
  }

  export type LessonsCreateWithoutCourseInput = {
    lesson_id?: string
    title: string
    content: string
    position: number
    progress?: ProgressCreateNestedManyWithoutLessonInput
  }

  export type LessonsUncheckedCreateWithoutCourseInput = {
    lesson_id?: string
    title: string
    content: string
    position: number
    progress?: ProgressUncheckedCreateNestedManyWithoutLessonInput
  }

  export type LessonsCreateOrConnectWithoutCourseInput = {
    where: LessonsWhereUniqueInput
    create: XOR<LessonsCreateWithoutCourseInput, LessonsUncheckedCreateWithoutCourseInput>
  }

  export type LessonsCreateManyCourseInputEnvelope = {
    data: LessonsCreateManyCourseInput | LessonsCreateManyCourseInput[]
    skipDuplicates?: boolean
  }

  export type QuizzesCreateWithoutCourseInput = {
    quiz_id?: string
    title: string
    total_questions: number
    questions?: QuestionsCreateNestedManyWithoutQuizzesInput
  }

  export type QuizzesUncheckedCreateWithoutCourseInput = {
    quiz_id?: string
    title: string
    total_questions: number
    questions?: QuestionsUncheckedCreateNestedManyWithoutQuizzesInput
  }

  export type QuizzesCreateOrConnectWithoutCourseInput = {
    where: QuizzesWhereUniqueInput
    create: XOR<QuizzesCreateWithoutCourseInput, QuizzesUncheckedCreateWithoutCourseInput>
  }

  export type QuizzesCreateManyCourseInputEnvelope = {
    data: QuizzesCreateManyCourseInput | QuizzesCreateManyCourseInput[]
    skipDuplicates?: boolean
  }

  export type DiscussionsCreateWithoutCourseInput = {
    discussion_id?: string
    title: string
    content: string
    created_at?: Date | string
    user: UserCreateNestedOneWithoutDiscussionsInput
    comments?: CommentsCreateNestedManyWithoutDiscussionInput
  }

  export type DiscussionsUncheckedCreateWithoutCourseInput = {
    discussion_id?: string
    user_id: string
    title: string
    content: string
    created_at?: Date | string
    comments?: CommentsUncheckedCreateNestedManyWithoutDiscussionInput
  }

  export type DiscussionsCreateOrConnectWithoutCourseInput = {
    where: DiscussionsWhereUniqueInput
    create: XOR<DiscussionsCreateWithoutCourseInput, DiscussionsUncheckedCreateWithoutCourseInput>
  }

  export type DiscussionsCreateManyCourseInputEnvelope = {
    data: DiscussionsCreateManyCourseInput | DiscussionsCreateManyCourseInput[]
    skipDuplicates?: boolean
  }

  export type EnrollmentsCreateWithoutCourseInput = {
    enrollment_id?: string
    enrolled_at?: Date | string
    user: UserCreateNestedOneWithoutEnrollmentsInput
  }

  export type EnrollmentsUncheckedCreateWithoutCourseInput = {
    enrollment_id?: string
    user_id: string
    enrolled_at?: Date | string
  }

  export type EnrollmentsCreateOrConnectWithoutCourseInput = {
    where: EnrollmentsWhereUniqueInput
    create: XOR<EnrollmentsCreateWithoutCourseInput, EnrollmentsUncheckedCreateWithoutCourseInput>
  }

  export type EnrollmentsCreateManyCourseInputEnvelope = {
    data: EnrollmentsCreateManyCourseInput | EnrollmentsCreateManyCourseInput[]
    skipDuplicates?: boolean
  }

  export type ProgressCreateWithoutCourseInput = {
    progress_id?: string
    is_complete: boolean
    updated_at?: Date | string
    user: UserCreateNestedOneWithoutProgressInput
    lesson: LessonsCreateNestedOneWithoutProgressInput
  }

  export type ProgressUncheckedCreateWithoutCourseInput = {
    progress_id?: string
    user_id: string
    lesson_id: string
    is_complete: boolean
    updated_at?: Date | string
  }

  export type ProgressCreateOrConnectWithoutCourseInput = {
    where: ProgressWhereUniqueInput
    create: XOR<ProgressCreateWithoutCourseInput, ProgressUncheckedCreateWithoutCourseInput>
  }

  export type ProgressCreateManyCourseInputEnvelope = {
    data: ProgressCreateManyCourseInput | ProgressCreateManyCourseInput[]
    skipDuplicates?: boolean
  }

  export type CourseTeachersUpsertWithWhereUniqueWithoutCoursesInput = {
    where: CourseTeachersWhereUniqueInput
    update: XOR<CourseTeachersUpdateWithoutCoursesInput, CourseTeachersUncheckedUpdateWithoutCoursesInput>
    create: XOR<CourseTeachersCreateWithoutCoursesInput, CourseTeachersUncheckedCreateWithoutCoursesInput>
  }

  export type CourseTeachersUpdateWithWhereUniqueWithoutCoursesInput = {
    where: CourseTeachersWhereUniqueInput
    data: XOR<CourseTeachersUpdateWithoutCoursesInput, CourseTeachersUncheckedUpdateWithoutCoursesInput>
  }

  export type CourseTeachersUpdateManyWithWhereWithoutCoursesInput = {
    where: CourseTeachersScalarWhereInput
    data: XOR<CourseTeachersUpdateManyMutationInput, CourseTeachersUncheckedUpdateManyWithoutCoursesInput>
  }

  export type LessonsUpsertWithWhereUniqueWithoutCourseInput = {
    where: LessonsWhereUniqueInput
    update: XOR<LessonsUpdateWithoutCourseInput, LessonsUncheckedUpdateWithoutCourseInput>
    create: XOR<LessonsCreateWithoutCourseInput, LessonsUncheckedCreateWithoutCourseInput>
  }

  export type LessonsUpdateWithWhereUniqueWithoutCourseInput = {
    where: LessonsWhereUniqueInput
    data: XOR<LessonsUpdateWithoutCourseInput, LessonsUncheckedUpdateWithoutCourseInput>
  }

  export type LessonsUpdateManyWithWhereWithoutCourseInput = {
    where: LessonsScalarWhereInput
    data: XOR<LessonsUpdateManyMutationInput, LessonsUncheckedUpdateManyWithoutCourseInput>
  }

  export type LessonsScalarWhereInput = {
    AND?: LessonsScalarWhereInput | LessonsScalarWhereInput[]
    OR?: LessonsScalarWhereInput[]
    NOT?: LessonsScalarWhereInput | LessonsScalarWhereInput[]
    lesson_id?: StringFilter<"Lessons"> | string
    course_id?: StringFilter<"Lessons"> | string
    title?: StringFilter<"Lessons"> | string
    content?: StringFilter<"Lessons"> | string
    position?: IntFilter<"Lessons"> | number
  }

  export type QuizzesUpsertWithWhereUniqueWithoutCourseInput = {
    where: QuizzesWhereUniqueInput
    update: XOR<QuizzesUpdateWithoutCourseInput, QuizzesUncheckedUpdateWithoutCourseInput>
    create: XOR<QuizzesCreateWithoutCourseInput, QuizzesUncheckedCreateWithoutCourseInput>
  }

  export type QuizzesUpdateWithWhereUniqueWithoutCourseInput = {
    where: QuizzesWhereUniqueInput
    data: XOR<QuizzesUpdateWithoutCourseInput, QuizzesUncheckedUpdateWithoutCourseInput>
  }

  export type QuizzesUpdateManyWithWhereWithoutCourseInput = {
    where: QuizzesScalarWhereInput
    data: XOR<QuizzesUpdateManyMutationInput, QuizzesUncheckedUpdateManyWithoutCourseInput>
  }

  export type QuizzesScalarWhereInput = {
    AND?: QuizzesScalarWhereInput | QuizzesScalarWhereInput[]
    OR?: QuizzesScalarWhereInput[]
    NOT?: QuizzesScalarWhereInput | QuizzesScalarWhereInput[]
    quiz_id?: StringFilter<"Quizzes"> | string
    course_id?: StringFilter<"Quizzes"> | string
    title?: StringFilter<"Quizzes"> | string
    total_questions?: IntFilter<"Quizzes"> | number
  }

  export type DiscussionsUpsertWithWhereUniqueWithoutCourseInput = {
    where: DiscussionsWhereUniqueInput
    update: XOR<DiscussionsUpdateWithoutCourseInput, DiscussionsUncheckedUpdateWithoutCourseInput>
    create: XOR<DiscussionsCreateWithoutCourseInput, DiscussionsUncheckedCreateWithoutCourseInput>
  }

  export type DiscussionsUpdateWithWhereUniqueWithoutCourseInput = {
    where: DiscussionsWhereUniqueInput
    data: XOR<DiscussionsUpdateWithoutCourseInput, DiscussionsUncheckedUpdateWithoutCourseInput>
  }

  export type DiscussionsUpdateManyWithWhereWithoutCourseInput = {
    where: DiscussionsScalarWhereInput
    data: XOR<DiscussionsUpdateManyMutationInput, DiscussionsUncheckedUpdateManyWithoutCourseInput>
  }

  export type EnrollmentsUpsertWithWhereUniqueWithoutCourseInput = {
    where: EnrollmentsWhereUniqueInput
    update: XOR<EnrollmentsUpdateWithoutCourseInput, EnrollmentsUncheckedUpdateWithoutCourseInput>
    create: XOR<EnrollmentsCreateWithoutCourseInput, EnrollmentsUncheckedCreateWithoutCourseInput>
  }

  export type EnrollmentsUpdateWithWhereUniqueWithoutCourseInput = {
    where: EnrollmentsWhereUniqueInput
    data: XOR<EnrollmentsUpdateWithoutCourseInput, EnrollmentsUncheckedUpdateWithoutCourseInput>
  }

  export type EnrollmentsUpdateManyWithWhereWithoutCourseInput = {
    where: EnrollmentsScalarWhereInput
    data: XOR<EnrollmentsUpdateManyMutationInput, EnrollmentsUncheckedUpdateManyWithoutCourseInput>
  }

  export type ProgressUpsertWithWhereUniqueWithoutCourseInput = {
    where: ProgressWhereUniqueInput
    update: XOR<ProgressUpdateWithoutCourseInput, ProgressUncheckedUpdateWithoutCourseInput>
    create: XOR<ProgressCreateWithoutCourseInput, ProgressUncheckedCreateWithoutCourseInput>
  }

  export type ProgressUpdateWithWhereUniqueWithoutCourseInput = {
    where: ProgressWhereUniqueInput
    data: XOR<ProgressUpdateWithoutCourseInput, ProgressUncheckedUpdateWithoutCourseInput>
  }

  export type ProgressUpdateManyWithWhereWithoutCourseInput = {
    where: ProgressScalarWhereInput
    data: XOR<ProgressUpdateManyMutationInput, ProgressUncheckedUpdateManyWithoutCourseInput>
  }

  export type UserCreateWithoutCourseteachersInput = {
    user_id?: string
    username: string
    email: string
    password: string
    role?: $Enums.Role
    createdAt?: Date | string
    enrollments?: EnrollmentsCreateNestedManyWithoutUserInput
    discussions?: DiscussionsCreateNestedManyWithoutUserInput
    progress?: ProgressCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCourseteachersInput = {
    user_id?: string
    username: string
    email: string
    password: string
    role?: $Enums.Role
    createdAt?: Date | string
    enrollments?: EnrollmentsUncheckedCreateNestedManyWithoutUserInput
    discussions?: DiscussionsUncheckedCreateNestedManyWithoutUserInput
    progress?: ProgressUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCourseteachersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCourseteachersInput, UserUncheckedCreateWithoutCourseteachersInput>
  }

  export type CoursesCreateWithoutCoursesInput = {
    course_id?: string
    title: string
    description: string
    category: $Enums.Category
    createdAt?: Date | string
    lessons?: LessonsCreateNestedManyWithoutCourseInput
    quizzes?: QuizzesCreateNestedManyWithoutCourseInput
    discussions?: DiscussionsCreateNestedManyWithoutCourseInput
    enrollments?: EnrollmentsCreateNestedManyWithoutCourseInput
    progress?: ProgressCreateNestedManyWithoutCourseInput
  }

  export type CoursesUncheckedCreateWithoutCoursesInput = {
    course_id?: string
    title: string
    description: string
    category: $Enums.Category
    createdAt?: Date | string
    lessons?: LessonsUncheckedCreateNestedManyWithoutCourseInput
    quizzes?: QuizzesUncheckedCreateNestedManyWithoutCourseInput
    discussions?: DiscussionsUncheckedCreateNestedManyWithoutCourseInput
    enrollments?: EnrollmentsUncheckedCreateNestedManyWithoutCourseInput
    progress?: ProgressUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CoursesCreateOrConnectWithoutCoursesInput = {
    where: CoursesWhereUniqueInput
    create: XOR<CoursesCreateWithoutCoursesInput, CoursesUncheckedCreateWithoutCoursesInput>
  }

  export type UserUpsertWithoutCourseteachersInput = {
    update: XOR<UserUpdateWithoutCourseteachersInput, UserUncheckedUpdateWithoutCourseteachersInput>
    create: XOR<UserCreateWithoutCourseteachersInput, UserUncheckedCreateWithoutCourseteachersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCourseteachersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCourseteachersInput, UserUncheckedUpdateWithoutCourseteachersInput>
  }

  export type UserUpdateWithoutCourseteachersInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollments?: EnrollmentsUpdateManyWithoutUserNestedInput
    discussions?: DiscussionsUpdateManyWithoutUserNestedInput
    progress?: ProgressUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCourseteachersInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollments?: EnrollmentsUncheckedUpdateManyWithoutUserNestedInput
    discussions?: DiscussionsUncheckedUpdateManyWithoutUserNestedInput
    progress?: ProgressUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CoursesUpsertWithoutCoursesInput = {
    update: XOR<CoursesUpdateWithoutCoursesInput, CoursesUncheckedUpdateWithoutCoursesInput>
    create: XOR<CoursesCreateWithoutCoursesInput, CoursesUncheckedCreateWithoutCoursesInput>
    where?: CoursesWhereInput
  }

  export type CoursesUpdateToOneWithWhereWithoutCoursesInput = {
    where?: CoursesWhereInput
    data: XOR<CoursesUpdateWithoutCoursesInput, CoursesUncheckedUpdateWithoutCoursesInput>
  }

  export type CoursesUpdateWithoutCoursesInput = {
    course_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: EnumCategoryFieldUpdateOperationsInput | $Enums.Category
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lessons?: LessonsUpdateManyWithoutCourseNestedInput
    quizzes?: QuizzesUpdateManyWithoutCourseNestedInput
    discussions?: DiscussionsUpdateManyWithoutCourseNestedInput
    enrollments?: EnrollmentsUpdateManyWithoutCourseNestedInput
    progress?: ProgressUpdateManyWithoutCourseNestedInput
  }

  export type CoursesUncheckedUpdateWithoutCoursesInput = {
    course_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: EnumCategoryFieldUpdateOperationsInput | $Enums.Category
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lessons?: LessonsUncheckedUpdateManyWithoutCourseNestedInput
    quizzes?: QuizzesUncheckedUpdateManyWithoutCourseNestedInput
    discussions?: DiscussionsUncheckedUpdateManyWithoutCourseNestedInput
    enrollments?: EnrollmentsUncheckedUpdateManyWithoutCourseNestedInput
    progress?: ProgressUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type CoursesCreateWithoutLessonsInput = {
    course_id?: string
    title: string
    description: string
    category: $Enums.Category
    createdAt?: Date | string
    courses?: CourseTeachersCreateNestedManyWithoutCoursesInput
    quizzes?: QuizzesCreateNestedManyWithoutCourseInput
    discussions?: DiscussionsCreateNestedManyWithoutCourseInput
    enrollments?: EnrollmentsCreateNestedManyWithoutCourseInput
    progress?: ProgressCreateNestedManyWithoutCourseInput
  }

  export type CoursesUncheckedCreateWithoutLessonsInput = {
    course_id?: string
    title: string
    description: string
    category: $Enums.Category
    createdAt?: Date | string
    courses?: CourseTeachersUncheckedCreateNestedManyWithoutCoursesInput
    quizzes?: QuizzesUncheckedCreateNestedManyWithoutCourseInput
    discussions?: DiscussionsUncheckedCreateNestedManyWithoutCourseInput
    enrollments?: EnrollmentsUncheckedCreateNestedManyWithoutCourseInput
    progress?: ProgressUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CoursesCreateOrConnectWithoutLessonsInput = {
    where: CoursesWhereUniqueInput
    create: XOR<CoursesCreateWithoutLessonsInput, CoursesUncheckedCreateWithoutLessonsInput>
  }

  export type ProgressCreateWithoutLessonInput = {
    progress_id?: string
    is_complete: boolean
    updated_at?: Date | string
    user: UserCreateNestedOneWithoutProgressInput
    course: CoursesCreateNestedOneWithoutProgressInput
  }

  export type ProgressUncheckedCreateWithoutLessonInput = {
    progress_id?: string
    user_id: string
    course_id: string
    is_complete: boolean
    updated_at?: Date | string
  }

  export type ProgressCreateOrConnectWithoutLessonInput = {
    where: ProgressWhereUniqueInput
    create: XOR<ProgressCreateWithoutLessonInput, ProgressUncheckedCreateWithoutLessonInput>
  }

  export type ProgressCreateManyLessonInputEnvelope = {
    data: ProgressCreateManyLessonInput | ProgressCreateManyLessonInput[]
    skipDuplicates?: boolean
  }

  export type CoursesUpsertWithoutLessonsInput = {
    update: XOR<CoursesUpdateWithoutLessonsInput, CoursesUncheckedUpdateWithoutLessonsInput>
    create: XOR<CoursesCreateWithoutLessonsInput, CoursesUncheckedCreateWithoutLessonsInput>
    where?: CoursesWhereInput
  }

  export type CoursesUpdateToOneWithWhereWithoutLessonsInput = {
    where?: CoursesWhereInput
    data: XOR<CoursesUpdateWithoutLessonsInput, CoursesUncheckedUpdateWithoutLessonsInput>
  }

  export type CoursesUpdateWithoutLessonsInput = {
    course_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: EnumCategoryFieldUpdateOperationsInput | $Enums.Category
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    courses?: CourseTeachersUpdateManyWithoutCoursesNestedInput
    quizzes?: QuizzesUpdateManyWithoutCourseNestedInput
    discussions?: DiscussionsUpdateManyWithoutCourseNestedInput
    enrollments?: EnrollmentsUpdateManyWithoutCourseNestedInput
    progress?: ProgressUpdateManyWithoutCourseNestedInput
  }

  export type CoursesUncheckedUpdateWithoutLessonsInput = {
    course_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: EnumCategoryFieldUpdateOperationsInput | $Enums.Category
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    courses?: CourseTeachersUncheckedUpdateManyWithoutCoursesNestedInput
    quizzes?: QuizzesUncheckedUpdateManyWithoutCourseNestedInput
    discussions?: DiscussionsUncheckedUpdateManyWithoutCourseNestedInput
    enrollments?: EnrollmentsUncheckedUpdateManyWithoutCourseNestedInput
    progress?: ProgressUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type ProgressUpsertWithWhereUniqueWithoutLessonInput = {
    where: ProgressWhereUniqueInput
    update: XOR<ProgressUpdateWithoutLessonInput, ProgressUncheckedUpdateWithoutLessonInput>
    create: XOR<ProgressCreateWithoutLessonInput, ProgressUncheckedCreateWithoutLessonInput>
  }

  export type ProgressUpdateWithWhereUniqueWithoutLessonInput = {
    where: ProgressWhereUniqueInput
    data: XOR<ProgressUpdateWithoutLessonInput, ProgressUncheckedUpdateWithoutLessonInput>
  }

  export type ProgressUpdateManyWithWhereWithoutLessonInput = {
    where: ProgressScalarWhereInput
    data: XOR<ProgressUpdateManyMutationInput, ProgressUncheckedUpdateManyWithoutLessonInput>
  }

  export type CoursesCreateWithoutQuizzesInput = {
    course_id?: string
    title: string
    description: string
    category: $Enums.Category
    createdAt?: Date | string
    courses?: CourseTeachersCreateNestedManyWithoutCoursesInput
    lessons?: LessonsCreateNestedManyWithoutCourseInput
    discussions?: DiscussionsCreateNestedManyWithoutCourseInput
    enrollments?: EnrollmentsCreateNestedManyWithoutCourseInput
    progress?: ProgressCreateNestedManyWithoutCourseInput
  }

  export type CoursesUncheckedCreateWithoutQuizzesInput = {
    course_id?: string
    title: string
    description: string
    category: $Enums.Category
    createdAt?: Date | string
    courses?: CourseTeachersUncheckedCreateNestedManyWithoutCoursesInput
    lessons?: LessonsUncheckedCreateNestedManyWithoutCourseInput
    discussions?: DiscussionsUncheckedCreateNestedManyWithoutCourseInput
    enrollments?: EnrollmentsUncheckedCreateNestedManyWithoutCourseInput
    progress?: ProgressUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CoursesCreateOrConnectWithoutQuizzesInput = {
    where: CoursesWhereUniqueInput
    create: XOR<CoursesCreateWithoutQuizzesInput, CoursesUncheckedCreateWithoutQuizzesInput>
  }

  export type QuestionsCreateWithoutQuizzesInput = {
    question_id?: string
    text: string
    type: $Enums.QuestionType
    options?: OptionsCreateNestedManyWithoutQuestionInput
  }

  export type QuestionsUncheckedCreateWithoutQuizzesInput = {
    question_id?: string
    text: string
    type: $Enums.QuestionType
    options?: OptionsUncheckedCreateNestedManyWithoutQuestionInput
  }

  export type QuestionsCreateOrConnectWithoutQuizzesInput = {
    where: QuestionsWhereUniqueInput
    create: XOR<QuestionsCreateWithoutQuizzesInput, QuestionsUncheckedCreateWithoutQuizzesInput>
  }

  export type QuestionsCreateManyQuizzesInputEnvelope = {
    data: QuestionsCreateManyQuizzesInput | QuestionsCreateManyQuizzesInput[]
    skipDuplicates?: boolean
  }

  export type CoursesUpsertWithoutQuizzesInput = {
    update: XOR<CoursesUpdateWithoutQuizzesInput, CoursesUncheckedUpdateWithoutQuizzesInput>
    create: XOR<CoursesCreateWithoutQuizzesInput, CoursesUncheckedCreateWithoutQuizzesInput>
    where?: CoursesWhereInput
  }

  export type CoursesUpdateToOneWithWhereWithoutQuizzesInput = {
    where?: CoursesWhereInput
    data: XOR<CoursesUpdateWithoutQuizzesInput, CoursesUncheckedUpdateWithoutQuizzesInput>
  }

  export type CoursesUpdateWithoutQuizzesInput = {
    course_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: EnumCategoryFieldUpdateOperationsInput | $Enums.Category
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    courses?: CourseTeachersUpdateManyWithoutCoursesNestedInput
    lessons?: LessonsUpdateManyWithoutCourseNestedInput
    discussions?: DiscussionsUpdateManyWithoutCourseNestedInput
    enrollments?: EnrollmentsUpdateManyWithoutCourseNestedInput
    progress?: ProgressUpdateManyWithoutCourseNestedInput
  }

  export type CoursesUncheckedUpdateWithoutQuizzesInput = {
    course_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: EnumCategoryFieldUpdateOperationsInput | $Enums.Category
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    courses?: CourseTeachersUncheckedUpdateManyWithoutCoursesNestedInput
    lessons?: LessonsUncheckedUpdateManyWithoutCourseNestedInput
    discussions?: DiscussionsUncheckedUpdateManyWithoutCourseNestedInput
    enrollments?: EnrollmentsUncheckedUpdateManyWithoutCourseNestedInput
    progress?: ProgressUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type QuestionsUpsertWithWhereUniqueWithoutQuizzesInput = {
    where: QuestionsWhereUniqueInput
    update: XOR<QuestionsUpdateWithoutQuizzesInput, QuestionsUncheckedUpdateWithoutQuizzesInput>
    create: XOR<QuestionsCreateWithoutQuizzesInput, QuestionsUncheckedCreateWithoutQuizzesInput>
  }

  export type QuestionsUpdateWithWhereUniqueWithoutQuizzesInput = {
    where: QuestionsWhereUniqueInput
    data: XOR<QuestionsUpdateWithoutQuizzesInput, QuestionsUncheckedUpdateWithoutQuizzesInput>
  }

  export type QuestionsUpdateManyWithWhereWithoutQuizzesInput = {
    where: QuestionsScalarWhereInput
    data: XOR<QuestionsUpdateManyMutationInput, QuestionsUncheckedUpdateManyWithoutQuizzesInput>
  }

  export type QuestionsScalarWhereInput = {
    AND?: QuestionsScalarWhereInput | QuestionsScalarWhereInput[]
    OR?: QuestionsScalarWhereInput[]
    NOT?: QuestionsScalarWhereInput | QuestionsScalarWhereInput[]
    question_id?: StringFilter<"Questions"> | string
    quiz_id?: StringFilter<"Questions"> | string
    text?: StringFilter<"Questions"> | string
    type?: EnumQuestionTypeFilter<"Questions"> | $Enums.QuestionType
  }

  export type QuizzesCreateWithoutQuestionsInput = {
    quiz_id?: string
    title: string
    total_questions: number
    course: CoursesCreateNestedOneWithoutQuizzesInput
  }

  export type QuizzesUncheckedCreateWithoutQuestionsInput = {
    quiz_id?: string
    course_id: string
    title: string
    total_questions: number
  }

  export type QuizzesCreateOrConnectWithoutQuestionsInput = {
    where: QuizzesWhereUniqueInput
    create: XOR<QuizzesCreateWithoutQuestionsInput, QuizzesUncheckedCreateWithoutQuestionsInput>
  }

  export type OptionsCreateWithoutQuestionInput = {
    option_id?: string
    text: string
    is_correct: boolean
  }

  export type OptionsUncheckedCreateWithoutQuestionInput = {
    option_id?: string
    text: string
    is_correct: boolean
  }

  export type OptionsCreateOrConnectWithoutQuestionInput = {
    where: OptionsWhereUniqueInput
    create: XOR<OptionsCreateWithoutQuestionInput, OptionsUncheckedCreateWithoutQuestionInput>
  }

  export type OptionsCreateManyQuestionInputEnvelope = {
    data: OptionsCreateManyQuestionInput | OptionsCreateManyQuestionInput[]
    skipDuplicates?: boolean
  }

  export type QuizzesUpsertWithoutQuestionsInput = {
    update: XOR<QuizzesUpdateWithoutQuestionsInput, QuizzesUncheckedUpdateWithoutQuestionsInput>
    create: XOR<QuizzesCreateWithoutQuestionsInput, QuizzesUncheckedCreateWithoutQuestionsInput>
    where?: QuizzesWhereInput
  }

  export type QuizzesUpdateToOneWithWhereWithoutQuestionsInput = {
    where?: QuizzesWhereInput
    data: XOR<QuizzesUpdateWithoutQuestionsInput, QuizzesUncheckedUpdateWithoutQuestionsInput>
  }

  export type QuizzesUpdateWithoutQuestionsInput = {
    quiz_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    total_questions?: IntFieldUpdateOperationsInput | number
    course?: CoursesUpdateOneRequiredWithoutQuizzesNestedInput
  }

  export type QuizzesUncheckedUpdateWithoutQuestionsInput = {
    quiz_id?: StringFieldUpdateOperationsInput | string
    course_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    total_questions?: IntFieldUpdateOperationsInput | number
  }

  export type OptionsUpsertWithWhereUniqueWithoutQuestionInput = {
    where: OptionsWhereUniqueInput
    update: XOR<OptionsUpdateWithoutQuestionInput, OptionsUncheckedUpdateWithoutQuestionInput>
    create: XOR<OptionsCreateWithoutQuestionInput, OptionsUncheckedCreateWithoutQuestionInput>
  }

  export type OptionsUpdateWithWhereUniqueWithoutQuestionInput = {
    where: OptionsWhereUniqueInput
    data: XOR<OptionsUpdateWithoutQuestionInput, OptionsUncheckedUpdateWithoutQuestionInput>
  }

  export type OptionsUpdateManyWithWhereWithoutQuestionInput = {
    where: OptionsScalarWhereInput
    data: XOR<OptionsUpdateManyMutationInput, OptionsUncheckedUpdateManyWithoutQuestionInput>
  }

  export type OptionsScalarWhereInput = {
    AND?: OptionsScalarWhereInput | OptionsScalarWhereInput[]
    OR?: OptionsScalarWhereInput[]
    NOT?: OptionsScalarWhereInput | OptionsScalarWhereInput[]
    option_id?: StringFilter<"Options"> | string
    question_id?: StringFilter<"Options"> | string
    text?: StringFilter<"Options"> | string
    is_correct?: BoolFilter<"Options"> | boolean
  }

  export type QuestionsCreateWithoutOptionsInput = {
    question_id?: string
    text: string
    type: $Enums.QuestionType
    quizzes: QuizzesCreateNestedOneWithoutQuestionsInput
  }

  export type QuestionsUncheckedCreateWithoutOptionsInput = {
    question_id?: string
    quiz_id: string
    text: string
    type: $Enums.QuestionType
  }

  export type QuestionsCreateOrConnectWithoutOptionsInput = {
    where: QuestionsWhereUniqueInput
    create: XOR<QuestionsCreateWithoutOptionsInput, QuestionsUncheckedCreateWithoutOptionsInput>
  }

  export type QuestionsUpsertWithoutOptionsInput = {
    update: XOR<QuestionsUpdateWithoutOptionsInput, QuestionsUncheckedUpdateWithoutOptionsInput>
    create: XOR<QuestionsCreateWithoutOptionsInput, QuestionsUncheckedCreateWithoutOptionsInput>
    where?: QuestionsWhereInput
  }

  export type QuestionsUpdateToOneWithWhereWithoutOptionsInput = {
    where?: QuestionsWhereInput
    data: XOR<QuestionsUpdateWithoutOptionsInput, QuestionsUncheckedUpdateWithoutOptionsInput>
  }

  export type QuestionsUpdateWithoutOptionsInput = {
    question_id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    type?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    quizzes?: QuizzesUpdateOneRequiredWithoutQuestionsNestedInput
  }

  export type QuestionsUncheckedUpdateWithoutOptionsInput = {
    question_id?: StringFieldUpdateOperationsInput | string
    quiz_id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    type?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
  }

  export type UserCreateWithoutProgressInput = {
    user_id?: string
    username: string
    email: string
    password: string
    role?: $Enums.Role
    createdAt?: Date | string
    enrollments?: EnrollmentsCreateNestedManyWithoutUserInput
    courseteachers?: CourseTeachersCreateNestedManyWithoutUserInput
    discussions?: DiscussionsCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutProgressInput = {
    user_id?: string
    username: string
    email: string
    password: string
    role?: $Enums.Role
    createdAt?: Date | string
    enrollments?: EnrollmentsUncheckedCreateNestedManyWithoutUserInput
    courseteachers?: CourseTeachersUncheckedCreateNestedManyWithoutUserInput
    discussions?: DiscussionsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutProgressInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProgressInput, UserUncheckedCreateWithoutProgressInput>
  }

  export type CoursesCreateWithoutProgressInput = {
    course_id?: string
    title: string
    description: string
    category: $Enums.Category
    createdAt?: Date | string
    courses?: CourseTeachersCreateNestedManyWithoutCoursesInput
    lessons?: LessonsCreateNestedManyWithoutCourseInput
    quizzes?: QuizzesCreateNestedManyWithoutCourseInput
    discussions?: DiscussionsCreateNestedManyWithoutCourseInput
    enrollments?: EnrollmentsCreateNestedManyWithoutCourseInput
  }

  export type CoursesUncheckedCreateWithoutProgressInput = {
    course_id?: string
    title: string
    description: string
    category: $Enums.Category
    createdAt?: Date | string
    courses?: CourseTeachersUncheckedCreateNestedManyWithoutCoursesInput
    lessons?: LessonsUncheckedCreateNestedManyWithoutCourseInput
    quizzes?: QuizzesUncheckedCreateNestedManyWithoutCourseInput
    discussions?: DiscussionsUncheckedCreateNestedManyWithoutCourseInput
    enrollments?: EnrollmentsUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CoursesCreateOrConnectWithoutProgressInput = {
    where: CoursesWhereUniqueInput
    create: XOR<CoursesCreateWithoutProgressInput, CoursesUncheckedCreateWithoutProgressInput>
  }

  export type LessonsCreateWithoutProgressInput = {
    lesson_id?: string
    title: string
    content: string
    position: number
    course: CoursesCreateNestedOneWithoutLessonsInput
  }

  export type LessonsUncheckedCreateWithoutProgressInput = {
    lesson_id?: string
    course_id: string
    title: string
    content: string
    position: number
  }

  export type LessonsCreateOrConnectWithoutProgressInput = {
    where: LessonsWhereUniqueInput
    create: XOR<LessonsCreateWithoutProgressInput, LessonsUncheckedCreateWithoutProgressInput>
  }

  export type UserUpsertWithoutProgressInput = {
    update: XOR<UserUpdateWithoutProgressInput, UserUncheckedUpdateWithoutProgressInput>
    create: XOR<UserCreateWithoutProgressInput, UserUncheckedCreateWithoutProgressInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutProgressInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutProgressInput, UserUncheckedUpdateWithoutProgressInput>
  }

  export type UserUpdateWithoutProgressInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollments?: EnrollmentsUpdateManyWithoutUserNestedInput
    courseteachers?: CourseTeachersUpdateManyWithoutUserNestedInput
    discussions?: DiscussionsUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutProgressInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollments?: EnrollmentsUncheckedUpdateManyWithoutUserNestedInput
    courseteachers?: CourseTeachersUncheckedUpdateManyWithoutUserNestedInput
    discussions?: DiscussionsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CoursesUpsertWithoutProgressInput = {
    update: XOR<CoursesUpdateWithoutProgressInput, CoursesUncheckedUpdateWithoutProgressInput>
    create: XOR<CoursesCreateWithoutProgressInput, CoursesUncheckedCreateWithoutProgressInput>
    where?: CoursesWhereInput
  }

  export type CoursesUpdateToOneWithWhereWithoutProgressInput = {
    where?: CoursesWhereInput
    data: XOR<CoursesUpdateWithoutProgressInput, CoursesUncheckedUpdateWithoutProgressInput>
  }

  export type CoursesUpdateWithoutProgressInput = {
    course_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: EnumCategoryFieldUpdateOperationsInput | $Enums.Category
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    courses?: CourseTeachersUpdateManyWithoutCoursesNestedInput
    lessons?: LessonsUpdateManyWithoutCourseNestedInput
    quizzes?: QuizzesUpdateManyWithoutCourseNestedInput
    discussions?: DiscussionsUpdateManyWithoutCourseNestedInput
    enrollments?: EnrollmentsUpdateManyWithoutCourseNestedInput
  }

  export type CoursesUncheckedUpdateWithoutProgressInput = {
    course_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: EnumCategoryFieldUpdateOperationsInput | $Enums.Category
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    courses?: CourseTeachersUncheckedUpdateManyWithoutCoursesNestedInput
    lessons?: LessonsUncheckedUpdateManyWithoutCourseNestedInput
    quizzes?: QuizzesUncheckedUpdateManyWithoutCourseNestedInput
    discussions?: DiscussionsUncheckedUpdateManyWithoutCourseNestedInput
    enrollments?: EnrollmentsUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type LessonsUpsertWithoutProgressInput = {
    update: XOR<LessonsUpdateWithoutProgressInput, LessonsUncheckedUpdateWithoutProgressInput>
    create: XOR<LessonsCreateWithoutProgressInput, LessonsUncheckedCreateWithoutProgressInput>
    where?: LessonsWhereInput
  }

  export type LessonsUpdateToOneWithWhereWithoutProgressInput = {
    where?: LessonsWhereInput
    data: XOR<LessonsUpdateWithoutProgressInput, LessonsUncheckedUpdateWithoutProgressInput>
  }

  export type LessonsUpdateWithoutProgressInput = {
    lesson_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    course?: CoursesUpdateOneRequiredWithoutLessonsNestedInput
  }

  export type LessonsUncheckedUpdateWithoutProgressInput = {
    lesson_id?: StringFieldUpdateOperationsInput | string
    course_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
  }

  export type UserCreateWithoutDiscussionsInput = {
    user_id?: string
    username: string
    email: string
    password: string
    role?: $Enums.Role
    createdAt?: Date | string
    enrollments?: EnrollmentsCreateNestedManyWithoutUserInput
    courseteachers?: CourseTeachersCreateNestedManyWithoutUserInput
    progress?: ProgressCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutDiscussionsInput = {
    user_id?: string
    username: string
    email: string
    password: string
    role?: $Enums.Role
    createdAt?: Date | string
    enrollments?: EnrollmentsUncheckedCreateNestedManyWithoutUserInput
    courseteachers?: CourseTeachersUncheckedCreateNestedManyWithoutUserInput
    progress?: ProgressUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutDiscussionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDiscussionsInput, UserUncheckedCreateWithoutDiscussionsInput>
  }

  export type CoursesCreateWithoutDiscussionsInput = {
    course_id?: string
    title: string
    description: string
    category: $Enums.Category
    createdAt?: Date | string
    courses?: CourseTeachersCreateNestedManyWithoutCoursesInput
    lessons?: LessonsCreateNestedManyWithoutCourseInput
    quizzes?: QuizzesCreateNestedManyWithoutCourseInput
    enrollments?: EnrollmentsCreateNestedManyWithoutCourseInput
    progress?: ProgressCreateNestedManyWithoutCourseInput
  }

  export type CoursesUncheckedCreateWithoutDiscussionsInput = {
    course_id?: string
    title: string
    description: string
    category: $Enums.Category
    createdAt?: Date | string
    courses?: CourseTeachersUncheckedCreateNestedManyWithoutCoursesInput
    lessons?: LessonsUncheckedCreateNestedManyWithoutCourseInput
    quizzes?: QuizzesUncheckedCreateNestedManyWithoutCourseInput
    enrollments?: EnrollmentsUncheckedCreateNestedManyWithoutCourseInput
    progress?: ProgressUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CoursesCreateOrConnectWithoutDiscussionsInput = {
    where: CoursesWhereUniqueInput
    create: XOR<CoursesCreateWithoutDiscussionsInput, CoursesUncheckedCreateWithoutDiscussionsInput>
  }

  export type CommentsCreateWithoutDiscussionInput = {
    comment_id?: string
    user_id: string
    content: string
    created_at?: Date | string
  }

  export type CommentsUncheckedCreateWithoutDiscussionInput = {
    comment_id?: string
    user_id: string
    content: string
    created_at?: Date | string
  }

  export type CommentsCreateOrConnectWithoutDiscussionInput = {
    where: CommentsWhereUniqueInput
    create: XOR<CommentsCreateWithoutDiscussionInput, CommentsUncheckedCreateWithoutDiscussionInput>
  }

  export type CommentsCreateManyDiscussionInputEnvelope = {
    data: CommentsCreateManyDiscussionInput | CommentsCreateManyDiscussionInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutDiscussionsInput = {
    update: XOR<UserUpdateWithoutDiscussionsInput, UserUncheckedUpdateWithoutDiscussionsInput>
    create: XOR<UserCreateWithoutDiscussionsInput, UserUncheckedCreateWithoutDiscussionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutDiscussionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutDiscussionsInput, UserUncheckedUpdateWithoutDiscussionsInput>
  }

  export type UserUpdateWithoutDiscussionsInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollments?: EnrollmentsUpdateManyWithoutUserNestedInput
    courseteachers?: CourseTeachersUpdateManyWithoutUserNestedInput
    progress?: ProgressUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutDiscussionsInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollments?: EnrollmentsUncheckedUpdateManyWithoutUserNestedInput
    courseteachers?: CourseTeachersUncheckedUpdateManyWithoutUserNestedInput
    progress?: ProgressUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CoursesUpsertWithoutDiscussionsInput = {
    update: XOR<CoursesUpdateWithoutDiscussionsInput, CoursesUncheckedUpdateWithoutDiscussionsInput>
    create: XOR<CoursesCreateWithoutDiscussionsInput, CoursesUncheckedCreateWithoutDiscussionsInput>
    where?: CoursesWhereInput
  }

  export type CoursesUpdateToOneWithWhereWithoutDiscussionsInput = {
    where?: CoursesWhereInput
    data: XOR<CoursesUpdateWithoutDiscussionsInput, CoursesUncheckedUpdateWithoutDiscussionsInput>
  }

  export type CoursesUpdateWithoutDiscussionsInput = {
    course_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: EnumCategoryFieldUpdateOperationsInput | $Enums.Category
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    courses?: CourseTeachersUpdateManyWithoutCoursesNestedInput
    lessons?: LessonsUpdateManyWithoutCourseNestedInput
    quizzes?: QuizzesUpdateManyWithoutCourseNestedInput
    enrollments?: EnrollmentsUpdateManyWithoutCourseNestedInput
    progress?: ProgressUpdateManyWithoutCourseNestedInput
  }

  export type CoursesUncheckedUpdateWithoutDiscussionsInput = {
    course_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: EnumCategoryFieldUpdateOperationsInput | $Enums.Category
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    courses?: CourseTeachersUncheckedUpdateManyWithoutCoursesNestedInput
    lessons?: LessonsUncheckedUpdateManyWithoutCourseNestedInput
    quizzes?: QuizzesUncheckedUpdateManyWithoutCourseNestedInput
    enrollments?: EnrollmentsUncheckedUpdateManyWithoutCourseNestedInput
    progress?: ProgressUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type CommentsUpsertWithWhereUniqueWithoutDiscussionInput = {
    where: CommentsWhereUniqueInput
    update: XOR<CommentsUpdateWithoutDiscussionInput, CommentsUncheckedUpdateWithoutDiscussionInput>
    create: XOR<CommentsCreateWithoutDiscussionInput, CommentsUncheckedCreateWithoutDiscussionInput>
  }

  export type CommentsUpdateWithWhereUniqueWithoutDiscussionInput = {
    where: CommentsWhereUniqueInput
    data: XOR<CommentsUpdateWithoutDiscussionInput, CommentsUncheckedUpdateWithoutDiscussionInput>
  }

  export type CommentsUpdateManyWithWhereWithoutDiscussionInput = {
    where: CommentsScalarWhereInput
    data: XOR<CommentsUpdateManyMutationInput, CommentsUncheckedUpdateManyWithoutDiscussionInput>
  }

  export type CommentsScalarWhereInput = {
    AND?: CommentsScalarWhereInput | CommentsScalarWhereInput[]
    OR?: CommentsScalarWhereInput[]
    NOT?: CommentsScalarWhereInput | CommentsScalarWhereInput[]
    comment_id?: StringFilter<"Comments"> | string
    discussion_id?: StringFilter<"Comments"> | string
    user_id?: StringFilter<"Comments"> | string
    content?: StringFilter<"Comments"> | string
    created_at?: DateTimeFilter<"Comments"> | Date | string
  }

  export type DiscussionsCreateWithoutCommentsInput = {
    discussion_id?: string
    title: string
    content: string
    created_at?: Date | string
    user: UserCreateNestedOneWithoutDiscussionsInput
    course: CoursesCreateNestedOneWithoutDiscussionsInput
  }

  export type DiscussionsUncheckedCreateWithoutCommentsInput = {
    discussion_id?: string
    course_id: string
    user_id: string
    title: string
    content: string
    created_at?: Date | string
  }

  export type DiscussionsCreateOrConnectWithoutCommentsInput = {
    where: DiscussionsWhereUniqueInput
    create: XOR<DiscussionsCreateWithoutCommentsInput, DiscussionsUncheckedCreateWithoutCommentsInput>
  }

  export type DiscussionsUpsertWithoutCommentsInput = {
    update: XOR<DiscussionsUpdateWithoutCommentsInput, DiscussionsUncheckedUpdateWithoutCommentsInput>
    create: XOR<DiscussionsCreateWithoutCommentsInput, DiscussionsUncheckedCreateWithoutCommentsInput>
    where?: DiscussionsWhereInput
  }

  export type DiscussionsUpdateToOneWithWhereWithoutCommentsInput = {
    where?: DiscussionsWhereInput
    data: XOR<DiscussionsUpdateWithoutCommentsInput, DiscussionsUncheckedUpdateWithoutCommentsInput>
  }

  export type DiscussionsUpdateWithoutCommentsInput = {
    discussion_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutDiscussionsNestedInput
    course?: CoursesUpdateOneRequiredWithoutDiscussionsNestedInput
  }

  export type DiscussionsUncheckedUpdateWithoutCommentsInput = {
    discussion_id?: StringFieldUpdateOperationsInput | string
    course_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EnrollmentsCreateManyUserInput = {
    enrollment_id?: string
    course_id: string
    enrolled_at?: Date | string
  }

  export type CourseTeachersCreateManyUserInput = {
    id?: string
    course_id: string
    teacher_role?: $Enums.TeacherRole
    assigned_at?: Date | string
  }

  export type DiscussionsCreateManyUserInput = {
    discussion_id?: string
    course_id: string
    title: string
    content: string
    created_at?: Date | string
  }

  export type ProgressCreateManyUserInput = {
    progress_id?: string
    course_id: string
    lesson_id: string
    is_complete: boolean
    updated_at?: Date | string
  }

  export type EnrollmentsUpdateWithoutUserInput = {
    enrollment_id?: StringFieldUpdateOperationsInput | string
    enrolled_at?: DateTimeFieldUpdateOperationsInput | Date | string
    course?: CoursesUpdateOneRequiredWithoutEnrollmentsNestedInput
  }

  export type EnrollmentsUncheckedUpdateWithoutUserInput = {
    enrollment_id?: StringFieldUpdateOperationsInput | string
    course_id?: StringFieldUpdateOperationsInput | string
    enrolled_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EnrollmentsUncheckedUpdateManyWithoutUserInput = {
    enrollment_id?: StringFieldUpdateOperationsInput | string
    course_id?: StringFieldUpdateOperationsInput | string
    enrolled_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourseTeachersUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    teacher_role?: EnumTeacherRoleFieldUpdateOperationsInput | $Enums.TeacherRole
    assigned_at?: DateTimeFieldUpdateOperationsInput | Date | string
    courses?: CoursesUpdateOneRequiredWithoutCoursesNestedInput
  }

  export type CourseTeachersUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    course_id?: StringFieldUpdateOperationsInput | string
    teacher_role?: EnumTeacherRoleFieldUpdateOperationsInput | $Enums.TeacherRole
    assigned_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourseTeachersUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    course_id?: StringFieldUpdateOperationsInput | string
    teacher_role?: EnumTeacherRoleFieldUpdateOperationsInput | $Enums.TeacherRole
    assigned_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DiscussionsUpdateWithoutUserInput = {
    discussion_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    course?: CoursesUpdateOneRequiredWithoutDiscussionsNestedInput
    comments?: CommentsUpdateManyWithoutDiscussionNestedInput
  }

  export type DiscussionsUncheckedUpdateWithoutUserInput = {
    discussion_id?: StringFieldUpdateOperationsInput | string
    course_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    comments?: CommentsUncheckedUpdateManyWithoutDiscussionNestedInput
  }

  export type DiscussionsUncheckedUpdateManyWithoutUserInput = {
    discussion_id?: StringFieldUpdateOperationsInput | string
    course_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProgressUpdateWithoutUserInput = {
    progress_id?: StringFieldUpdateOperationsInput | string
    is_complete?: BoolFieldUpdateOperationsInput | boolean
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    course?: CoursesUpdateOneRequiredWithoutProgressNestedInput
    lesson?: LessonsUpdateOneRequiredWithoutProgressNestedInput
  }

  export type ProgressUncheckedUpdateWithoutUserInput = {
    progress_id?: StringFieldUpdateOperationsInput | string
    course_id?: StringFieldUpdateOperationsInput | string
    lesson_id?: StringFieldUpdateOperationsInput | string
    is_complete?: BoolFieldUpdateOperationsInput | boolean
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProgressUncheckedUpdateManyWithoutUserInput = {
    progress_id?: StringFieldUpdateOperationsInput | string
    course_id?: StringFieldUpdateOperationsInput | string
    lesson_id?: StringFieldUpdateOperationsInput | string
    is_complete?: BoolFieldUpdateOperationsInput | boolean
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourseTeachersCreateManyCoursesInput = {
    id?: string
    user_id: string
    teacher_role?: $Enums.TeacherRole
    assigned_at?: Date | string
  }

  export type LessonsCreateManyCourseInput = {
    lesson_id?: string
    title: string
    content: string
    position: number
  }

  export type QuizzesCreateManyCourseInput = {
    quiz_id?: string
    title: string
    total_questions: number
  }

  export type DiscussionsCreateManyCourseInput = {
    discussion_id?: string
    user_id: string
    title: string
    content: string
    created_at?: Date | string
  }

  export type EnrollmentsCreateManyCourseInput = {
    enrollment_id?: string
    user_id: string
    enrolled_at?: Date | string
  }

  export type ProgressCreateManyCourseInput = {
    progress_id?: string
    user_id: string
    lesson_id: string
    is_complete: boolean
    updated_at?: Date | string
  }

  export type CourseTeachersUpdateWithoutCoursesInput = {
    id?: StringFieldUpdateOperationsInput | string
    teacher_role?: EnumTeacherRoleFieldUpdateOperationsInput | $Enums.TeacherRole
    assigned_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCourseteachersNestedInput
  }

  export type CourseTeachersUncheckedUpdateWithoutCoursesInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    teacher_role?: EnumTeacherRoleFieldUpdateOperationsInput | $Enums.TeacherRole
    assigned_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourseTeachersUncheckedUpdateManyWithoutCoursesInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    teacher_role?: EnumTeacherRoleFieldUpdateOperationsInput | $Enums.TeacherRole
    assigned_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LessonsUpdateWithoutCourseInput = {
    lesson_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    progress?: ProgressUpdateManyWithoutLessonNestedInput
  }

  export type LessonsUncheckedUpdateWithoutCourseInput = {
    lesson_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    progress?: ProgressUncheckedUpdateManyWithoutLessonNestedInput
  }

  export type LessonsUncheckedUpdateManyWithoutCourseInput = {
    lesson_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
  }

  export type QuizzesUpdateWithoutCourseInput = {
    quiz_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    total_questions?: IntFieldUpdateOperationsInput | number
    questions?: QuestionsUpdateManyWithoutQuizzesNestedInput
  }

  export type QuizzesUncheckedUpdateWithoutCourseInput = {
    quiz_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    total_questions?: IntFieldUpdateOperationsInput | number
    questions?: QuestionsUncheckedUpdateManyWithoutQuizzesNestedInput
  }

  export type QuizzesUncheckedUpdateManyWithoutCourseInput = {
    quiz_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    total_questions?: IntFieldUpdateOperationsInput | number
  }

  export type DiscussionsUpdateWithoutCourseInput = {
    discussion_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutDiscussionsNestedInput
    comments?: CommentsUpdateManyWithoutDiscussionNestedInput
  }

  export type DiscussionsUncheckedUpdateWithoutCourseInput = {
    discussion_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    comments?: CommentsUncheckedUpdateManyWithoutDiscussionNestedInput
  }

  export type DiscussionsUncheckedUpdateManyWithoutCourseInput = {
    discussion_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EnrollmentsUpdateWithoutCourseInput = {
    enrollment_id?: StringFieldUpdateOperationsInput | string
    enrolled_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutEnrollmentsNestedInput
  }

  export type EnrollmentsUncheckedUpdateWithoutCourseInput = {
    enrollment_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    enrolled_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EnrollmentsUncheckedUpdateManyWithoutCourseInput = {
    enrollment_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    enrolled_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProgressUpdateWithoutCourseInput = {
    progress_id?: StringFieldUpdateOperationsInput | string
    is_complete?: BoolFieldUpdateOperationsInput | boolean
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutProgressNestedInput
    lesson?: LessonsUpdateOneRequiredWithoutProgressNestedInput
  }

  export type ProgressUncheckedUpdateWithoutCourseInput = {
    progress_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    lesson_id?: StringFieldUpdateOperationsInput | string
    is_complete?: BoolFieldUpdateOperationsInput | boolean
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProgressUncheckedUpdateManyWithoutCourseInput = {
    progress_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    lesson_id?: StringFieldUpdateOperationsInput | string
    is_complete?: BoolFieldUpdateOperationsInput | boolean
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProgressCreateManyLessonInput = {
    progress_id?: string
    user_id: string
    course_id: string
    is_complete: boolean
    updated_at?: Date | string
  }

  export type ProgressUpdateWithoutLessonInput = {
    progress_id?: StringFieldUpdateOperationsInput | string
    is_complete?: BoolFieldUpdateOperationsInput | boolean
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutProgressNestedInput
    course?: CoursesUpdateOneRequiredWithoutProgressNestedInput
  }

  export type ProgressUncheckedUpdateWithoutLessonInput = {
    progress_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    course_id?: StringFieldUpdateOperationsInput | string
    is_complete?: BoolFieldUpdateOperationsInput | boolean
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProgressUncheckedUpdateManyWithoutLessonInput = {
    progress_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    course_id?: StringFieldUpdateOperationsInput | string
    is_complete?: BoolFieldUpdateOperationsInput | boolean
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionsCreateManyQuizzesInput = {
    question_id?: string
    text: string
    type: $Enums.QuestionType
  }

  export type QuestionsUpdateWithoutQuizzesInput = {
    question_id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    type?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    options?: OptionsUpdateManyWithoutQuestionNestedInput
  }

  export type QuestionsUncheckedUpdateWithoutQuizzesInput = {
    question_id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    type?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
    options?: OptionsUncheckedUpdateManyWithoutQuestionNestedInput
  }

  export type QuestionsUncheckedUpdateManyWithoutQuizzesInput = {
    question_id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    type?: EnumQuestionTypeFieldUpdateOperationsInput | $Enums.QuestionType
  }

  export type OptionsCreateManyQuestionInput = {
    option_id?: string
    text: string
    is_correct: boolean
  }

  export type OptionsUpdateWithoutQuestionInput = {
    option_id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    is_correct?: BoolFieldUpdateOperationsInput | boolean
  }

  export type OptionsUncheckedUpdateWithoutQuestionInput = {
    option_id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    is_correct?: BoolFieldUpdateOperationsInput | boolean
  }

  export type OptionsUncheckedUpdateManyWithoutQuestionInput = {
    option_id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    is_correct?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CommentsCreateManyDiscussionInput = {
    comment_id?: string
    user_id: string
    content: string
    created_at?: Date | string
  }

  export type CommentsUpdateWithoutDiscussionInput = {
    comment_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentsUncheckedUpdateWithoutDiscussionInput = {
    comment_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentsUncheckedUpdateManyWithoutDiscussionInput = {
    comment_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}